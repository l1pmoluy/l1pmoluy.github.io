<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Blog</title>
  <icon>https://www.gravatar.com/avatar/de50f197847846b143872aac7b24cd34</icon>
  <subtitle>to be continued...</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2024-11-26T03:18:32.821Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yourname</name>
    <email>yourname@yourmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CreatRemoteThread实现注入</title>
    <link href="http://yoursite.com/2024/11/26/CreatRemoteThread%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2024/11/26/CreatRemoteThread%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%85%A5/</id>
    <published>2024-11-26T03:13:35.000Z</published>
    <updated>2024-11-26T03:18:32.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>写一段shellcode，用CreateReoteThread函数注入 </p><p><a href="https://blog.csdn.net/weixin_44120785/article/details/131690046">Windows C++远程线程（CreateRemoteThread）注入DLL方法、代码示例。-CSDN博客</a></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/intro/dll.jpg" alt="dll注入原理"></h2><h2 id="代码源码"><a href="#代码源码" class="headerlink" title="代码源码"></a>代码源码</h2><h3 id="dll代码"><a href="#dll代码" class="headerlink" title="dll代码"></a>dll代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// DLL入口点函数</span></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="comment">// 弹窗代码</span></span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;Hello from YourDLL!&quot;</span>, <span class="string">L&quot;DLL Injection&quot;</span>, MB_OK | MB_ICONINFORMATION);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>**入口函数 **<code>**DllMain**</code>：这是 DLL 的入口函数，每当有新的进程或线程加载或卸载此 DLL 时，系统会调用 <code>DllMain</code> 函数。该函数的返回值是一个 <code>BOOL</code>，返回 <code>TRUE</code> 表示加载成功，返回 <code>FALSE</code> 表示加载失败。</li><li><strong>参数说明</strong>：</li><li><code>HMODULE hModule</code>：DLL 模块句柄。</li><li><code>DWORD ul_reason_for_call</code>：调用原因，可能的值为：<ul><li><code>DLL_PROCESS_ATTACH</code>：进程加载 DLL 时调用。</li><li><code>DLL_THREAD_ATTACH</code>：线程加载 DLL 时调用。</li><li><code>DLL_THREAD_DETACH</code>：线程卸载 DLL 时调用。</li><li><code>DLL_PROCESS_DETACH</code>：进程卸载 DLL 时调用。</li></ul></li><li><code>LPVOID lpReserved</code>：保留字段，在一般情况下不需要使用。</li><li><strong>功能实现</strong>：</li><li><code>case DLL_PROCESS_ATTACH</code>：当 DLL 被加载时执行的代码。在这里，通过 <code>MessageBox</code> 函数显示一个弹窗，内容为 <code>&quot;Hello from YourDLL!&quot;</code>。</li><li>其他情况（<code>DLL_THREAD_ATTACH</code>、<code>DLL_THREAD_DETACH</code>、<code>DLL_PROCESS_DETACH</code>）下不执行任何操作。</li><li><code>**MessageBox**</code>** 函数**：创建一个带消息的弹窗。传入的参数如下：</li><li><code>NULL</code>：弹窗不依赖任何父窗口。</li><li><code>L&quot;Hello from YourDLL!&quot;</code>：弹窗的消息内容。</li><li><code>L&quot;DLL Injection&quot;</code>：弹窗的标题。</li><li><code>MB_OK | MB_ICONINFORMATION</code>：弹窗显示 “OK” 按钮，并使用信息图标。</li></ul><h3 id="被注入dll的进程代码"><a href="#被注入dll的进程代码" class="headerlink" title="被注入dll的进程代码"></a>被注入dll的进程代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sleep(<span class="number">1000</span> * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***\n&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="执行注入的代码"><a href="#执行注入的代码" class="headerlink" title="执行注入的代码"></a>执行注入的代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取目标进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetTargetProcessID</span><span class="params">(<span class="type">const</span> TCHAR* targetProcessName)</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD processID = <span class="number">0</span>;</span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        PROCESSENTRY32 processEntry;</span><br><span class="line">        processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">        <span class="keyword">if</span> (Process32First(hSnapshot, &amp;processEntry))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tcsicmp(processEntry.szExeFile, targetProcessName) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    processID = processEntry.th32ProcessID;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;processEntry));</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hSnapshot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processID;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 远程线程注入DLL</span></span><br><span class="line">BOOL <span class="title function_">InjectDll</span><span class="params">(DWORD processID, <span class="type">const</span> TCHAR* dllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    LPVOID dllPathAddress = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (dllPathAddress == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    SIZE_T bytesWritten;</span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, dllPathAddress, dllPath, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), &amp;bytesWritten))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    HMODULE kernel32Module = GetModuleHandle(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    LPTHREAD_START_ROUTINE loadLibraryFunction = (LPTHREAD_START_ROUTINE)GetProcAddress(kernel32Module, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line">    HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, loadLibraryFunction, dllPathAddress, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    WaitForSingleObject(hRemoteThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hRemoteThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> TCHAR* targetProcessName = _T(<span class="string">&quot;runTest.exe&quot;</span>); <span class="comment">// 目标进程的名称</span></span><br><span class="line">    <span class="type">const</span> TCHAR* dllPath = _T(<span class="string">&quot;C:\\Users\\admin\\source\\repos\\DLLinject\\x64\\Debug\\DLLinject.dll&quot;</span>); <span class="comment">// 自定义DLL的路径</span></span><br><span class="line"> </span><br><span class="line">    DWORD targetProcessID = GetTargetProcessID(targetProcessName);</span><br><span class="line">    <span class="keyword">if</span> (targetProcessID != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (InjectDll(targetProcessID, dllPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;DLL injected successfully.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failed to inject DLL.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Target process not found.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="单段分析"><a href="#单段分析" class="headerlink" title="单段分析"></a>单段分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> TCHAR* targetProcessName = _T(<span class="string">&quot;Aes!.exe&quot;</span>); <span class="comment">// 目标进程的名称</span></span><br><span class="line">    <span class="type">const</span> TCHAR* dllPath = _T(<span class="string">&quot;D:\\study\\VSstdio\\dllxxx\\dllmain\\x64\\Debug\\dllin.dll&quot;</span>); <span class="comment">// 自定义DLL的路径</span></span><br><span class="line"></span><br><span class="line">    DWORD targetProcessID = GetTargetProcessID(targetProcessName);</span><br></pre></td></tr></table></figure><p>首先这套程序的使用方法是，被注入进程的先运行，再运行执行注入的代码，代码在刚开始会找你要注入的程序，找到以后，就调用dll代码，说明注入成功</p><p>接下来，先细分析执行注入代码的每一段</p><p>首先看到，设置了两个变量名称，一个是目标进程名，另一个是dll代码地址，后面设立了目标进程id为得到目标进程id函数里传入目标进程名，就跟着去分析得到目标进程id函数</p><h4 id="获取进程的ID"><a href="#获取进程的ID" class="headerlink" title="获取进程的ID"></a>获取进程的ID</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DWORD <span class="title function_">GetTargetProcessID</span><span class="params">(<span class="type">const</span> TCHAR* targetProcessName)</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD processID = <span class="number">0</span>;</span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        PROCESSENTRY32 processEntry;</span><br><span class="line">        processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">        <span class="keyword">if</span> (Process32First(hSnapshot, &amp;processEntry))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tcsicmp(processEntry.szExeFile, targetProcessName) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    processID = processEntry.th32ProcessID;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;processEntry));</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hSnapshot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义，其次定义processID后面用，紧接着函数访问获取一个正在进行的程序返回一个权柄给hSnapshot，if语句判断返回是否成功，紧接着if语句内，用结构体定义快速存储进程这两步是绑定的，作用就是快速遍历所有进程</p><p>之后的if语句，<code>Process32First(hSnapshot, &amp;processEntry)</code>这个是初始，把结构体创造的程序空间赋值，赋值的对象是获取的进程，注意此时后面的是指针，给之后是if判定是不是要的程序名，如果是的话，就把此时的id给processid，退出循环，返回id，回到主程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (targetProcessID != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (InjectDll(targetProcessID, dllPath))</span><br></pre></td></tr></table></figure><p>这里先判断是否成功获取id，获取成功了就进函数</p><h4 id="远程线程注入DLL"><a href="#远程线程注入DLL" class="headerlink" title="远程线程注入DLL"></a>远程线程注入DLL</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">InjectDll</span><span class="params">(DWORD processID, <span class="type">const</span> TCHAR* dllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);</span><br></pre></td></tr></table></figure><p> 首先是定义一个句柄hProcess，用函数OpenProcess打开进程，获取其句柄，如果失败返回false</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续if语句就是说如果上文的Open失败的话会返回null，如果null了就返回false结束函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPVOID dllPathAddress = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开辟一处内存空间用于放置需要的dll代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dllPathAddress == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否成功，失败的话用closehandle函数关闭打开的句柄，并返回失败</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> SIZE_T bytesWritten;</span><br><span class="line"><span class="keyword">if</span> (!WriteProcessMemory(hProcess, dllPathAddress, dllPath, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), &amp;bytesWritten))</span><br><span class="line">&#123;</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建存储返回实际写入字节的变量，if里调用写入dll代码的函数，如果成功返回ture，再根据“！”反义不进条件，反之进if条件，将开辟的空间释放，然后关闭句柄</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    HMODULE kernel32Module = GetModuleHandle(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    LPTHREAD_START_ROUTINE loadLibraryFunction = (LPTHREAD_START_ROUTINE)GetProcAddress(kernel32Module, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line">    HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, loadLibraryFunction, dllPathAddress, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hRemoteThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hRemoteThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里没什么就是比较固定的模板了，前三个函数分别是</p><p>获取“kernel32.dll”的句柄</p><p>获取线程启动的函数指针，这个函数就是负责后续可以正常让dll注入的代码用的，在kernel32.dll里</p><p>CreateRemoteThread这个函数把线程启动函数用了让要注入的dll函数，注入到线程中，并且把远程线程句柄传回</p><p>如果失败了就释放创建的地方，关闭句柄</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    WaitForSingleObject(hRemoteThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hRemoteThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待远程创建的程序接到下一项指令，这里是因为我的dll程序写的有等待响应所以说这里才会要等待函数，后面就是响应完就没事了就结束释放这几个句柄了</p><h3 id="用到的新东西"><a href="#用到的新东西" class="headerlink" title="用到的新东西"></a>用到的新东西</h3><h4 id="CreateToolhelp32Snapshot（TH32CS-SNAP-x）函数"><a href="#CreateToolhelp32Snapshot（TH32CS-SNAP-x）函数" class="headerlink" title="CreateToolhelp32Snapshot（TH32CS_SNAP...,x）函数"></a><code>CreateToolhelp32Snapshot（TH32CS_SNAP...,x）</code>函数</h4><p>是 Windows API 中用于获取系统进程、线程、模块和堆栈信息的函数，函数需要的</p><h5 id="传参："><a href="#传参：" class="headerlink" title="传参："></a>传参：</h5><h6 id="第一位"><a href="#第一位" class="headerlink" title="第一位"></a>第一位</h6><pre><code>     表示我们请求创建一个进程快照。该参数指定了快照内容的类型    * `TH32CS_SNAPPROCESS`：表示获取系统中所有正在运行的进程信息。    * `TH32CS_SNAPTHREAD`：获取线程信息。    * `TH32CS_SNAPMODULE`：获取模块（DLL）信息。    * `TH32CS_SNAPHEAPLIST`：获取堆栈信息。</code></pre><h6 id="第二位"><a href="#第二位" class="headerlink" title="第二位"></a>第二位</h6><p>表示指定程序的ID，如果是0就代表全部都要</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回句柄</p><p>如果失败会返回 INVALID_HANDLE_VALUE  </p><h4 id="OpenProcess-access-bool-processID-函数"><a href="#OpenProcess-access-bool-processID-函数" class="headerlink" title="OpenProcess(access,bool,processID)函数"></a><code>OpenProcess(access,bool,processID)</code>函数</h4><p>起作用如名，打开进程，获取句柄</p><h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><h6 id="第一位-1"><a href="#第一位-1" class="headerlink" title="第一位"></a>第一位</h6><p>表示你想要获取的权限</p><pre><code>    * `PROCESS_ALL_ACCESS`：表示全部权限</code></pre><h6 id="第二位-1"><a href="#第二位-1" class="headerlink" title="第二位"></a>第二位</h6><p>表示失败返回bool值</p><h6 id="第三位"><a href="#第三位" class="headerlink" title="第三位"></a>第三位</h6><p>表示要打开的进程id</p><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回句柄</p><p>失败返回FALSE</p><h4 id="CloseHandle函数"><a href="#CloseHandle函数" class="headerlink" title="CloseHandle函数"></a><code>CloseHandle</code>函数</h4><p>这个就没啥说的和上面的<code>OpenProcess</code>刚好相反作用，就是注意传参传入你想关闭的句柄就ok</p><h4 id="VirtualAllocEx（access-lpaddress-dwsize-flallocationtype-flprotect）-函数"><a href="#VirtualAllocEx（access-lpaddress-dwsize-flallocationtype-flprotect）-函数" class="headerlink" title="VirtualAllocEx（access,lpaddress,dwsize,flallocationtype,flprotect） 函数"></a><code>VirtualAllocEx（access,lpaddress,dwsize,flallocationtype,flprotect）</code> 函数</h4><p>是 Windows API 中用于在指定的进程地址空间内分配内存的函数  </p><h5 id="传参-1"><a href="#传参-1" class="headerlink" title="传参"></a>传参</h5><h6 id="第一位-2"><a href="#第一位-2" class="headerlink" title="第一位"></a>第一位</h6><p>目标进程的句柄</p><h6 id="第二位-2"><a href="#第二位-2" class="headerlink" title="第二位"></a>第二位</h6><p>空间分配的地方，如果是null就表示系统自己安排</p><h6 id="第三位-1"><a href="#第三位-1" class="headerlink" title="第三位"></a>第三位</h6><p>需要分配的大小</p><h6 id="第四位"><a href="#第四位" class="headerlink" title="第四位"></a>第四位</h6><p>内存分配的类型，指定如何分配</p><h6 id="第五位"><a href="#第五位" class="headerlink" title="第五位"></a>第五位</h6><p>内存区域的保护属性，指定该区域的访问权限</p><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回区域指针（LPVOID)</p><p>失败返回FALSE</p><h4 id="VirtualFreeEx-hProcess-dllPathAddress-0-MEM-RELEASE-函数"><a href="#VirtualFreeEx-hProcess-dllPathAddress-0-MEM-RELEASE-函数" class="headerlink" title="VirtualFreeEx(hProcess, dllPathAddress, 0, MEM_RELEASE)函数"></a><code>VirtualFreeEx(hProcess, dllPathAddress, 0, MEM_RELEASE)</code>函数</h4><p>这个和上一个起相反作用，就是记一下传参，第一个是句柄，第二个是开辟的空间区域指针，第三个第四个如果是为了关闭的话固定传就好，第四个起主关闭作用</p><h4 id="WriteProcessMemory-access-dllPathAddress-lpBuffer-lpNumberOfBytesWritten-bytesWritten）函数"><a href="#WriteProcessMemory-access-dllPathAddress-lpBuffer-lpNumberOfBytesWritten-bytesWritten）函数" class="headerlink" title=" WriteProcessMemory(access, dllPathAddress, lpBuffer , lpNumberOfBytesWritten  , &amp;bytesWritten）函数"></a><code> WriteProcessMemory(access, dllPathAddress, lpBuffer , lpNumberOfBytesWritten  , &amp;bytesWritten）</code>函数</h4><pre><code> 用于将数据写入指定的进程的内存中  </code></pre><h5 id="传参-2"><a href="#传参-2" class="headerlink" title="传参"></a>传参</h5><h6 id="第一位-3"><a href="#第一位-3" class="headerlink" title="第一位"></a>第一位</h6><p>目标进程的句柄</p><h6 id="第二位-3"><a href="#第二位-3" class="headerlink" title="第二位"></a>第二位</h6><p>你要写在哪</p><h6 id="第三位-2"><a href="#第三位-2" class="headerlink" title="第三位"></a>第三位</h6><p>你要写入的东西，传入类型为区域指针</p><h6 id="第四位-1"><a href="#第四位-1" class="headerlink" title="第四位"></a>第四位</h6><p>要写入的字节数</p><h6 id="第五位-1"><a href="#第五位-1" class="headerlink" title="第五位"></a>第五位</h6><p>返回实际写入的字节数。</p><h5 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回TRUE</p><p>失败返回FALSE</p><h4 id="GetModuleHandle-（model）-函数"><a href="#GetModuleHandle-（model）-函数" class="headerlink" title="GetModuleHandle （model） 函数"></a><code>GetModuleHandle （model）</code> 函数</h4><p>此函数用于获取已加载的模块的句柄</p><h5 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h5><p>句柄</p><h4 id="GetProcAddress-（access-process-name-函数"><a href="#GetProcAddress-（access-process-name-函数" class="headerlink" title="GetProcAddress （access,process_name) 函数"></a><code>GetProcAddress （access,process_name)</code> 函数</h4><p> 作用是获取指定模块（DLL 或 EXE）中某个函数的地址  </p><h5 id="传参-3"><a href="#传参-3" class="headerlink" title="传参"></a>传参</h5><h6 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h6><p>目标模块的权柄</p><h6 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h6><p>目标的名称，如果传入的时函数名称，返回的就是对应函数地址，如果传入的是函数序号，返回与序号对应的函数地址</p><h5 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h5><p>成功时返回函数指针</p><p>失败时返回null</p><h4 id="CreateRemoteThread（access-NULL-0-loadLibraryFunction-dllPathAddress，0，NULL）-函数"><a href="#CreateRemoteThread（access-NULL-0-loadLibraryFunction-dllPathAddress，0，NULL）-函数" class="headerlink" title="CreateRemoteThread（access,NULL,0,loadLibraryFunction,dllPathAddress，0，NULL） 函数"></a><code>CreateRemoteThread（access,NULL,0,loadLibraryFunction,dllPathAddress，0，NULL） </code>函数</h4><h5 id="传参-4"><a href="#传参-4" class="headerlink" title="传参"></a>传参</h5><h6 id="第一个-1"><a href="#第一个-1" class="headerlink" title="第一个"></a>第一个</h6><p>目标进程的权柄</p><h6 id="第二个-1"><a href="#第二个-1" class="headerlink" title="第二个"></a>第二个</h6><p>线程安全属性（默认传null就好）</p><h6 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h6><p>线程栈堆大小（默认传0就好）</p><h6 id="第四个"><a href="#第四个" class="headerlink" title="第四个"></a>第四个</h6><p>你要在这里启动的过度函数</p><h6 id="第五个"><a href="#第五个" class="headerlink" title="第五个"></a>第五个</h6><p>过渡函数的参数，也就是传给第四个参数的，在本段函数中我们知道是要调用线程启动函数，目的是把dll函数注入进线程中，所以这个地方传入的应该是dll函数的地址</p><h6 id="第六个"><a href="#第六个" class="headerlink" title="第六个"></a>第六个</h6><p>线程创建标志（默认传0就好）</p><h6 id="第七个"><a href="#第七个" class="headerlink" title="第七个"></a>第七个</h6><p>返回线程ID，就是说注入之后需不需要接上别的程序，用的话就传id，不用的话就直接null</p><h5 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h5><p>成功了就返回创建的远程线程的句柄（这个函数弄出来的句柄）</p><p>失败的话就NULL</p><h4 id="PROCESSENTRY32-xxx结构体"><a href="#PROCESSENTRY32-xxx结构体" class="headerlink" title="PROCESSENTRY32 xxx结构体"></a><code>PROCESSENTRY32 xxx</code>结构体</h4><p>是用来存储单个进程信息的结构体</p><h4 id="Kernel32-dll模块"><a href="#Kernel32-dll模块" class="headerlink" title="Kernel32.dll模块"></a><code>Kernel32.dll</code>模块</h4><p> 是 Windows 系统的核心动态链接库，提供了许多重要的系统函数，如内存管理、进程控制、文件操作等  </p><p> CreateRemoteThread  </p><h4 id="WaitForSingleObject-hRemoteThread-INFINITE-函数"><a href="#WaitForSingleObject-hRemoteThread-INFINITE-函数" class="headerlink" title=" WaitForSingleObject(hRemoteThread, INFINITE)函数"></a><code> WaitForSingleObject(hRemoteThread, INFINITE)</code>函数</h4><p> 用于等待指定的对象（如线程、事件、互斥体等）进入“信号状态”。它通常用于同步操作，等待某个操作完成或某个条件满足  </p><h5 id="传参-5"><a href="#传参-5" class="headerlink" title="传参"></a>传参</h5><h6 id="第一个-2"><a href="#第一个-2" class="headerlink" title="第一个"></a>第一个</h6><p>等待线程的句柄</p><h6 id="第二个-2"><a href="#第二个-2" class="headerlink" title="第二个"></a>第二个</h6><p>等待时间</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h1&gt;&lt;p&gt;写一段shellcode，用CreateReoteThread函数注入 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>start of dream</title>
    <link href="http://yoursite.com/2024/11/25/start%20of%20dream/"/>
    <id>http://yoursite.com/2024/11/25/start%20of%20dream/</id>
    <published>2024-11-25T11:56:24.268Z</published>
    <updated>2024-11-25T14:27:22.637Z</updated>
    
    <content type="html"><![CDATA[<p>谨以此文记录逆向启程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谨以此文记录逆向启程&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
