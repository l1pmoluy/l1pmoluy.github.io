<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>l1pmoluy&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/50c928affb5661d50f3b72b81aa32150</icon>
  <subtitle>Dawing</subtitle>
  <link href="http://l1pmoluy.github.io/atom.xml" rel="self"/>
  
  <link href="http://l1pmoluy.github.io/"/>
  <updated>2025-03-24T09:39:03.901Z</updated>
  <id>http://l1pmoluy.github.io/</id>
  
  <author>
    <name>l1pmoluy</name>
    <email>1392181761@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025nctfwp</title>
    <link href="http://l1pmoluy.github.io/2025/03/24/2025nctfwp/"/>
    <id>http://l1pmoluy.github.io/2025/03/24/2025nctfwp/</id>
    <published>2025-03-24T09:37:22.000Z</published>
    <updated>2025-03-24T09:39:03.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ezDos"><a href="#ezDos" class="headerlink" title="ezDos"></a>ezDos</h1><p>好像只能汇编分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">0000</span> seg002          segment byte public <span class="string">&#x27;CODE&#x27;</span> use16</span><br><span class="line">seg002:<span class="number">0000</span>                 assume cs:seg002</span><br><span class="line">seg002:<span class="number">0000</span>                 assume es:nothing, ss:seg001, ds:nothing, fs:nothing, gs:nothing</span><br><span class="line">seg002:<span class="number">0000</span></span><br><span class="line">seg002:<span class="number">0000</span>                 public start</span><br><span class="line">seg002:<span class="number">0000</span> start:</span><br><span class="line">seg002:<span class="number">0000</span>                 mov     ax, seg dseg</span><br><span class="line">seg002:<span class="number">0003</span>                 mov     ds, ax</span><br><span class="line">seg002:<span class="number">0005</span>                 assume ds:dseg</span><br><span class="line">seg002:<span class="number">0005</span>                 mov     es, ax</span><br><span class="line">seg002:<span class="number">0007</span>                 assume es:dseg</span><br><span class="line">seg002:<span class="number">0007</span>                 xor     ax, ax</span><br><span class="line">seg002:<span class="number">0009</span>                 test    ax, ax</span><br><span class="line">seg002:<span class="number">000B</span>                 jnz     <span class="type">short</span> loc_104BF</span><br><span class="line">seg002:<span class="number">000</span>D                 jz      <span class="type">short</span> loc_104C0</span><br><span class="line">seg002:<span class="number">000F</span></span><br><span class="line">seg002:<span class="number">000F</span> loc_104BF:                              ; CODE XREF: seg002:<span class="number">000B</span>↑j</span><br><span class="line">seg002:<span class="number">000F</span>                 nop</span><br><span class="line">seg002:<span class="number">0010</span></span><br><span class="line">seg002:<span class="number">0010</span> loc_104C0:                              ; CODE XREF: seg002:<span class="number">000</span>D↑j</span><br><span class="line">seg002:<span class="number">0010</span>                 mov     ah, <span class="number">9</span></span><br><span class="line">seg002:<span class="number">0012</span>                 lea     dx, aShowMeYourFlag ; <span class="string">&quot;\r\nShow me your flag: $\r\nCongradulat&quot;</span>...</span><br><span class="line">seg002:<span class="number">0016</span>                 <span class="type">int</span>     <span class="number">21</span>h             ; DOS - PRINT STRING</span><br><span class="line">seg002:<span class="number">0016</span>                                         ; DS:DX -&gt; <span class="built_in">string</span> terminated by <span class="string">&quot;$&quot;</span></span><br><span class="line">seg002:<span class="number">0018</span>                 mov     ah, <span class="number">0</span>Ah</span><br><span class="line">seg002:<span class="number">001</span>A                 lea     dx, unk_10168</span><br><span class="line">seg002:<span class="number">001</span>E                 <span class="type">int</span>     <span class="number">21</span>h             ; DOS - BUFFERED KEYBOARD INPUT</span><br><span class="line">seg002:<span class="number">001</span>E                                         ; DS:DX -&gt; buffer</span><br><span class="line">seg002:<span class="number">0020</span>                 call    sub_10630</span><br><span class="line">seg002:<span class="number">0025</span>                 lea     bx, unk_10168</span><br><span class="line">seg002:<span class="number">0029</span>                 inc     bx</span><br><span class="line">seg002:<span class="number">002</span>A                 cmp     byte ptr [bx], <span class="number">26</span>h ; <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">seg002:<span class="number">002</span>D                 jz      <span class="type">short</span> loc_104E2</span><br><span class="line">seg002:<span class="number">002F</span>                 jmp     loc_105B7</span><br></pre></td></tr></table></figure><p>这部分是将输入放在168的位置，并且168里放的是大小，要比对大小是0x26</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">0032</span> ; ---------------------------------------------------------------------------</span><br><span class="line">seg002:<span class="number">0032</span></span><br><span class="line">seg002:<span class="number">0032</span> loc_104E2:                              ; CODE XREF: seg002:<span class="number">002</span>D↑j</span><br><span class="line">seg002:<span class="number">0032</span>                 xor     si, si</span><br><span class="line">seg002:<span class="number">0034</span>                 xor     di, di</span><br><span class="line">seg002:<span class="number">0036</span>                 xor     cx, cx</span><br><span class="line">seg002:<span class="number">0038</span>                 mov     cx, <span class="number">100</span>h</span><br><span class="line">seg002:<span class="number">003B</span></span><br><span class="line">seg002:<span class="number">003B</span> loc_104EB:                              ; CODE XREF: seg002:<span class="number">003</span>D↓j</span><br><span class="line">seg002:<span class="number">003B</span>                 push    di</span><br><span class="line">seg002:<span class="number">003</span>C                 inc     di</span><br><span class="line">seg002:<span class="number">003</span>D                 loop    loc_104EB</span><br><span class="line">seg002:<span class="number">003F</span></span><br><span class="line">seg002:<span class="number">003F</span> loc_104EF:                              ; CODE XREF: seg002:<span class="number">0052</span>↓j</span><br><span class="line">seg002:<span class="number">003F</span>                 pop     bx</span><br><span class="line">seg002:<span class="number">0040</span>                 call    sub_10670</span><br><span class="line">seg002:<span class="number">0045</span>                 mov     bx, si</span><br><span class="line">seg002:<span class="number">0047</span>                 mov     [si+<span class="number">0</span>], bl</span><br><span class="line">seg002:<span class="number">004B</span>                 inc     si</span><br><span class="line">seg002:<span class="number">004</span>C                 cmp     si, <span class="number">100</span>h</span><br><span class="line">seg002:<span class="number">0050</span>                 jnb     <span class="type">short</span> loc_10504</span><br><span class="line">seg002:<span class="number">0052</span>                 jmp     <span class="type">short</span> loc_104EF</span><br></pre></td></tr></table></figure><pre><code>本题第一个坑，rc4的init阶段，刚开始有一个push 0x100次压栈，但乍一看后面好像并没有用到但是我们去关注sub_10670函数本身</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">seg005:<span class="number">0000</span> sub_10670       proc far                ; CODE XREF: seg002:<span class="number">0040</span>↑P</span><br><span class="line">seg005:<span class="number">0000</span>                 pop     dx</span><br><span class="line">seg005:<span class="number">0001</span>                 push    ax</span><br><span class="line">seg005:<span class="number">0002</span>                 xor     ax, ax</span><br><span class="line">seg005:<span class="number">0004</span>                 mov     ax, <span class="number">0F</span>h</span><br><span class="line">seg005:<span class="number">0007</span>                 and     ax, <span class="number">7</span></span><br><span class="line">seg005:<span class="number">000</span>A                 shl     ax, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">000</span>C                 shl     ax, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">000</span>E                 mov     ah, <span class="number">1</span>Ah</span><br><span class="line">seg005:<span class="number">0010</span>                 not     ah</span><br><span class="line">seg005:<span class="number">0012</span>                 shr     ah, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">0014</span>                 shr     ah, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">0016</span>                 xor     al, ah</span><br><span class="line">seg005:<span class="number">0018</span>                 sub     ah, <span class="number">1</span>Eh</span><br><span class="line">seg005:<span class="number">001B</span>                 and     al, ah</span><br><span class="line">seg005:<span class="number">001</span>D                 inc     al</span><br><span class="line">seg005:<span class="number">001F</span>                 add     dl, al</span><br><span class="line">seg005:<span class="number">0021</span>                 pop     ax</span><br><span class="line">seg005:<span class="number">0022</span>                 push    dx</span><br><span class="line">seg005:<span class="number">0023</span>                 retf</span><br><span class="line">seg005:<span class="number">0023</span> sub_10670       endp</span><br></pre></td></tr></table></figure><pre><code>ret=pop jmp，所以最后push进去的就会是跳转，刚开始pop dx，返回地址被取出，add dl,al，这里对返回地址改动，这个数字是固定的，经过计算这里的al是2，所以call    sub_10670后紧跟的两字节是被越过的</code></pre><p>所以再次观察就会发现，bl里的值就是先前压栈的值，并且栈是先进后出，所以这里rc4init是反着来的盒，所以第一部分造盒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rc4init1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">box[i] = a;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, box[j + i * <span class="number">0x10</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>紧接着往后看</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">0054</span> loc_10504:                              ; CODE XREF: seg002:<span class="number">0050</span>↑j</span><br><span class="line">seg002:<span class="number">0054</span>                 xor     si, si</span><br><span class="line">seg002:<span class="number">0056</span>                 xor     di, di</span><br><span class="line">seg002:<span class="number">0058</span>                 mov     bx, <span class="number">134</span>h</span><br><span class="line">seg002:<span class="number">005B</span>                 mov     cl, [bx]</span><br><span class="line">seg002:<span class="number">005</span>D</span><br><span class="line">seg002:<span class="number">005</span>D loc_1050D:                              ; CODE XREF: seg002:<span class="number">00B</span>9↓j</span><br><span class="line">seg002:<span class="number">005</span>D                 mov     dl, [si+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">0061</span>                 add     di, dx</span><br><span class="line">seg002:<span class="number">0063</span>                 mov     ax, si</span><br><span class="line">seg002:<span class="number">0065</span>                 div     cl</span><br><span class="line">seg002:<span class="number">0067</span>                 mov     al, ah</span><br><span class="line">seg002:<span class="number">0069</span>                 xor     ah, ah</span><br><span class="line">seg002:<span class="number">006B</span>                 mov     bx, <span class="number">135</span>h</span><br><span class="line">seg002:<span class="number">006</span>E                 add     bx, ax</span><br><span class="line">seg002:<span class="number">0070</span>                 mov     al, [bx]</span><br><span class="line">seg002:<span class="number">0072</span>                 push    ax</span><br><span class="line">seg002:<span class="number">0073</span>                 call    jmp_$<span class="number">6</span></span><br><span class="line">seg002:<span class="number">0078</span>                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">007</span>A                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">007</span>C                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">007</span>E                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0080</span>                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0082</span>                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0084</span>                 mov     dx, ax</span><br><span class="line">seg002:<span class="number">0086</span>                 pop     ax</span><br><span class="line">seg002:<span class="number">0087</span>                 push    dx</span><br><span class="line">seg002:<span class="number">0088</span>                 call    jmp_$<span class="number">2</span></span><br><span class="line">seg002:<span class="number">008</span>D                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">008F</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0091</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0093</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0095</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0097</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0099</span>                 pop     dx</span><br><span class="line">seg002:<span class="number">009</span>A                 or      al, dl</span><br><span class="line">seg002:<span class="number">009</span>C                 add     di, ax</span><br><span class="line">seg002:<span class="number">009</span>E                 and     di, <span class="number">0F</span>Fh</span><br><span class="line">seg002:<span class="number">00</span>A2                 mov     al, [si+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>A6                 mov     dl, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>AA                 xchg    al, dl</span><br><span class="line">seg002:<span class="number">00</span>AC                 mov     [di+<span class="number">0</span>], dl</span><br><span class="line">seg002:<span class="number">00B</span>0                 mov     [si+<span class="number">0</span>], al</span><br><span class="line">seg002:<span class="number">00B</span>4                 inc     si</span><br><span class="line">seg002:<span class="number">00B</span>5                 cmp     si, <span class="number">100</span>h</span><br><span class="line">seg002:<span class="number">00B</span>9                 jb      <span class="type">short</span> loc_1050D</span><br></pre></td></tr></table></figure><pre><code>于是就该换盒了，si=i,di=j，慢慢看，134里面存储的是0xc，后面紧跟着是&#39;NCTf2024nctF&#39;，刚好12字节大小，并且0xc给了cl，[+0]代表的是前面造的盒</code></pre><p>一开始是</p><p>dl&#x3D;S[i];</p><p>j&#x3D;j+dl;</p><p>al&#x3D;key[i%0xc];</p><p>后面紧跟着的push ax是为了把前面左移和后面右移区分，同时这两个函数也和前面一样是用来改变返回地址的，所以这里实现的是：</p><p>push ax;</p><p>shl ax,3;</p><p>mov dx,ax;</p><p>pop ax;</p><p>push dx;</p><p>shr ax,5;</p><p>pop dx;</p><p>or al,dl:</p><p>add di,ax;</p><p>也就相当于(a&lt;&lt;3)|(a&gt;&gt;5)，最后j+&#x3D;a;</p><p>j%256;</p><p>change(S[i],S[j]);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">00B</span>B                 xor     cx, cx</span><br><span class="line">seg002:<span class="number">00B</span>D                 mov     bx, <span class="number">169</span>h</span><br><span class="line">seg002:<span class="number">00</span>C0                 mov     cl, [bx]</span><br><span class="line">seg002:<span class="number">00</span>C2                 inc     bx</span><br><span class="line">seg002:<span class="number">00</span>C3                 mov     si, bx</span><br><span class="line">seg002:<span class="number">00</span>C5                 xor     bx, bx</span><br><span class="line">seg002:<span class="number">00</span>C7                 xor     dx, dx</span><br><span class="line">seg002:<span class="number">00</span>C9                 xor     ax, ax</span><br><span class="line">seg002:<span class="number">00</span>CB                 test    ax, ax</span><br><span class="line">seg002:<span class="number">00</span>CD                 jnz     <span class="type">short</span> loc_10581</span><br><span class="line">seg002:<span class="number">00</span>CF                 jz      <span class="type">short</span> loc_10582</span><br><span class="line">seg002:<span class="number">00</span>D1</span><br><span class="line">seg002:<span class="number">00</span>D1 loc_10581:                              ; CODE XREF: seg002:<span class="number">00</span>CD↑j</span><br><span class="line">seg002:<span class="number">00</span>D1                 nop</span><br><span class="line">seg002:<span class="number">00</span>D2</span><br><span class="line">seg002:<span class="number">00</span>D2 loc_10582:                              ; CODE XREF: seg002:<span class="number">00</span>CF↑j</span><br><span class="line">seg002:<span class="number">00</span>D2                                         ; seg002:<span class="number">00F</span>E↓j</span><br><span class="line">seg002:<span class="number">00</span>D2                 inc     bl</span><br><span class="line">seg002:<span class="number">00</span>D4                 mov     al, [bx+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>D8                 add     dl, al</span><br><span class="line">seg002:<span class="number">00</span>DA                 push    dx</span><br><span class="line">seg002:<span class="number">00</span>DB                 mov     di, dx</span><br><span class="line">seg002:<span class="number">00</span>DD                 mov     al, [bx+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00E1</span>                 xchg    al, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00E5</span>                 mov     [bx+<span class="number">0</span>], al</span><br><span class="line">seg002:<span class="number">00E9</span>                 add     al, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>ED                 mov     di, ax</span><br><span class="line">seg002:<span class="number">00</span>EF                 mov     al, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00F</span>3                 call    jmp_$<span class="number">1</span></span><br><span class="line">seg002:<span class="number">00F</span>8                 inc     ax</span><br><span class="line">seg002:<span class="number">00F</span>9                 inc     ax</span><br><span class="line">seg002:<span class="number">00F</span>A                 xor     [si], al</span><br><span class="line">seg002:<span class="number">00F</span>C                 pop     dx</span><br><span class="line">seg002:<span class="number">00F</span>D                 inc     si</span><br><span class="line">seg002:<span class="number">00F</span>E                 loop    loc_10582</span><br><span class="line">seg002:<span class="number">0100</span>                 jmp     <span class="type">short</span> loc_105C1</span><br></pre></td></tr></table></figure><p>最后一段，怎么说呢，复杂归复杂，慢慢捋出来把，其实就是rc4稍微变了一下。。。服了卡了一天</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4init1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">box[i] = a;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, box[j + i * <span class="number">0x10</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4init2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* key)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> high;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> low;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = box[i] + j;</span><br><span class="line">high = key[i % <span class="number">0xc</span>];</span><br><span class="line">low = high;</span><br><span class="line">mi = ((high &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xff</span>) | ((low &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">j = (j + mi) % <span class="number">256</span>;</span><br><span class="line">mi = box[i];</span><br><span class="line">box[i] = box[j];</span><br><span class="line">box[j] = mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, box[j + i * <span class="number">0x10</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mi;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">0</span>; q &lt; <span class="built_in">strlen</span>(flag); q++)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j = (j + box[i]) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">mi = box[j];</span><br><span class="line">box[j] = box[i];</span><br><span class="line">box[i] = mi;</span><br><span class="line"></span><br><span class="line">t = (box[i] + box[j]) % <span class="number">256</span>;</span><br><span class="line">t = box[t];</span><br><span class="line">t++;</span><br><span class="line"></span><br><span class="line">flag[q] ^= t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[q]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[] = <span class="string">&quot;NCTf2024nctF&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[] = &#123;</span><br><span class="line"><span class="number">0x7C</span>, <span class="number">0x3E</span>, <span class="number">0x0D</span>, <span class="number">0x3C</span>, <span class="number">0x88</span>, <span class="number">0x54</span>, <span class="number">0x83</span>, <span class="number">0x0E</span>, <span class="number">0x3B</span>, <span class="number">0xB8</span>, <span class="number">0x99</span>, <span class="number">0x1B</span>, <span class="number">0x9B</span>, <span class="number">0xE5</span>, <span class="number">0x23</span>, <span class="number">0x43</span>,</span><br><span class="line"><span class="number">0xC5</span>, <span class="number">0x80</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>, <span class="number">0x9A</span>, <span class="number">0x29</span>, <span class="number">0x24</span>, <span class="number">0x38</span>, <span class="number">0xA9</span>, <span class="number">0x5C</span>, <span class="number">0xCB</span>, <span class="number">0x7A</span>, <span class="number">0xE5</span>, <span class="number">0x93</span>, <span class="number">0x73</span>, <span class="number">0x0E</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x6D</span>, <span class="number">0x7C</span>, <span class="number">0x31</span>, <span class="number">0x2B</span>, <span class="number">0x8C</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">rc4init1();</span><br><span class="line">rc4init2(key);</span><br><span class="line">rc4(flag);</span><br><span class="line"><span class="comment">//NCTF&#123;Y0u_4r3_Assemb1y_M4st3r_5d0b497e&#125;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SafeProgram"><a href="#SafeProgram" class="headerlink" title="SafeProgram"></a>SafeProgram</h1><p>拖进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">24</span>]; <span class="comment">// [rsp+38h] [rbp-70h] BYREF</span></span><br><span class="line">  _BYTE Buf1[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-58h] BYREF</span></span><br><span class="line">  _BYTE Buf1_1[<span class="number">48</span>]; <span class="comment">// [rsp+60h] [rbp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_7FF6E42D15F0(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str1));</span><br><span class="line">  <span class="built_in">memset</span>(byte_7FF6E42FC380, <span class="number">0</span>, <span class="keyword">sizeof</span>(byte_7FF6E42FC380));</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">  sub_7FF6E42D1830(aWelcomeToNctf);             <span class="comment">// &quot;Welcome to NCTF\n&quot;</span></span><br><span class="line">  Sleep(<span class="number">0x1F4</span>u);</span><br><span class="line">  sub_7FF6E42D1830(aEnterYourFlag);             <span class="comment">// &quot;Enter your flag &quot;</span></span><br><span class="line">  Sleep(<span class="number">0x1F4</span>u);</span><br><span class="line">  sub_7FF6E42D1830(aAndHaveAGoodTi);            <span class="comment">// &quot;And have a good time: &quot;</span></span><br><span class="line">  sub_7FF6E42D18B0(<span class="string">&quot;%64s&quot;</span>, Str1);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str1) != <span class="number">38</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6E42D1830(aLengthError);             <span class="comment">// &quot;Length Error!&quot;</span></span><br><span class="line">    ExitProcess(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(</span><br><span class="line">          Str1,</span><br><span class="line">          Str2,                                 <span class="comment">// &quot;NCTF&#123;&quot;</span></span><br><span class="line">          <span class="number">5uLL</span>) &amp;&amp; Str1[<span class="number">37</span>] == <span class="number">125</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6E42D1E10(Str1, <span class="string">&quot;NCTF&#123;%32s&#125;&quot;</span>, byte_7FF6E42FC380);</span><br><span class="line">    <span class="built_in">memcpy</span>(v4, &amp;aNctf24nctf, <span class="number">0xA</span>uLL);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;v4[<span class="number">10</span>], &amp;aNctf24nctf, <span class="number">6uLL</span>);</span><br><span class="line">    sub_7FF6E42D19D0(byte_7FF6E42FC380, v4, Buf1);</span><br><span class="line">    sub_7FF6E42D19D0(&amp;byte_7FF6E42FC380[<span class="number">16</span>], v4, Buf1_1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(Buf1, &amp;Buf2_, <span class="number">0x20</span>uLL) )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6E42D1830(aWrongFlag);               <span class="comment">// &quot;Wrong Flag!&quot;</span></span><br><span class="line">    ExitProcess(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6E42D1830(aCorrect);                   <span class="comment">// &quot;Correct!&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目提示说调试器在监视你，果然调试的时候闪退了，往start方向找下断点发现毫无作用，那看来是init或者tls的原因，看导出表发现果然有两个tls，第一个里面看不出是做什么的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_140001520</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_1400011D0() )</span><br><span class="line">    RaiseException(<span class="number">0xE0000001</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>顺着找很快就看到了，这里把逻辑改一下然后保存一下，就可以调试了，整体逻辑不难，就是sm4加密，当然如果没见过还是很难的，不过直接解密发现有问题，应该是sm4有改动，加密逻辑不好改的话那就只能是1.盒2.轮遍数，后面发现是Sbox变动了，是因为我发现key变了，看交叉引用发现是tls0里面的东西。。。前面说的话打脸了</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_7FF677251480</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_7FF67727A0C0[i] ^= <span class="number">0x91</span>u;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF677251E80(byte_7FF67727A0D0, &amp;byte_7FF67727A0D0[byte_7FF67727A0C0[j]]);</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(j + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>后面的就是盒，前面的是key，再次解密就出flag了</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _SM4_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u8 unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u32 unsigned long</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">four_uCh2uLong</span><span class="params">(u8* in, u32* out)</span>;             <span class="comment">//四字节转换成u32</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">uLong2four_uCh</span><span class="params">(u32 in, u8* out)</span>;              <span class="comment">//u32转换成四字节</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">move</span><span class="params">(u32 data, <span class="type">int</span> length)</span>;          <span class="comment">//左移，保留丢弃位放置尾部</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">func_key</span><span class="params">(u32 input)</span>;                 <span class="comment">//先使用Sbox进行非线性变化，再将线性变换L置换为L&#x27;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">func_data</span><span class="params">(u32 input)</span>;                <span class="comment">//先使用Sbox进行非线性变化，再进行线性变换L</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_hex</span><span class="params">(u8* data, <span class="type">int</span> len)</span>;                 <span class="comment">//无符号字符数组转16进制打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span>;   <span class="comment">//加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span>;   <span class="comment">//解密函数</span></span><br><span class="line"><span class="comment">/******************************定义系统参数FK的取值****************************************/</span></span><br><span class="line"><span class="type">const</span> u32 TBL_SYS_PARAMS[<span class="number">4</span>] = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0xa3b1bac6</span>,</span><br><span class="line"><span class="number">0x56aa3350</span>,</span><br><span class="line"><span class="number">0x677d9197</span>,</span><br><span class="line"><span class="number">0xb27022dc</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******************************定义固定参数CK的取值****************************************/</span></span><br><span class="line"><span class="type">const</span> u32 TBL_FIX_PARAMS[<span class="number">32</span>] = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0x00070e15</span>,<span class="number">0x1c232a31</span>,<span class="number">0x383f464d</span>,<span class="number">0x545b6269</span>,</span><br><span class="line"><span class="number">0x70777e85</span>,<span class="number">0x8c939aa1</span>,<span class="number">0xa8afb6bd</span>,<span class="number">0xc4cbd2d9</span>,</span><br><span class="line"><span class="number">0xe0e7eef5</span>,<span class="number">0xfc030a11</span>,<span class="number">0x181f262d</span>,<span class="number">0x343b4249</span>,</span><br><span class="line"><span class="number">0x50575e65</span>,<span class="number">0x6c737a81</span>,<span class="number">0x888f969d</span>,<span class="number">0xa4abb2b9</span>,</span><br><span class="line"><span class="number">0xc0c7ced5</span>,<span class="number">0xdce3eaf1</span>,<span class="number">0xf8ff060d</span>,<span class="number">0x141b2229</span>,</span><br><span class="line"><span class="number">0x30373e45</span>,<span class="number">0x4c535a61</span>,<span class="number">0x686f767d</span>,<span class="number">0x848b9299</span>,</span><br><span class="line"><span class="number">0xa0a7aeb5</span>,<span class="number">0xbcc3cad1</span>,<span class="number">0xd8dfe6ed</span>,<span class="number">0xf4fb0209</span>,</span><br><span class="line"><span class="number">0x10171e25</span>,<span class="number">0x2c333a41</span>,<span class="number">0x484f565d</span>,<span class="number">0x646b7279</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******************************SBox参数列表****************************************/</span></span><br><span class="line"><span class="type">const</span> u8 TBL_SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0xD1</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line"><span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x17</span>, <span class="number">0xA9</span>, <span class="number">0x1C</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0xFC</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line"><span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x9F</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xC9</span>, <span class="number">0x87</span>,</span><br><span class="line"><span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line"><span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line"><span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line"><span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line"><span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line"><span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//4字节无符号数组转无符号long型</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">four_uCh2uLong</span><span class="params">(u8* in, u32* out)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">*out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">*out = ((u32)in[i] &lt;&lt; (<span class="number">24</span> - i * <span class="number">8</span>)) ^ *out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无符号long型转4字节无符号数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">uLong2four_uCh</span><span class="params">(u32 in, u8* out)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从32位unsigned long的高位开始取</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">*(out + i) = (u32)(in &gt;&gt; (<span class="number">24</span> - i * <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左移，保留丢弃位放置尾部</span></span><br><span class="line">u32 <span class="title function_">move</span><span class="params">(u32 data, <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">u32 result = <span class="number">0</span>;</span><br><span class="line">result = (data &lt;&lt; length) ^ (data &gt;&gt; (<span class="number">32</span> - length));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥处理函数,先使用Sbox进行非线性变化，再将线性变换L置换为L&#x27;</span></span><br><span class="line">u32 <span class="title function_">func_key</span><span class="params">(u32 input)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">u32 ulTmp = <span class="number">0</span>;</span><br><span class="line">u8 ucIndexList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">u8 ucSboxValueList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">uLong2four_uCh(input, ucIndexList);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ucSboxValueList[i] = TBL_SBOX[ucIndexList[i]];</span><br><span class="line">&#125;</span><br><span class="line">four_uCh2uLong(ucSboxValueList, &amp;ulTmp);</span><br><span class="line">ulTmp = ulTmp ^ move(ulTmp, <span class="number">13</span>) ^ move(ulTmp, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">return</span> ulTmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加解密数据处理函数,先使用Sbox进行非线性变化，再进行线性变换L</span></span><br><span class="line">u32 <span class="title function_">func_data</span><span class="params">(u32 input)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">u32 ulTmp = <span class="number">0</span>;</span><br><span class="line">u8 ucIndexList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">u8 ucSboxValueList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">uLong2four_uCh(input, ucIndexList);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ucSboxValueList[i] = TBL_SBOX[ucIndexList[i]];</span><br><span class="line">&#125;</span><br><span class="line">four_uCh2uLong(ucSboxValueList, &amp;ulTmp);</span><br><span class="line">ulTmp = ulTmp ^ move(ulTmp, <span class="number">2</span>) ^ move(ulTmp, <span class="number">10</span>) ^ move(ulTmp, <span class="number">18</span>) ^ move(ulTmp, <span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> ulTmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加密函数（可以加密任意长度数据，16字节为一次循环，不足部分补0凑齐16字节的整数倍）</span></span><br><span class="line"><span class="comment">//len:数据长度(任意长度数据) key:密钥（16字节） input:输入的原始数据 output:加密后输出数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">u8* p = (u8*)<span class="built_in">malloc</span>(<span class="number">50</span>);      <span class="comment">//定义一个50字节缓存区</span></span><br><span class="line">u32 ulKeyTmpList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;   <span class="comment">//存储密钥的u32数据</span></span><br><span class="line">u32 ulKeyList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;     <span class="comment">//用于密钥扩展算法与系统参数FK运算后的结果存储</span></span><br><span class="line">u32 ulDataList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;    <span class="comment">//用于存放加密数据</span></span><br><span class="line"><span class="comment">/***************************开始生成子秘钥********************************************/</span></span><br><span class="line">four_uCh2uLong(key, &amp;(ulKeyTmpList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">4</span>, &amp;(ulKeyTmpList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">8</span>, &amp;(ulKeyTmpList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">12</span>, &amp;(ulKeyTmpList[<span class="number">3</span>]));</span><br><span class="line">ulKeyList[<span class="number">0</span>] = ulKeyTmpList[<span class="number">0</span>] ^ TBL_SYS_PARAMS[<span class="number">0</span>];</span><br><span class="line">ulKeyList[<span class="number">1</span>] = ulKeyTmpList[<span class="number">1</span>] ^ TBL_SYS_PARAMS[<span class="number">1</span>];</span><br><span class="line">ulKeyList[<span class="number">2</span>] = ulKeyTmpList[<span class="number">2</span>] ^ TBL_SYS_PARAMS[<span class="number">2</span>];</span><br><span class="line">ulKeyList[<span class="number">3</span>] = ulKeyTmpList[<span class="number">3</span>] ^ TBL_SYS_PARAMS[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)             <span class="comment">//32次循环迭代运算</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-36为32个子秘钥</span></span><br><span class="line">ulKeyList[i + <span class="number">4</span>] = ulKeyList[i] ^ func_key(ulKeyList[i + <span class="number">1</span>] ^ ulKeyList[i + <span class="number">2</span>] ^ ulKeyList[i + <span class="number">3</span>] ^ TBL_FIX_PARAMS[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********************************生成32轮32位长子秘钥结束**********************************/</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)        <span class="comment">//将输入数据存放在p缓存区</span></span><br><span class="line">*(p + i) = *(input + i);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span> - len % <span class="number">16</span>; i++)<span class="comment">//将不足16位补0凑齐16的整数倍</span></span><br><span class="line">*(p + len + i) = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len / <span class="number">16</span> + ((len % <span class="number">16</span>) ? <span class="number">1</span> : <span class="number">0</span>); j++)  <span class="comment">//进行循环加密,并将加密后数据保存（可以看出此处是以16字节为一次加密，进行循环，即若16字节则进行一次，17字节补0至32字节后进行加密两次，以此类推）</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*开始处理加密数据*/</span></span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j, &amp;(ulDataList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j + <span class="number">4</span>, &amp;(ulDataList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j + <span class="number">8</span>, &amp;(ulDataList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j + <span class="number">12</span>, &amp;(ulDataList[<span class="number">3</span>]));</span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ulDataList[i + <span class="number">4</span>] = ulDataList[i] ^ func_data(ulDataList[i + <span class="number">1</span>] ^ ulDataList[i + <span class="number">2</span>] ^ ulDataList[i + <span class="number">3</span>] ^ ulKeyList[i + <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将加密后数据输出*/</span></span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">35</span>], output + <span class="number">16</span> * j);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">34</span>], output + <span class="number">16</span> * j + <span class="number">4</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">33</span>], output + <span class="number">16</span> * j + <span class="number">8</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">32</span>], output + <span class="number">16</span> * j + <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密函数（与加密函数基本一致，只是秘钥使用的顺序不同，即把钥匙反着用就是解密）</span></span><br><span class="line"><span class="comment">//len:数据长度 key:密钥 input:输入的加密后数据 output:输出的解密后数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">u32 ulKeyTmpList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;<span class="comment">//存储密钥的u32数据</span></span><br><span class="line">u32 ulKeyList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;  <span class="comment">//用于密钥扩展算法与系统参数FK运算后的结果存储</span></span><br><span class="line">u32 ulDataList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;; <span class="comment">//用于存放加密数据</span></span><br><span class="line"><span class="comment">/*开始生成子秘钥*/</span></span><br><span class="line">four_uCh2uLong(key, &amp;(ulKeyTmpList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">4</span>, &amp;(ulKeyTmpList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">8</span>, &amp;(ulKeyTmpList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">12</span>, &amp;(ulKeyTmpList[<span class="number">3</span>]));</span><br><span class="line">ulKeyList[<span class="number">0</span>] = ulKeyTmpList[<span class="number">0</span>] ^ TBL_SYS_PARAMS[<span class="number">0</span>];</span><br><span class="line">ulKeyList[<span class="number">1</span>] = ulKeyTmpList[<span class="number">1</span>] ^ TBL_SYS_PARAMS[<span class="number">1</span>];</span><br><span class="line">ulKeyList[<span class="number">2</span>] = ulKeyTmpList[<span class="number">2</span>] ^ TBL_SYS_PARAMS[<span class="number">2</span>];</span><br><span class="line">ulKeyList[<span class="number">3</span>] = ulKeyTmpList[<span class="number">3</span>] ^ TBL_SYS_PARAMS[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)             <span class="comment">//32次循环迭代运算</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-36为32个子秘钥</span></span><br><span class="line">ulKeyList[i + <span class="number">4</span>] = ulKeyList[i] ^ func_key(ulKeyList[i + <span class="number">1</span>] ^ ulKeyList[i + <span class="number">2</span>] ^ ulKeyList[i + <span class="number">3</span>] ^ TBL_FIX_PARAMS[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生成32轮32位长子秘钥结束*/</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len / <span class="number">16</span>; j++)  <span class="comment">//进行循环加密,并将加密后数据保存</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*开始处理解密数据*/</span></span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j, &amp;(ulDataList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j + <span class="number">4</span>, &amp;(ulDataList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j + <span class="number">8</span>, &amp;(ulDataList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j + <span class="number">12</span>, &amp;(ulDataList[<span class="number">3</span>]));</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ulDataList[i + <span class="number">4</span>] = ulDataList[i] ^ func_data(ulDataList[i + <span class="number">1</span>] ^ ulDataList[i + <span class="number">2</span>] ^ ulDataList[i + <span class="number">3</span>] ^ ulKeyList[<span class="number">35</span> - i]);<span class="comment">//与加密唯一不同的就是轮密钥的使用顺序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将解密后数据输出*/</span></span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">35</span>], output + <span class="number">16</span> * j);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">34</span>], output + <span class="number">16</span> * j + <span class="number">4</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">33</span>], output + <span class="number">16</span> * j + <span class="number">8</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">32</span>], output + <span class="number">16</span> * j + <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无符号字符数组转16进制打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_hex</span><span class="params">(u8* data, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> alTmp[<span class="number">16</span>] = &#123;</span><br><span class="line"> <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, alTmp[data[i] / <span class="number">16</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, alTmp[data[i] % <span class="number">16</span>]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i, len;</span><br><span class="line">    u8 encode_Result[] = &#123;</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x97</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xDF</span>, <span class="number">0x13</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0xEB</span>, <span class="number">0xA0</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x5B</span>, <span class="number">0xA6</span>, <span class="number">0x2A</span>, <span class="number">0xA8</span>, <span class="number">0x05</span>, <span class="number">0xA5</span>, <span class="number">0xF3</span>, <span class="number">0x76</span>, <span class="number">0xBE</span>, <span class="number">0xC9</span>, <span class="number">0x01</span>, <span class="number">0xF9</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x46</span>,</span><br><span class="line"><span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    u8 decode_Result[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;    </span><br><span class="line">    u8 key[<span class="number">16</span>] = <span class="string">&quot;NCTF24nctfNCTF24&quot;</span>;       </span><br><span class="line">len = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encode_fun(sizeof(Data_plain), key, Data_plain, encode_Result);            </span></span><br><span class="line">    <span class="comment">/*printf(&quot;加密后数据是：\n&quot;);*/</span></span><br><span class="line"></span><br><span class="line">    decode_fun(len, key, encode_Result, decode_Result);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(decode_Result + i));</span><br><span class="line"><span class="comment">//58cb925e0cd823c0d0b54fd06b820b7e</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以flag是NCTF{58cb925e0cd823c0d0b54fd06b820b7e}</p><h1 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h1><p>第一次做go题，很遗憾，就差一点就有了，拖进ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.main</span></span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">main_main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r11d</span></span><br><span class="line">  __int64 v11; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// r11d</span></span><br><span class="line">  main_coroutVM *p_main_coroutVM; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// r10d</span></span><br><span class="line">  __int64 *v22; <span class="comment">// r11</span></span><br><span class="line">  __m128i *ptr_1; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">void</span> *instr; <span class="comment">// rcx</span></span><br><span class="line">  __m128i *checkres; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *instrSet; <span class="comment">// rsi</span></span><br><span class="line">  main_coroutVM *inputl; <span class="comment">// rax</span></span><br><span class="line">  __int64 v28; <span class="comment">// rcx</span></span><br><span class="line">  __int64 *v29; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">void</span> *instr_1; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">void</span> *checkres_1; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">void</span> *instrSet_1; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> p_string_1; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">size_t</span> len_1; <span class="comment">// rdx</span></span><br><span class="line">  main_coroutVM *p_main_coroutVM_2; <span class="comment">// rsi</span></span><br><span class="line">  uint8 *mem; <span class="comment">// rdi</span></span><br><span class="line">  _QWORD *v37; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v38; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v39; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v40; <span class="comment">// r10d</span></span><br><span class="line">  main_coroutVM **v41; <span class="comment">// r11</span></span><br><span class="line">  __int64 inputh; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v43; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v44; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v45; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v46; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v47; <span class="comment">// r11d</span></span><br><span class="line">  _QWORD *v48; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v49; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v50; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v51; <span class="comment">// r10d</span></span><br><span class="line">  main_coroutVM **v52; <span class="comment">// r11</span></span><br><span class="line">  __int64 inputl_2; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v54; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v55; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v56; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v57; <span class="comment">// r11d</span></span><br><span class="line">  __int64 instr_4; <span class="comment">// rcx</span></span><br><span class="line">  __int64 i; <span class="comment">// rax</span></span><br><span class="line">  __int64 v60; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v61; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v62; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v63; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v64; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">int</span> v65; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v66; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v67; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v68; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v69; <span class="comment">// cl</span></span><br><span class="line">  __int64 v70; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v71; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v72; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v73; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v74; <span class="comment">// r11d</span></span><br><span class="line">  __int64 v75; <span class="comment">// r8</span></span><br><span class="line">  __int64 v76; <span class="comment">// [rsp-3Ah] [rbp-E0h]</span></span><br><span class="line">  __int64 v77; <span class="comment">// [rsp-3Ah] [rbp-E0h]</span></span><br><span class="line">  __int64 v78; <span class="comment">// [rsp-3Ah] [rbp-E0h]</span></span><br><span class="line">  __int64 v79; <span class="comment">// [rsp-32h] [rbp-D8h]</span></span><br><span class="line">  __int64 v80; <span class="comment">// [rsp-32h] [rbp-D8h]</span></span><br><span class="line">  __int64 v81; <span class="comment">// [rsp-32h] [rbp-D8h]</span></span><br><span class="line">  __int64 v82; <span class="comment">// [rsp-2Ah] [rbp-D0h]</span></span><br><span class="line">  __int64 v83; <span class="comment">// [rsp-22h] [rbp-C8h]</span></span><br><span class="line">  __int64 v84; <span class="comment">// [rsp-1Ah] [rbp-C0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v85; <span class="comment">// [rsp+0h] [rbp-A6h]</span></span><br><span class="line">  <span class="type">int</span> v86; <span class="comment">// [rsp+1h] [rbp-A5h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v87; <span class="comment">// [rsp+5h] [rbp-A1h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// [rsp+6h] [rbp-A0h]</span></span><br><span class="line">  __int64 i_1; <span class="comment">// [rsp+Eh] [rbp-98h]</span></span><br><span class="line">  __int64 instr_3; <span class="comment">// [rsp+16h] [rbp-90h]</span></span><br><span class="line">  main_coroutVM *inputl_1; <span class="comment">// [rsp+1Eh] [rbp-88h]</span></span><br><span class="line">  __int64 instr_2; <span class="comment">// [rsp+26h] [rbp-80h]</span></span><br><span class="line">  main_coroutVM *p_main_coroutVM_1; <span class="comment">// [rsp+2Eh] [rbp-78h]</span></span><br><span class="line">  __int64 checkres_2; <span class="comment">// [rsp+36h] [rbp-70h]</span></span><br><span class="line">  __m128i *_RSI_1; <span class="comment">// [rsp+3Eh] [rbp-68h]</span></span><br><span class="line">  <span class="type">char</span> *ptr; <span class="comment">// [rsp+46h] [rbp-60h]</span></span><br><span class="line">  _QWORD v97[<span class="number">2</span>]; <span class="comment">// [rsp+4Eh] [rbp-58h] BYREF</span></span><br><span class="line">  _QWORD v98[<span class="number">2</span>]; <span class="comment">// [rsp+5Eh] [rbp-48h] BYREF</span></span><br><span class="line">  _QWORD v99[<span class="number">2</span>]; <span class="comment">// [rsp+6Eh] [rbp-38h] BYREF</span></span><br><span class="line">  _QWORD v100[<span class="number">2</span>]; <span class="comment">// [rsp+7Eh] [rbp-28h] BYREF</span></span><br><span class="line">  _QWORD v101[<span class="number">2</span>]; <span class="comment">// [rsp+8Eh] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="built_in">string</span> *p_string; <span class="comment">// [rsp+9Eh] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  instr_2 = runtime_makechan(&amp;RTYPE_chan__4_uint8, <span class="number">0</span>);</span><br><span class="line">  instr_3 = runtime_makechan(&amp;RTYPE_chan__4_uint8, <span class="number">0</span>);</span><br><span class="line">  checkres_2 = runtime_makechan(&amp;RTYPE_chan_bool, <span class="number">2</span>);</span><br><span class="line">  p_string = runtime_newobject(&amp;RTYPE_string, <span class="number">2LL</span>, v2, v0, v1, v3, v4, v5, v6);</span><br><span class="line">  v101[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">  v101[<span class="number">1</span>] = &amp;off_2B8B08;</span><br><span class="line">  fmt_Fprintln(off_2B9218, qword_350000, v101, <span class="number">1</span>, <span class="number">1</span>, v7, v8, v9, v10, v76, v79);</span><br><span class="line">  v100[<span class="number">0</span>] = &amp;RTYPE__ptr_string;</span><br><span class="line">  v100[<span class="number">1</span>] = p_string;</span><br><span class="line">  v11 = qword_34FFF8;</span><br><span class="line">  fmt_Fscanf(</span><br><span class="line">    off_2B9238,</span><br><span class="line">    qword_34FFF8,</span><br><span class="line">    &amp;a0ILm51YSiTvrru[<span class="number">19</span>],</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    v100,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    v12,</span><br><span class="line">    v13,</span><br><span class="line">    v77,</span><br><span class="line">    v80,</span><br><span class="line">    v82,</span><br><span class="line">    HIDWORD(v82),</span><br><span class="line">    v83,</span><br><span class="line">    HIDWORD(v83),</span><br><span class="line">    v84,</span><br><span class="line">    HIDWORD(v84));</span><br><span class="line">  ptr = p_string-&gt;ptr;</span><br><span class="line">  len = p_string-&gt;len;</span><br><span class="line">  p_main_coroutVM = runtime_newobject(&amp;RTYPE_main_coroutVM, v11, len, <span class="number">2</span>, v100, v14, v15, v16, v17);</span><br><span class="line">  ptr_1 = &amp;qword_395420;</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">    ptr_1 = ptr;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    p_main_coroutVM = runtime_gcWriteBarrier2(p_main_coroutVM);</span><br><span class="line">    instr = instr_2;</span><br><span class="line">    *v22 = instr_2;</span><br><span class="line">    checkres = checkres_2;</span><br><span class="line">    v22[<span class="number">1</span>] = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    instr = instr_2;</span><br><span class="line">    checkres = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  _RSI_1 = ptr_1;</span><br><span class="line">  p_main_coroutVM-&gt;instr = instr;</span><br><span class="line">  p_main_coroutVM-&gt;checkres = checkres;</span><br><span class="line">  instrSet = ::instrSet;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    p_main_coroutVM = runtime_gcWriteBarrier1(p_main_coroutVM, checkres, instr, <span class="number">2LL</span>, ::instrSet);</span><br><span class="line">    *v22 = instrSet;</span><br><span class="line">  &#125;</span><br><span class="line">  p_main_coroutVM_1 = p_main_coroutVM;</span><br><span class="line">  p_main_coroutVM-&gt;instrSet = instrSet;</span><br><span class="line">  inputl = runtime_newobject(&amp;RTYPE_main_coroutVM, checkres, instr, <span class="number">2</span>, instrSet, v19, v20, v21, v22);</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    inputl = runtime_gcWriteBarrier2(inputl);</span><br><span class="line">    instr_1 = instr_3;</span><br><span class="line">    *v29 = instr_3;</span><br><span class="line">    checkres_1 = checkres_2;</span><br><span class="line">    v29[<span class="number">1</span>] = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    instr_1 = instr_3;</span><br><span class="line">    checkres_1 = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  inputl-&gt;instr = instr_1;</span><br><span class="line">  inputl-&gt;checkres = checkres_1;</span><br><span class="line">  instrSet_1 = instrSet_0;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    inputl = runtime_gcWriteBarrier1(inputl, checkres, v28, <span class="number">2LL</span>, instrSet);</span><br><span class="line">    *v29 = instrSet_1;</span><br><span class="line">  &#125;</span><br><span class="line">  inputl-&gt;instrSet = instrSet_1;</span><br><span class="line">  p_string_1 = p_string;</span><br><span class="line">  <span class="keyword">if</span> ( p_string-&gt;len == <span class="number">40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    len_1 = len;</span><br><span class="line">    <span class="keyword">if</span> ( len &gt;= <span class="number">20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      inputl_1 = inputl;</span><br><span class="line">      p_main_coroutVM_2 = p_main_coroutVM_1;</span><br><span class="line">      mem = p_main_coroutVM_1-&gt;mem;</span><br><span class="line">      checkres = _RSI_1;</span><br><span class="line">      <span class="keyword">if</span> ( _RSI_1 != p_main_coroutVM_1-&gt;mem )</span><br><span class="line">      &#123;</span><br><span class="line">        runtime_memmove(p_main_coroutVM_1-&gt;mem, _RSI_1, <span class="number">0x14</span>uLL);</span><br><span class="line">        inputl = inputl_1;</span><br><span class="line">        len_1 = len;</span><br><span class="line">        checkres = _RSI_1;</span><br><span class="line">        p_main_coroutVM_2 = p_main_coroutVM_1;</span><br><span class="line">        LODWORD(instr_1) = instr_3;</span><br><span class="line">        LODWORD(checkres_1) = checkres_2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( len_1 &gt;= <span class="number">40</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        checkres = (checkres + <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> ( checkres != inputl-&gt;mem )</span><br><span class="line">          runtime_memmove(inputl-&gt;mem, checkres, <span class="number">0x14</span>uLL);</span><br><span class="line">        v37 = runtime_newobject(</span><br><span class="line">                &amp;qword_27CF60,</span><br><span class="line">                checkres,</span><br><span class="line">                v28,</span><br><span class="line">                mem,</span><br><span class="line">                p_main_coroutVM_2,</span><br><span class="line">                instr_1,</span><br><span class="line">                checkres_1,</span><br><span class="line">                p_string_1,</span><br><span class="line">                v29);</span><br><span class="line">        *v37 = main_main_gowrap1;</span><br><span class="line">        <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">        &#123;</span><br><span class="line">          v37 = runtime_gcWriteBarrier1(v37, checkres, main_main_gowrap1, mem, p_main_coroutVM_2);</span><br><span class="line">          inputh = p_main_coroutVM_1;</span><br><span class="line">          *v41 = p_main_coroutVM_1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          inputh = p_main_coroutVM_1;</span><br><span class="line">        &#125;</span><br><span class="line">        v37[<span class="number">1</span>] = inputh;</span><br><span class="line">        runtime_newproc(v37, checkres, inputh, mem, p_main_coroutVM_2, v38, v39, v40, v41);</span><br><span class="line">        v48 = runtime_newobject(&amp;qword_27CF60, checkres, v43, mem, p_main_coroutVM_2, v44, v45, v46, v47);</span><br><span class="line">        *v48 = main_main_gowrap2;</span><br><span class="line">        <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">        &#123;</span><br><span class="line">          v48 = runtime_gcWriteBarrier1(v48, checkres, main_main_gowrap2, mem, p_main_coroutVM_2);</span><br><span class="line">          inputl_2 = inputl_1;</span><br><span class="line">          *v52 = inputl_1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          inputl_2 = inputl_1;</span><br><span class="line">        &#125;</span><br><span class="line">        v48[<span class="number">1</span>] = inputl_2;</span><br><span class="line">        runtime_newproc(v48, checkres, inputl_2, mem, p_main_coroutVM_2, v49, v50, v51, v52);</span><br><span class="line">        instr_4 = instr_2;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0LL</span>; ; i = i_1 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( ::i &lt;= i )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">          v86 = <span class="number">0</span>;</span><br><span class="line">          p_main_coroutVM_2 = (i + <span class="number">4</span>);</span><br><span class="line">          <span class="keyword">if</span> ( qword_348480 &lt; (i + <span class="number">4</span>) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_41;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt; p_main_coroutVM_2 )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          i_1 = i + <span class="number">4</span>;</span><br><span class="line">          mem = ::mem;</span><br><span class="line">          v75 = ((i - qword_348480) &gt;&gt; <span class="number">63</span>) &amp; i;</span><br><span class="line">          <span class="keyword">if</span> ( &amp;v86 != (::mem + v75) )</span><br><span class="line">            v86 = *(::mem + v75);</span><br><span class="line">          runtime_chansend1(instr_4, &amp;v86, instr_4, ::mem, p_main_coroutVM_2, v75, v55, v56, v57);</span><br><span class="line">          checkres = &amp;v86;</span><br><span class="line">          runtime_chansend1(instr_3, &amp;v86, v70, mem, p_main_coroutVM_2, v71, v72, v73, v74);</span><br><span class="line">          instr_4 = instr_2;</span><br><span class="line">        &#125;</span><br><span class="line">        i = runtime_panicSliceB(i, checkres, i + <span class="number">4</span>);</span><br><span class="line">LABEL_41:</span><br><span class="line">        inputl = runtime_panicSliceAcap(i, checkres, p_main_coroutVM_2);</span><br><span class="line">      &#125;</span><br><span class="line">      inputl = runtime_panicSliceAcap(inputl, checkres, <span class="number">40LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    runtime_panicSliceAcap(inputl, checkres, <span class="number">20LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v99[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">  v99[<span class="number">1</span>] = &amp;off_2B8B18;</span><br><span class="line">  LODWORD(mem) = <span class="number">1</span>;</span><br><span class="line">  LODWORD(p_main_coroutVM_2) = <span class="number">1</span>;</span><br><span class="line">  fmt_Fprintln(off_2B9218, qword_350000, v99, <span class="number">1</span>, <span class="number">1</span>, instr_1, checkres_1, p_string, v29, v78, v81);</span><br><span class="line">LABEL_28:</span><br><span class="line">  v87 = <span class="number">0</span>;</span><br><span class="line">  runtime_chanrecv1(checkres_2, &amp;v87, instr_4, mem, p_main_coroutVM_2, v54, v55, v56, v57);</span><br><span class="line">  v60 = v87;</span><br><span class="line">  v85 = v87;</span><br><span class="line">  v87 = <span class="number">0</span>;</span><br><span class="line">  runtime_chanrecv1(checkres_2, &amp;v87, v60, mem, p_main_coroutVM_2, v61, v62, v63, v64);</span><br><span class="line">  v69 = v87;</span><br><span class="line">  v87 = v85;</span><br><span class="line">  <span class="keyword">if</span> ( v85 )</span><br><span class="line">    v87 = v69;</span><br><span class="line">  <span class="keyword">if</span> ( v87 )</span><br><span class="line">  &#123;</span><br><span class="line">    v98[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">    v98[<span class="number">1</span>] = &amp;off_2B8B28;</span><br><span class="line">    fmt_Fprintln(off_2B9218, qword_350000, v98, <span class="number">1</span>, <span class="number">1</span>, v65, v66, v67, v68, v78, v81);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v97[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">    v97[<span class="number">1</span>] = &amp;off_2B8B38;</span><br><span class="line">    fmt_Fprintln(off_2B9218, qword_350000, v97, <span class="number">1</span>, <span class="number">1</span>, v65, v66, v67, v68, v78, v81);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着很长，实际也不短，不过go语言废话多，动调分析一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fmt_Fscanf(</span><br><span class="line">   off_2B9238,</span><br><span class="line">   qword_34FFF8,</span><br><span class="line">   &amp;a0ILm51YSiTvrru[<span class="number">19</span>],</span><br><span class="line">   <span class="number">2</span>,</span><br><span class="line">   v100,</span><br><span class="line">   <span class="number">1</span>,</span><br><span class="line">   <span class="number">1</span>,</span><br><span class="line">   v12,</span><br><span class="line">   v13,</span><br><span class="line">   v77,</span><br><span class="line">   v80,</span><br><span class="line">   v82,</span><br><span class="line">   HIDWORD(v82),</span><br><span class="line">   v83,</span><br><span class="line">   HIDWORD(v83),</span><br><span class="line">   v84,</span><br><span class="line">   HIDWORD(v84));</span><br><span class="line"> ptr = p_string-&gt;ptr;</span><br><span class="line"> len = p_string-&gt;len;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( len_1 &gt;= <span class="number">40</span> )</span><br><span class="line">&#123;</span><br><span class="line">  checkres = (checkres + <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">if</span> ( checkres != inputl-&gt;mem )</span><br><span class="line">    runtime_memmove(inputl-&gt;mem, checkres, <span class="number">0x14</span>uLL);</span><br><span class="line">  v37 = runtime_newobject(</span><br><span class="line">          &amp;qword_27CF60,</span><br><span class="line">          checkres,</span><br><span class="line">          v28,</span><br><span class="line">          mem,</span><br><span class="line">          p_main_coroutVM_2,</span><br><span class="line">          instr_1,</span><br><span class="line">          checkres_1,</span><br><span class="line">          p_string_1,</span><br><span class="line">          v29);</span><br><span class="line">  *v37 = main_main_gowrap1;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    v37 = runtime_gcWriteBarrier1(v37, checkres, main_main_gowrap1, mem, p_main_coroutVM_2);</span><br><span class="line">    inputh = p_main_coroutVM_1;</span><br><span class="line">    *v41 = p_main_coroutVM_1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    inputh = p_main_coroutVM_1;</span><br><span class="line">  &#125;</span><br><span class="line">  v37[<span class="number">1</span>] = inputh;</span><br><span class="line">  runtime_newproc(v37, checkres, inputh, mem, p_main_coroutVM_2, v38, v39, v40, v41);</span><br><span class="line">  v48 = runtime_newobject(&amp;qword_27CF60, checkres, v43, mem, p_main_coroutVM_2, v44, v45, v46, v47);</span><br><span class="line">  *v48 = main_main_gowrap2;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    v48 = runtime_gcWriteBarrier1(v48, checkres, main_main_gowrap2, mem, p_main_coroutVM_2);</span><br><span class="line">    inputl_2 = inputl_1;</span><br><span class="line">    *v52 = inputl_1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    inputl_2 = inputl_1;</span><br><span class="line">  &#125;</span><br><span class="line">  v48[<span class="number">1</span>] = inputl_2;</span><br><span class="line">  runtime_newproc(v48, checkres, inputl_2, mem, p_main_coroutVM_2, v49, v50, v51, v52);</span><br></pre></td></tr></table></figure><p>runtime_gcWriteBarrier1感觉是在加载函数，也就是main_main_gowrap1，main_main_gowrap2</p><p>加载之后后面runtime_newproc就是在调用了函数总之逻辑在上面这两个里（这里可以关注一下mem和mem赋值，这个是opcode）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.(*coroutVM).run</span></span><br><span class="line"><span class="type">void</span> __golang <span class="title function_">main__ptr_coroutVM_run</span><span class="params">(_ptr_main_coroutVM a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">  _chan_left_chan__4_uint8 instr; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r11d</span></span><br><span class="line">  map_uint8_main_handler instrSet; <span class="comment">// rbx</span></span><br><span class="line">  __int64 **v13; <span class="comment">// rax</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+8h] [rbp-30h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+10h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// [rsp+27h] [rbp-11h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v18; <span class="comment">// [rsp+2Bh] [rbp-Dh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+2Fh] [rbp-9h] BYREF</span></span><br><span class="line">  _chan_left_chan__4_uint8 i; <span class="comment">// [rsp+30h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  instr = a1-&gt;instr;</span><br><span class="line">  <span class="keyword">for</span> ( i = instr; runtime_chanrecv2(instr, &amp;v18, instr, v1, v2, v3, v4, v5, v6); instr = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v17 = v18;</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    v2 = (v17 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    v1 = HIBYTE(v17);</span><br><span class="line">    v19 = v17;</span><br><span class="line">    instrSet = a1-&gt;instrSet;</span><br><span class="line">    v13 = runtime_mapaccess2(</span><br><span class="line">            &amp;RTYPE_map_uint8_main_handler,</span><br><span class="line">            instrSet,</span><br><span class="line">            &amp;v19,</span><br><span class="line">            HIBYTE(v17),</span><br><span class="line">            v2,</span><br><span class="line">            v8,</span><br><span class="line">            v9,</span><br><span class="line">            v10,</span><br><span class="line">            v11,</span><br><span class="line">            v14,</span><br><span class="line">            v15,</span><br><span class="line">            v16);</span><br><span class="line">    <span class="keyword">if</span> ( instrSet )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = **v13;</span><br><span class="line">      LOWORD(v14) = v17 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">      BYTE2(v14) = HIBYTE(v17);</span><br><span class="line">      (v2)(a1);</span><br><span class="line">      <span class="keyword">if</span> ( v17 == <span class="number">0xFF</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是主要逻辑了，runtime_chanrecv2是在解析instr然后给v18，给了v18之后v18给v17再次解析（这里的instr就是opcode的当前部分？或者是总体指针没太关注）</p><p>最后解析结果给v13，后面v13给了v2，v2动调发现是一个叫main_mov的函数（并且会变）跟踪者往上寻找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">0000000000299F</span>60 add             dq offset main_ADD      ; DATA XREF: main_map_init_0:loc_267F5B↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>60                                         ; main_map_init_1:loc_2682FB↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>68 and             dq offset main_AND      ; DATA XREF: main_map_init_0:loc_2680B3↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>68                                         ; main_map_init_1:loc_268453↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>70 hlt             dq offset main_HLT      ; DATA XREF: main_map_init_0:loc_268141↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>70                                         ; main_map_init_1:loc_2684E1↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>78 ldr             dq offset main_LDR      ; DATA XREF: main_map_init_0:loc_267E3B↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>78                                         ; main_map_init_1:loc_2681DB↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>80 ldri            dq offset main_LDRI     ; DATA XREF: main_map_init_0:loc_267E73↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>80                                         ; main_map_init_1:loc_268213↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>88 lsl             dq offset main_LSL      ; DATA XREF: main_map_init_0:loc_268008↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>88                                         ; main_map_init_1:loc_2683A8↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>90 lsr             dq offset main_LSR      ; DATA XREF: main_map_init_0:loc_268040↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>90                                         ; main_map_init_1:loc_2683E0↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>98 mov             dq offset main_MOV      ; DATA XREF: main_map_init_0:loc_267F20↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>98                                         ; main_map_init_1:loc_2682C0↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A0 mul             dq offset main_MUL      ; DATA XREF: main_map_init_0:loc_267FCD↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A0                                         ; main_map_init_1:loc_26836D↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A8 ret             dq offset main_RET      ; DATA XREF: main_map_init_0:loc_2680ED↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A8                                         ; main_map_init_1:loc_26848D↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B0 str             dq offset main_STR      ; DATA XREF: main_map_init_0:loc_267EAD↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B0                                         ; main_map_init_1:loc_26824D↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B8 stri            dq offset main_STRI     ; DATA XREF: main_map_init_0:loc_267EE8↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B8                                         ; main_map_init_1:loc_268288↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C0 sub             dq offset main_SUB      ; DATA XREF: main_map_init_0:loc_267F93↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C0                                         ; main_map_init_1:loc_268333↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C8 xor             dq offset main_XOR      ; DATA XREF: main_map_init_0:loc_26807B↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C8                                         ; main_map_init_1:loc_26841B↑o</span><br></pre></td></tr></table></figure><p>有点像vm的操作码了，并且在动调找操作码对应hex的时候，也就是runtime_mapaccess2解析后返回函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v41 = &amp;v48[size];</span><br><span class="line"> <span class="keyword">if</span> ( (p_RTYPE_map_uint8_main_handler_1[<span class="number">2</span>].ptrdata &amp; <span class="number">8</span>) != <span class="number">0</span> )</span><br><span class="line">   <span class="keyword">return</span> *&amp;v48[size];</span><br><span class="line"> <span class="keyword">return</span> v41;</span><br></pre></td></tr></table></figure><p>这里有可能返回v41，所以动调去看v41里的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">debug056:<span class="number">000000</span>C000090000 qword_C000090000 dq <span class="number">808041457215144</span>Eh   ; DATA XREF: debug056:<span class="number">000000</span>C000081F68↑o</span><br><span class="line">debug056:<span class="number">000000</span>C000090008 dq <span class="number">12</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090010 dq offset ldri</span><br><span class="line">debug056:<span class="number">000000</span>C000090018 dq <span class="number">15</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090020 dq offset str</span><br><span class="line">debug056:<span class="number">000000</span>C000090028 dq <span class="number">16</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090030 dq offset stri</span><br><span class="line">debug056:<span class="number">000000</span>C000090038 qword_C000090038 dq <span class="number">2</span>Ah                 ; DATA XREF: debug056:<span class="number">000000</span>C000081F58↑o</span><br><span class="line">debug056:<span class="number">000000</span>C000090040 dq offset mov</span><br><span class="line">debug056:<span class="number">000000</span>C000090048 dq <span class="number">42</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090050 dq offset sub</span><br><span class="line">debug056:<span class="number">000000</span>C000090058 dq <span class="number">73</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090060 dq offset lsr</span><br><span class="line">debug056:<span class="number">000000</span>C000090068 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090070 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090078 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090080 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090088 dq <span class="number">7E70506902607</span>B66h</span><br><span class="line">debug056:<span class="number">000000</span>C000090090 dq <span class="number">11</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090098 dq offset ldr</span><br><span class="line">debug056:<span class="number">000000</span>C0000900A0 dq <span class="number">41</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900A8 dq offset add</span><br><span class="line">debug056:<span class="number">000000</span>C0000900B0 dq <span class="number">47</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900B8 dq offset mul</span><br><span class="line">debug056:<span class="number">000000</span>C0000900C0 dq <span class="number">71</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900C8 dq offset lsl</span><br><span class="line">debug056:<span class="number">000000</span>C0000900D0 dq <span class="number">7</span>Ah</span><br><span class="line">debug056:<span class="number">000000</span>C0000900D8 dq offset xor</span><br><span class="line">debug056:<span class="number">000000</span>C0000900E0 dq <span class="number">7B</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900E8 dq offset and</span><br><span class="line">debug056:<span class="number">000000</span>C0000900F0 dq <span class="number">0F</span>Eh</span><br><span class="line">debug056:<span class="number">000000</span>C0000900F8 dq offset ret</span><br><span class="line">debug056:<span class="number">000000</span>C000090100 dq <span class="number">0F</span>Fh</span><br><span class="line">debug056:<span class="number">000000</span>C000090108 dq offset hlt</span><br><span class="line">debug056:<span class="number">000000</span>C000090110 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090118 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090120 dq <span class="number">80805B</span>7F4D195072h</span><br><span class="line">debug056:<span class="number">000000</span>C000090128 dq <span class="number">14</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090130 dq offset ldri</span><br><span class="line">debug056:<span class="number">000000</span>C000090138 dq <span class="number">18</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090140 dq offset stri</span><br><span class="line">debug056:<span class="number">000000</span>C000090148 dq <span class="number">2B</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090150 dq offset mov</span><br><span class="line">debug056:<span class="number">000000</span>C000090158 dq <span class="number">0</span>CAh</span><br><span class="line">debug056:<span class="number">000000</span>C000090160 dq offset xor</span><br><span class="line">debug056:<span class="number">000000</span>C000090168 dq <span class="number">0F</span>Eh</span><br><span class="line">debug056:<span class="number">000000</span>C000090170 dq offset ret</span><br><span class="line">debug056:<span class="number">000000</span>C000090178 dq <span class="number">0F</span>Fh</span><br><span class="line">debug056:<span class="number">000000</span>C000090180 dq offset hlt</span><br><span class="line">debug056:<span class="number">000000</span>C000090188 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090190 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090198 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C0000901A0 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C0000901A8 dq <span class="number">497</span>C2A1F61216141h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901B0 dq <span class="number">13</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901B8 dq offset ldr</span><br><span class="line">debug056:<span class="number">000000</span>C0000901C0 dq <span class="number">17</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901C8 dq offset str</span><br><span class="line">debug056:<span class="number">000000</span>C0000901D0 dq <span class="number">91</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901D8 dq offset add</span><br><span class="line">debug056:<span class="number">000000</span>C0000901E0 dq <span class="number">92</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901E8 dq offset sub</span><br><span class="line">debug056:<span class="number">000000</span>C0000901F0 dq <span class="number">97</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901F8 dq offset mul</span><br><span class="line">debug056:<span class="number">000000</span>C000090200 dq <span class="number">0</span>C1h</span><br><span class="line">debug056:<span class="number">000000</span>C000090208 dq offset lsl</span><br><span class="line">debug056:<span class="number">000000</span>C000090210 dq <span class="number">0</span>C3h</span><br><span class="line">debug056:<span class="number">000000</span>C000090218 dq offset lsr</span><br><span class="line">debug056:<span class="number">000000</span>C000090220 dq <span class="number">0</span>CBh</span><br><span class="line">debug056:<span class="number">000000</span>C000090228 dq offset and</span><br></pre></td></tr></table></figure><pre><code>这里一个hex紧跟着一个操作函数，并且0x2A对应mov在之前，v17中经常出现，本来我以为这个v17是输入，但是多次改变输入发现仍然会是0x2A, 0x00, 0x37, 0x9E，后面看到这里再加上之前在v2函数跟踪的时候点到过mem，然后看到了0x2A, 0x00, 0x37, 0x9E发现十分熟悉，所以猜测出mem是opcode（后面我才知道可以看结构体的定义来猜测）</code></pre><p>于是有了操作函数对应字节码，有opcode，就可以解密了，因为这个调用的函数相同并且都是opcode[i+0]做字节码，opcode[i+1,2,3]参与运算，并且函数固定，所以这个vm不是很难写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> o[<span class="number">19457</span>] = &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">int</span> ax, bx, cx, dx;</span><br><span class="line">    <span class="type">int</span> abcdx[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> <span class="built_in">stack</span>[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">19444</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x %x %x %x:&quot;</span>, o[i], o[i + <span class="number">1</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">switch</span> (o[i]) &#123;</span><br><span class="line">            <span class="comment">//ldr</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x11</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, <span class="built_in">stack</span>[o[i + <span class="number">2</span>]], o[i + <span class="number">2</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>]] = <span class="built_in">stack</span>[o[i + <span class="number">2</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, <span class="built_in">stack</span>[o[i + <span class="number">2</span>]], o[i + <span class="number">2</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>]] = <span class="built_in">stack</span>[o[i + <span class="number">2</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//ldri</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x12</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;------------------------------\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">3</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>] = <span class="built_in">stack</span>[o[i + <span class="number">3</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x14</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;------------------------------\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">3</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>] = <span class="built_in">stack</span>[o[i + <span class="number">3</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//str</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">2</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">2</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x17</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">2</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">2</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//stri</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x16</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">3</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">3</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x18</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">3</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">3</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//mov</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x2A</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %x%x //&quot;</span>, o[i + <span class="number">1</span>], o[i + <span class="number">3</span>], o[i + <span class="number">2</span>]);</span><br><span class="line">            ax = o[i + <span class="number">2</span>];</span><br><span class="line">            ax += o[i + <span class="number">3</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = ax;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%04x\n&quot;</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x2B</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %x%x //&quot;</span>, o[i + <span class="number">1</span>], o[i + <span class="number">3</span>], o[i + <span class="number">2</span>]);</span><br><span class="line">            ax = o[i + <span class="number">2</span>];</span><br><span class="line">            ax += o[i + <span class="number">3</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = ax;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%04x\n&quot;</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x91</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] + abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x41</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] + abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//sub</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x42</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d - abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] - abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x92</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d - abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] - abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//mul</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x47</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d * abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] * abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x97</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d * abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] * abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//xor</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x7A</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] ^ abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xca</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] ^ abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//lsl</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x71</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &lt;&lt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &lt;&lt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &lt;&lt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &lt;&lt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//lsr</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x73</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &gt;&gt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &gt;&gt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &gt;&gt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &gt;&gt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//and</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xcb</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &amp; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &amp; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x7B</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &amp; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &amp; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xff</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hlt\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xfe</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ret\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, <span class="built_in">stack</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, abcdx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这玩意太太太长了。。。懒得分析了，到此结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ezDos&quot;&gt;&lt;a href=&quot;#ezDos&quot; class=&quot;headerlink&quot; title=&quot;ezDos&quot;&gt;&lt;/a&gt;ezDos&lt;/h1&gt;&lt;p&gt;好像只能汇编分析&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="ctf" scheme="http://l1pmoluy.github.io/categories/ctf/"/>
    
    
    <category term="wp" scheme="http://l1pmoluy.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>2025n1ctfwp</title>
    <link href="http://l1pmoluy.github.io/2025/03/10/2025n1ctf/"/>
    <id>http://l1pmoluy.github.io/2025/03/10/2025n1ctf/</id>
    <published>2025-03-10T08:50:46.000Z</published>
    <updated>2025-03-24T09:39:04.398Z</updated>
    
    <content type="html"><![CDATA[<p>写了逆向方向两个题</p><h1 id="5mc"><a href="#5mc" class="headerlink" title="5mc"></a>5mc</h1><p>拖进ida</p><p><img src="D:\tool\blog\themes\hexo-theme-matery\source\medias\n11.png"></p><p>32位，后面有一段比较冗长但又难以理解的代码，实际作用是在初始化后续的加密段</p><p><img src="D:\tool\blog\themes\hexo-theme-matery\source\medias\n12.png"></p><p>这里是加密主要逻辑，对明文的加密段存储在lpAddress中，并且不是一成不变的，这里利用了SSE来进行对加密段的异或，看似复杂，实际上只是实现了同一段代码，经过不同种的异或最终做到不同的加密方式</p><p>还好是一个可以动调的程序，所以只需关注下面的(v30)(Buf1, &amp;box);</p><p>16种加密，每四个一轮，每轮中前两种加密相同，后两种都比较相似，耐心即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box1[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xB0</span>, <span class="number">0xF0</span>, <span class="number">0x21</span>, <span class="number">0xCF</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, <span class="number">0x3A</span>, <span class="number">0x68</span>, <span class="number">0x84</span>, <span class="number">0x7B</span>, <span class="number">0x39</span>, <span class="number">0x86</span>, <span class="number">0x36</span>, <span class="number">0x87</span>, <span class="number">0x9B</span>, <span class="number">0xF7</span>,</span><br><span class="line">    <span class="number">0x3D</span>, <span class="number">0x18</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x1B</span>, <span class="number">0x2E</span>, <span class="number">0x6C</span>, <span class="number">0xDF</span>, <span class="number">0x2C</span>, <span class="number">0xAE</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0xDA</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xCA</span>, <span class="number">0x56</span>, <span class="number">0x92</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x62</span>, <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x33</span>, <span class="number">0x6E</span>, <span class="number">0x25</span>, <span class="number">0xCE</span>, <span class="number">0xA3</span>,</span><br><span class="line">    <span class="number">0xD2</span>, <span class="number">0x44</span>, <span class="number">0xA1</span>, <span class="number">0x4A</span>, <span class="number">0x58</span>, <span class="number">0xB1</span>, <span class="number">0xA0</span>, <span class="number">0x2A</span>, <span class="number">0x47</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0xAF</span>, <span class="number">0x50</span>, <span class="number">0xC3</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0xE5</span>, <span class="number">0x0D</span>, <span class="number">0x67</span>, <span class="number">0x91</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0xE3</span>, <span class="number">0xC1</span>, <span class="number">0xAA</span>, <span class="number">0x95</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x1C</span>, <span class="number">0x3F</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x1F</span>, <span class="number">0xFF</span>, <span class="number">0x7A</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x54</span>, <span class="number">0x9E</span>, <span class="number">0xED</span>, <span class="number">0xA9</span>, <span class="number">0x41</span>, <span class="number">0x20</span>, <span class="number">0xEF</span>, <span class="number">0xA6</span>, <span class="number">0x48</span>, <span class="number">0x97</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0xD4</span>, <span class="number">0xBB</span>, <span class="number">0x23</span>, <span class="number">0x66</span>, <span class="number">0xD9</span>, <span class="number">0xE4</span>, <span class="number">0x0B</span>, <span class="number">0x30</span>, <span class="number">0x15</span>, <span class="number">0xD7</span>, <span class="number">0x6B</span>, <span class="number">0x19</span>, <span class="number">0xCD</span>, <span class="number">0xC4</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xC8</span>, <span class="number">0x14</span>, <span class="number">0xFD</span>, <span class="number">0x7F</span>, <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x6F</span>, <span class="number">0xF5</span>, <span class="number">0x90</span>, <span class="number">0x76</span>, <span class="number">0xBF</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0x24</span>, <span class="number">0x78</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0xA8</span>, <span class="number">0x43</span>, <span class="number">0xB5</span>, <span class="number">0x0C</span>, <span class="number">0x31</span>, <span class="number">0xF9</span>, <span class="number">0xA2</span>, <span class="number">0x9C</span>, <span class="number">0x99</span>, <span class="number">0xF6</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0xDB</span>, <span class="number">0xB7</span>, <span class="number">0xC9</span>, <span class="number">0x85</span>, <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x64</span>, <span class="number">0x1D</span>, <span class="number">0x07</span>, <span class="number">0x34</span>, <span class="number">0x5A</span>, <span class="number">0xBD</span>, <span class="number">0x37</span>, <span class="number">0x4C</span>, <span class="number">0xA7</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xE9</span>, <span class="number">0x35</span>, <span class="number">0x93</span>, <span class="number">0x8D</span>, <span class="number">0xA5</span>, <span class="number">0xFB</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0xC2</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x4D</span>, <span class="number">0xB2</span>, <span class="number">0x10</span>, <span class="number">0x2B</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x6A</span>, <span class="number">0x3E</span>, <span class="number">0xD0</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x40</span>, <span class="number">0x27</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0x74</span>, <span class="number">0xB6</span>, <span class="number">0x57</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0x8A</span>, <span class="number">0xB9</span>, <span class="number">0xBC</span>, <span class="number">0x7D</span>, <span class="number">0xB3</span>, <span class="number">0x96</span>, <span class="number">0x7E</span>, <span class="number">0xFC</span>, <span class="number">0xAD</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xCB</span>, <span class="number">0x8B</span>, <span class="number">0xEE</span>, <span class="number">0x32</span>, <span class="number">0xA4</span>, <span class="number">0x16</span>, <span class="number">0xFE</span>, <span class="number">0x5B</span>, <span class="number">0x13</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0x8E</span>, <span class="number">0x29</span>, <span class="number">0xF3</span>, <span class="number">0x8F</span>, <span class="number">0x49</span>, <span class="number">0xE6</span>, <span class="number">0x9F</span>, <span class="number">0xF1</span>, <span class="number">0xC5</span>, <span class="number">0x70</span>, <span class="number">0x55</span>, <span class="number">0x8C</span>, <span class="number">0x11</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xEC</span>, <span class="number">0x00</span>, <span class="number">0xAC</span>, <span class="number">0x89</span>, <span class="number">0xD3</span>, <span class="number">0x82</span>, <span class="number">0x69</span>, <span class="number">0xD6</span>, <span class="number">0xBA</span>, <span class="number">0xD8</span>, <span class="number">0x59</span>, <span class="number">0x98</span>, <span class="number">0x09</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xC7</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box2[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x15</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0x19</span>, <span class="number">0x09</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0x0B</span>, <span class="number">0x17</span>, <span class="number">0x0A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box3[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xB7</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0x6B</span>, <span class="number">0xBD</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0x13</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x43</span>, <span class="number">0xCD</span>, <span class="number">0x6B</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x12</span>, <span class="number">0x2A</span>, <span class="number">0x7E</span>, <span class="number">0x9B</span>, <span class="number">0x27</span>, <span class="number">0x4C</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, <span class="number">0x40</span>, <span class="number">0xC9</span>, <span class="number">0x9E</span>, <span class="number">0xC4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box4[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0xDB</span>, <span class="number">0x9F</span>, <span class="number">0x5F</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0x41</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0xDE</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0xBA</span>, <span class="number">0x6A</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x39</span>, <span class="number">0x9E</span>, <span class="number">0xF3</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x02</span>, <span class="number">0x1C</span>, <span class="number">0xE2</span>, <span class="number">0x43</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox1[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getsbox1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sbox1[box1[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">char</span> v2[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">31</span>; ++j)</span><br><span class="line">        v2[j] = flag[box2[j]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">        flag[i] = v2[box2[i]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = sbox1[flag[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 生成 box1 的逆查表</span></span><br><span class="line">    getsbox1();</span><br><span class="line">    <span class="comment">// 初始加密后的 flag，与加密程序中保持一致</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">32</span>] = &#123;</span><br><span class="line">        <span class="number">0x5B</span>, <span class="number">0x2D</span>, <span class="number">0xE9</span>, <span class="number">0x66</span>, <span class="number">0xED</span>, <span class="number">0x39</span>, <span class="number">0x90</span>, <span class="number">0x23</span>, <span class="number">0xAF</span>, <span class="number">0xDA</span>, <span class="number">0xEB</span>, <span class="number">0x2E</span>, <span class="number">0xD1</span>, <span class="number">0x0D</span>, <span class="number">0xBB</span>, <span class="number">0xBD</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x52</span>, <span class="number">0x02</span>, <span class="number">0xB0</span>, <span class="number">0xBA</span>, <span class="number">0x9D</span>, <span class="number">0x52</span>, <span class="number">0xFA</span>, <span class="number">0x67</span>, <span class="number">0xEE</span>, <span class="number">0xA3</span>, <span class="number">0x85</span>, <span class="number">0xA9</span>, <span class="number">0x84</span>, <span class="number">0xE2</span>, <span class="number">0x6F</span></span><br><span class="line">    &#125;;    <span class="type">int</span> length = <span class="number">32</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">7</span>) | (flag[i] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">6</span>) | (flag[i] &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">3</span>) | (flag[i] &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">5</span>) | (flag[i] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">4</span>) | (flag[i] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">2</span>) | (flag[i] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">1</span>) | (flag[i] &gt;&gt; <span class="number">7</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">5</span>) | (flag[i] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//flag&#123;Master_of_5mc_XoR_aDD_r0r!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="df5"><a href="#df5" class="headerlink" title="df5"></a><strong><font style="color:rgb(38, 38, 38);">df5</font></strong></h1><p>这道题难在解密实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  __int64 len; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// rcx</span></span><br><span class="line">  _BYTE *ppbox1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *ppbox2; <span class="comment">// r14</span></span><br><span class="line">  _BYTE *pppbox1; <span class="comment">// rcx</span></span><br><span class="line">  _BYTE *ppbox3; <span class="comment">// r15</span></span><br><span class="line">  _BYTE *ppbox4; <span class="comment">// r12</span></span><br><span class="line">  __int64 v14; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v16; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v19; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v20; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v21; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v22; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// r8</span></span><br><span class="line">  __int64 i; <span class="comment">// rbx</span></span><br><span class="line">  __int64 j; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// eax</span></span><br><span class="line">  __int64 v28[<span class="number">4</span>]; <span class="comment">// [rsp+28h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> Buf1[<span class="number">40</span>]; <span class="comment">// [rsp+48h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>i64;</span><br><span class="line">  v28[<span class="number">0</span>] = sub_7FF6C66410E0;</span><br><span class="line">  v28[<span class="number">1</span>] = sub_7FF6C66412A0;</span><br><span class="line">  v28[<span class="number">2</span>] = sub_7FF6C6641610;</span><br><span class="line">  v28[<span class="number">3</span>] = sub_7FF6C66416B0;</span><br><span class="line">  sub_7FF6C6641020(<span class="string">&quot;flag:&quot;</span>, argv, envp);</span><br><span class="line">  scnaf(<span class="string">&quot;%s&quot;</span>, Buf1);</span><br><span class="line">  len = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++len;</span><br><span class="line">  <span class="keyword">while</span> ( Buf1[len] );</span><br><span class="line">  <span class="keyword">if</span> ( len == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    srand(<span class="number">0x1BF52</span>u);</span><br><span class="line">    ppbox1 = pbox1;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">    ppbox2 = pbox2;</span><br><span class="line">    pppbox1 = pbox1;</span><br><span class="line">    ppbox3 = pbox3;</span><br><span class="line">    ppbox4 = pbox4;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *pppbox1++ = v9++;                        <span class="comment">// 造盒</span></span><br><span class="line">    <span class="keyword">while</span> ( v9 &lt; <span class="number">256</span> );</span><br><span class="line">    v14 = <span class="number">512</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v15 = rand();</span><br><span class="line">      v16 = rand();</span><br><span class="line">      v17 = ppbox1[v15];</span><br><span class="line">      ppbox1[v15] = ppbox1[v16];                <span class="comment">// 打乱盒</span></span><br><span class="line">      ppbox1[v16] = v17;</span><br><span class="line">      --v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v14 );</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    v19 = ppbox2;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *v19++ = v18++;</span><br><span class="line">    <span class="keyword">while</span> ( v18 &lt; <span class="number">32</span> );</span><br><span class="line">    v20 = <span class="number">32</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v21 = rand() % <span class="number">32</span>;</span><br><span class="line">      v22 = rand() % <span class="number">32</span>;</span><br><span class="line">      v23 = ppbox2[v21];</span><br><span class="line">      ppbox2[v21] = ppbox2[v22];                <span class="comment">// 打乱box2</span></span><br><span class="line">      ppbox2[v22] = v23;</span><br><span class="line">      --v20;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v20 );</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>i64; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">      ppbox3[i] = rand();</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>i64; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">      ppbox4[j] = rand();</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      (v28[Buf1[v3++] &amp; <span class="number">3</span>])(Buf1, &amp;pbox1);</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; <span class="number">32</span> );</span><br><span class="line">    v26 = <span class="built_in">memcmp</span>(Buf1, &amp;unk_7FF6C6665AD0, <span class="number">0x20</span>ui64);</span><br><span class="line">    v7 = <span class="string">&quot;right\n&quot;</span>;</span><br><span class="line">    v4 = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v26 )</span><br><span class="line">      v7 = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6C6641020(v7, v4, v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>可以看到，也是四种加密方式，不同的是加密逻辑是根据输入的每一位&amp;3，形成的结果进行加密，32轮，如此一来解密时就需要知道上一轮经过什么加密，我先对当前轮对应的明文元素称之为，加密种数，我的想法是，先将密文四种都尝试解密，解密后的加密种数&amp;3，查看是否结果与它所经过的加密一致</code></pre><p>但同时有新的问题，如果它的解密结果刚好一致呢？所以要采取回溯法，就像走迷宫一样，这条路走不通，就回退换路，实现我选用递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box3[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xB7</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0x6B</span>, <span class="number">0xBD</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0x13</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x43</span>, <span class="number">0xCD</span>, <span class="number">0x6B</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x12</span>, <span class="number">0x2A</span>, <span class="number">0x7E</span>, <span class="number">0x9B</span>, <span class="number">0x27</span>, <span class="number">0x4C</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, <span class="number">0x40</span>, <span class="number">0xC9</span>, <span class="number">0x9E</span>, <span class="number">0xC4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box4[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0xDB</span>, <span class="number">0x9F</span>, <span class="number">0x5F</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0x41</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0xDE</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0xBA</span>, <span class="number">0x6A</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x39</span>, <span class="number">0x9E</span>, <span class="number">0xF3</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x02</span>, <span class="number">0x1C</span>, <span class="number">0xE2</span>, <span class="number">0x43</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box2[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x15</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0x19</span>, <span class="number">0x09</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0x0B</span>, <span class="number">0x17</span>, <span class="number">0x0A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box1[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xB0</span>, <span class="number">0xF0</span>, <span class="number">0x21</span>, <span class="number">0xCF</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, <span class="number">0x3A</span>, <span class="number">0x68</span>, <span class="number">0x84</span>, <span class="number">0x7B</span>, <span class="number">0x39</span>, <span class="number">0x86</span>, <span class="number">0x36</span>, <span class="number">0x87</span>, <span class="number">0x9B</span>, <span class="number">0xF7</span>,</span><br><span class="line">    <span class="number">0x3D</span>, <span class="number">0x18</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x1B</span>, <span class="number">0x2E</span>, <span class="number">0x6C</span>, <span class="number">0xDF</span>, <span class="number">0x2C</span>, <span class="number">0xAE</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0xDA</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xCA</span>, <span class="number">0x56</span>, <span class="number">0x92</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x62</span>, <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x33</span>, <span class="number">0x6E</span>, <span class="number">0x25</span>, <span class="number">0xCE</span>, <span class="number">0xA3</span>,</span><br><span class="line">    <span class="number">0xD2</span>, <span class="number">0x44</span>, <span class="number">0xA1</span>, <span class="number">0x4A</span>, <span class="number">0x58</span>, <span class="number">0xB1</span>, <span class="number">0xA0</span>, <span class="number">0x2A</span>, <span class="number">0x47</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0xAF</span>, <span class="number">0x50</span>, <span class="number">0xC3</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0xE5</span>, <span class="number">0x0D</span>, <span class="number">0x67</span>, <span class="number">0x91</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0xE3</span>, <span class="number">0xC1</span>, <span class="number">0xAA</span>, <span class="number">0x95</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x1C</span>, <span class="number">0x3F</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x1F</span>, <span class="number">0xFF</span>, <span class="number">0x7A</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x54</span>, <span class="number">0x9E</span>, <span class="number">0xED</span>, <span class="number">0xA9</span>, <span class="number">0x41</span>, <span class="number">0x20</span>, <span class="number">0xEF</span>, <span class="number">0xA6</span>, <span class="number">0x48</span>, <span class="number">0x97</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0xD4</span>, <span class="number">0xBB</span>, <span class="number">0x23</span>, <span class="number">0x66</span>, <span class="number">0xD9</span>, <span class="number">0xE4</span>, <span class="number">0x0B</span>, <span class="number">0x30</span>, <span class="number">0x15</span>, <span class="number">0xD7</span>, <span class="number">0x6B</span>, <span class="number">0x19</span>, <span class="number">0xCD</span>, <span class="number">0xC4</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xC8</span>, <span class="number">0x14</span>, <span class="number">0xFD</span>, <span class="number">0x7F</span>, <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x6F</span>, <span class="number">0xF5</span>, <span class="number">0x90</span>, <span class="number">0x76</span>, <span class="number">0xBF</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0x24</span>, <span class="number">0x78</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0xA8</span>, <span class="number">0x43</span>, <span class="number">0xB5</span>, <span class="number">0x0C</span>, <span class="number">0x31</span>, <span class="number">0xF9</span>, <span class="number">0xA2</span>, <span class="number">0x9C</span>, <span class="number">0x99</span>, <span class="number">0xF6</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0xDB</span>, <span class="number">0xB7</span>, <span class="number">0xC9</span>, <span class="number">0x85</span>, <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x64</span>, <span class="number">0x1D</span>, <span class="number">0x07</span>, <span class="number">0x34</span>, <span class="number">0x5A</span>, <span class="number">0xBD</span>, <span class="number">0x37</span>, <span class="number">0x4C</span>, <span class="number">0xA7</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xE9</span>, <span class="number">0x35</span>, <span class="number">0x93</span>, <span class="number">0x8D</span>, <span class="number">0xA5</span>, <span class="number">0xFB</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0xC2</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x4D</span>, <span class="number">0xB2</span>, <span class="number">0x10</span>, <span class="number">0x2B</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x6A</span>, <span class="number">0x3E</span>, <span class="number">0xD0</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x40</span>, <span class="number">0x27</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0x74</span>, <span class="number">0xB6</span>, <span class="number">0x57</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0x8A</span>, <span class="number">0xB9</span>, <span class="number">0xBC</span>, <span class="number">0x7D</span>, <span class="number">0xB3</span>, <span class="number">0x96</span>, <span class="number">0x7E</span>, <span class="number">0xFC</span>, <span class="number">0xAD</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xCB</span>, <span class="number">0x8B</span>, <span class="number">0xEE</span>, <span class="number">0x32</span>, <span class="number">0xA4</span>, <span class="number">0x16</span>, <span class="number">0xFE</span>, <span class="number">0x5B</span>, <span class="number">0x13</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0x8E</span>, <span class="number">0x29</span>, <span class="number">0xF3</span>, <span class="number">0x8F</span>, <span class="number">0x49</span>, <span class="number">0xE6</span>, <span class="number">0x9F</span>, <span class="number">0xF1</span>, <span class="number">0xC5</span>, <span class="number">0x70</span>, <span class="number">0x55</span>, <span class="number">0x8C</span>, <span class="number">0x11</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xEC</span>, <span class="number">0x00</span>, <span class="number">0xAC</span>, <span class="number">0x89</span>, <span class="number">0xD3</span>, <span class="number">0x82</span>, <span class="number">0x69</span>, <span class="number">0xD6</span>, <span class="number">0xBA</span>, <span class="number">0xD8</span>, <span class="number">0x59</span>, <span class="number">0x98</span>, <span class="number">0x09</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xC7</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox1[<span class="number">256</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">initsbox1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sbox1[box1[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">ror</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> a, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt;&gt; i) | (a &lt;&lt; (<span class="number">8</span> - i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty0</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = sbox1[flag[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="type">char</span> v2[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">        v2[i] = flag[box2[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">        flag[i] = v2[box2[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        flag[i] -= box4[i];</span><br><span class="line">        flag[i] ^= box3[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty3</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++) &#123;</span><br><span class="line">        flag[i] = ror(flag[i], <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty</span><span class="params">(<span class="type">char</span>* flag, <span class="type">int</span> now)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (now &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(flag, <span class="string">&quot;flag&quot;</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> tryflag[<span class="number">33</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(tryflag, flag, <span class="number">33</span>);</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:decrpty0(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:decrpty1(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:decrpty2(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:decrpty3(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((tryflag[now] &amp; <span class="number">3</span>) == i) &#123;</span><br><span class="line">            decrpty((<span class="type">char</span>*)tryflag, now - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> flag[] = &#123;</span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x3E</span>, <span class="number">0x43</span>, <span class="number">0xB8</span>, <span class="number">0xBA</span>, <span class="number">0xDB</span>, <span class="number">0xF6</span>, <span class="number">0x88</span>, <span class="number">0x25</span>, <span class="number">0x1B</span>, <span class="number">0x28</span>, <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0x54</span>, <span class="number">0xA6</span>, <span class="number">0x4A</span>,</span><br><span class="line">        <span class="number">0x90</span>, <span class="number">0x37</span>, <span class="number">0xBC</span>, <span class="number">0x29</span>, <span class="number">0x41</span>, <span class="number">0xAA</span>, <span class="number">0x28</span>, <span class="number">0xDB</span>, <span class="number">0x9A</span>, <span class="number">0x59</span>, <span class="number">0x63</span>, <span class="number">0x9E</span>, <span class="number">0x4B</span>, <span class="number">0xCF</span>, <span class="number">0x2E</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    initsbox1();</span><br><span class="line">    decrpty(flag, <span class="number">31</span>);</span><br><span class="line">    <span class="comment">//flag&#123;Ea5y_enCrypt_And_decrYpt!!&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写了逆向方向两个题&lt;/p&gt;
&lt;h1 id=&quot;5mc&quot;&gt;&lt;a href=&quot;#5mc&quot; class=&quot;headerlink&quot; title=&quot;5mc&quot;&gt;&lt;/a&gt;5mc&lt;/h1&gt;&lt;p&gt;拖进ida&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;D:&#92;tool&#92;blog&#92;themes&#92;hexo-t</summary>
      
    
    
    
    <category term="ctf" scheme="http://l1pmoluy.github.io/categories/ctf/"/>
    
    
    <category term="wp" scheme="http://l1pmoluy.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>寻main之旅</title>
    <link href="http://l1pmoluy.github.io/2024/12/20/%E5%AF%BB%E6%A2%A6%E4%B9%8B%E6%97%85/"/>
    <id>http://l1pmoluy.github.io/2024/12/20/%E5%AF%BB%E6%A2%A6%E4%B9%8B%E6%97%85/</id>
    <published>2024-12-20T13:52:30.000Z</published>
    <updated>2025-03-20T11:49:18.827Z</updated>
    
    <content type="html"><![CDATA[<p>谨以此文记录逆向启程</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是在第一学期快结束补充的，我不断地思索，哪个文章可以作为逆向启程呢，是ida的熟悉流程？是遇到最简单题目的题解？是c语言的小知识？亦或是其他，但我总认为，这些不足以为我的逆向开一个好头，思来想去最后决定以main函数来作为逆向的启蒙</p><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>开始，也意味着程序的开始，一个用c语言写好了main的程序并不是直接从main开始的，而是start，start紧接着去调用很多函数，他最终的目的也是位main铺路</p><p>以一个最简单的程序为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hallo re&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>将这个程序生成的文件拖入ida</code></pre><h1 id="hello-re"><a href="#hello-re" class="headerlink" title="hello re"></a>hello re</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attributes: thunk</span></span><br><span class="line">__int64 <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> start_0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>反编译出的第一条是他，start，什么都没有，不过别急，点进去，连着点进去两个函数出现了第一个岔路</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140011E30</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    road1();</span><br><span class="line">    <span class="keyword">return</span> road2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这两个函数原本不叫这个，是我将其随意命名的，他在你的ida中可能会叫sub_地址，是ida给这个函数起的名字，选择road2点进去</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140011E50</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __int64 v1; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">char</span> v2; <span class="comment">// [rsp+20h] [rbp-48h]</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v3; <span class="comment">// [rsp+21h] [rbp-47h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Code; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">    <span class="type">void</span> (__fastcall **v5)(_QWORD, __int64, _QWORD); <span class="comment">// [rsp+30h] [rbp-38h]</span></span><br><span class="line">    _tls_callback_type *v6; <span class="comment">// [rsp+38h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_140011393(<span class="number">1</span>i64) )</span><br><span class="line">        sub_140011311(<span class="number">7</span>i64);</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = sub_140011325();</span><br><span class="line">    <span class="keyword">if</span> ( dword_14001D1F8 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        sub_140011311(<span class="number">7</span>i64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( dword_14001D1F8 )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dword_14001D1F8 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( j__initterm_e((_PIFV *)&amp;First, (_PIFV *)&amp;Last) )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">255</span>i64;</span><br><span class="line">        j__initterm((_PVFV *)&amp;qword_14001A000, (_PVFV *)&amp;qword_14001A220);</span><br><span class="line">        dword_14001D1F8 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_1400112FD(v3);</span><br><span class="line">    v5 = (<span class="type">void</span> (__fastcall **)(_QWORD, __int64, _QWORD))sub_140011299();</span><br><span class="line">    <span class="keyword">if</span> ( *v5 &amp;&amp; (<span class="type">unsigned</span> __int8)sub_14001114F(v5) )</span><br><span class="line">        (*v5)(<span class="number">0</span>i64, <span class="number">2</span>i64, <span class="number">0</span>i64);</span><br><span class="line">    v6 = (_tls_callback_type *)sub_1400112CB();</span><br><span class="line">    <span class="keyword">if</span> ( *v6 &amp;&amp; (<span class="type">unsigned</span> __int8)sub_14001114F(v6) )</span><br><span class="line">        j__register_thread_local_exe_atexit_callback(*v6);</span><br><span class="line">    Code = sub_1400120A0();</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_140011276() )</span><br><span class="line">        j_exit(Code);</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        j__cexit();</span><br><span class="line">    LOBYTE(v1) = <span class="number">1</span>;</span><br><span class="line">    sub_140011140(v1, <span class="number">0</span>i64);</span><br><span class="line">    <span class="keyword">return</span> Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到最后return Code了吗，记得一个main函数的基本框架有return 0吗，当时说0是返回值，返回程序是否正确运行，那么如果想要返回值0，返回到start那里，这一步返回的Code里面的值就应该是return的0，我们要去看Code在这个程序里那里被定义了——sub_1400120A0，在37行，所以说这个函数往里延伸的就是main函数，点进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1400120A0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+20h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> **initial_narrow_environment; <span class="comment">// [rsp+28h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> **v3; <span class="comment">// [rsp+30h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  initial_narrow_environment = j__get_initial_narrow_environment();</span><br><span class="line">  v3 = *j___p___argv();</span><br><span class="line">  v1 = *j___p___argc();</span><br><span class="line">  <span class="keyword">return</span> sub_14001126C(v1, v3, initial_narrow_environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是刚刚的原理，return返回的要是main里面返回的0，所以点开return后跟着的函数，一路到底</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_14001136B(&amp;unk_140022008);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hallo re&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>获得了主函数，如果到这里不是很明白的话，从最后一段代码的return 0，回到最初的start，观察一下，0是不是一直作为返回值被返回</code></pre><h1 id="终"><a href="#终" class="headerlink" title="终"></a>终</h1><p>逆向就是这样，总会有很多东西混淆你，谨记自己的初心，静下来，慢慢观察，最终你也可以从空白的的<strong>start</strong>抵达目标<strong>main</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谨以此文记录逆向启程&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章是在第一学期快结束补充的，我不断地思索，哪个文章可以作为逆向启程呢，是ida的熟悉流程？是遇到最</summary>
      
    
    
    
    <category term="re" scheme="http://l1pmoluy.github.io/categories/re/"/>
    
    
    <category term="ctf" scheme="http://l1pmoluy.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>学习PE文件后的第一次实践项目之DLL反射型注入</title>
    <link href="http://l1pmoluy.github.io/2024/12/16/%E5%AD%A6%E4%B9%A0PE%E6%96%87%E4%BB%B6%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%E4%B9%8BDLL%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5/"/>
    <id>http://l1pmoluy.github.io/2024/12/16/%E5%AD%A6%E4%B9%A0PE%E6%96%87%E4%BB%B6%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%E4%B9%8BDLL%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5/</id>
    <published>2024-12-16T11:56:50.000Z</published>
    <updated>2025-03-20T11:49:15.675Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h2><p>先看普通型的注入，如下：</p><p><img src="/medias/inject.png"></p><p>普通的dll注入是在目标进程中开辟一处空间，在空间中写入dll文件的名称，再用<code>LoadLibraryA</code>函数通过查找名称来加载dll，而想在程序里调用<code>LoadLibraryA</code>的话就得用到<code>CreateRemoteThread</code>函数，这个函数传递的参数之一就有函数指针，等到<code>CreateRemoteThread</code>创建新线程之后，就会在新线程中调用这个过度函数，其二的参数就是传给指针的参数</p><p>这里插一句，在我多次用x64dbg调试得到的感悟，<code>CreateRemoteThread</code>这个函数，相当于开辟了一个不知道在哪的空间，在这个地方引用你要传入的函数</p><h2 id="反射型注入"><a href="#反射型注入" class="headerlink" title="反射型注入"></a>反射型注入</h2><p>反射型dll注入则是将整个DLL文件传到目标进程的空间中，然后通过<code>CreateRemoteThread</code>调用一段shellcode，将DLL展开，并运行</p><p><img src="/medias/Reflect.png"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="Injectmain"><a href="#Injectmain" class="headerlink" title="Injectmain"></a>Injectmain</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">RVAtoFileOffset</span><span class="params">(DWORD rva, PIMAGE_NT_HEADERS pNtHeaders, PIMAGE_SECTION_HEADER pSec)</span></span>;</span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span></span>;</span><br><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span></span>;</span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">MainInject</span><span class="params">(DWORD dwTargetPid, <span class="type">char</span>* Dllname)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先定义需要注入的dll与目标进程的名字</span></span><br><span class="line"><span class="comment">//wchar_t szProcName[MAX_PATH] = L&quot;cs2.exe&quot;;</span></span><br><span class="line"><span class="type">wchar_t</span> szProcName[MAX_PATH] = <span class="string">L&quot;pta.exe&quot;</span>;</span><br><span class="line"><span class="type">char</span> Dllname[MAX_PATH] = <span class="string">&quot;D:\\study\\VStudio\\ReflectDll\\x64\\Debug\\DLLIN.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找获得目标进程的id</span></span><br><span class="line">DWORD dwPid = <span class="built_in">ProcesstoPid</span>(szProcName);</span><br><span class="line"><span class="comment">//写入dll文件,这里思考一下，传入的参数都是什么呢？</span></span><br><span class="line"><span class="comment">//因为在这个函数里，我们要做的是将dll文件写入，并且用其中的函数</span></span><br><span class="line"><span class="comment">//dll中的API将会作为参数出现，所以传入的是进程id和dll函数目录</span></span><br><span class="line">DWORD result = <span class="built_in">MainInject</span>(dwPid, Dllname);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span> <span class="comment">//查找指定进程的PID(Process ID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hProcessSnap = <span class="literal">NULL</span>;</span><br><span class="line">DWORD ProcessId = <span class="number">0</span>;</span><br><span class="line">PROCESSENTRY32 pe32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">//打开进程快照</span></span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == (HANDLE)<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateToolhelp32Snapshot() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pe<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32)) <span class="comment">//开始枚举进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">wcscmp</span>(Processname, pe<span class="number">32.</span>szExeFile)) <span class="comment">//判断是否和提供的进程名相等，是，返回进程的ID</span></span><br><span class="line">&#123;</span><br><span class="line">ProcessId = pe<span class="number">32.</span>th32ProcessID;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32)); <span class="comment">//继续枚举进程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Process32First() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ProcessId) <span class="built_in">printf</span>(<span class="string">&quot;no find&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;[+] target id is %d&quot;</span>, ProcessId);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap); <span class="comment">//关闭系统进程快照的句柄</span></span><br><span class="line"><span class="keyword">return</span> ProcessId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于转换RVA-&gt;文件偏移地址</span></span><br><span class="line"><span class="comment">//传参说明：第一个是要转换的相对虚拟地址，第二个是Nt头的位置，第三个是节区表头的位置</span></span><br><span class="line"><span class="function">DWORD <span class="title">RVAtoFileOffset</span><span class="params">(DWORD rva, PIMAGE_NT_HEADERS pNtHeaders, PIMAGE_SECTION_HEADER pSec)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遍历节区表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pNtHeaders-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line"><span class="comment">// 检查RVA是否在当前节区的范围内</span></span><br><span class="line"><span class="keyword">if</span> (rva &gt;= pSec[i].VirtualAddress &amp;&amp; rva &lt; pSec[i].VirtualAddress + pSec[i].SizeOfRawData) &#123;</span><br><span class="line"><span class="comment">// 转换RVA到文件偏移地址</span></span><br><span class="line"><span class="keyword">return</span> pSec[i].PointerToRawData + (rva - pSec[i].VirtualAddress);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果未找到对应的节区，返回无效值</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数通过分析PE文件头来尝试获取句柄</span></span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里因为dll在别的进程里，所以想要看到可以利用前面的pBuf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定位一些相关文件头</span></span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDosHeader-&gt;e_lfanew);</span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNtHeaders + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取导出表地址及大小，注意这里是RVA</span></span><br><span class="line">DWORD exportDirRVA = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">DWORD exportDirSize = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定位导出表</span></span><br><span class="line"><span class="comment">//这里遇到一个小问题，得到的偏移地址是RVA，但是咱们的文件现在只是磁盘文件,所以需要转换</span></span><br><span class="line">DWORD exportDirFileOffset = <span class="built_in">RVAtoFileOffset</span>((DWORD)exportDirRVA, pNtHeaders, pSec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换之后RVA就变成了文件偏移，然后再定位</span></span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)pBuf + exportDirFileOffset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析导出表，这里同理都是RVA</span></span><br><span class="line">DWORD pRNames = pExportDir-&gt;AddressOfNames;</span><br><span class="line">DWORD pFNames = <span class="built_in">RVAtoFileOffset</span>(pRNames, pNtHeaders, pSec);</span><br><span class="line">DWORD* pNames = (DWORD*)((BYTE*)pBuf + pFNames);</span><br><span class="line"></span><br><span class="line">DWORD pRFunctions = pExportDir-&gt;AddressOfFunctions;</span><br><span class="line">DWORD pFFunctions = <span class="built_in">RVAtoFileOffset</span>(pRFunctions, pNtHeaders, pSec);</span><br><span class="line">DWORD* pFunctions = (DWORD*)((BYTE*)pBuf + pFFunctions);</span><br><span class="line"></span><br><span class="line">WORD pRNameOrdinals = pExportDir-&gt;AddressOfNameOrdinals;</span><br><span class="line">WORD pFNameOrdinals = <span class="built_in">RVAtoFileOffset</span>(pRNameOrdinals, pNtHeaders, pSec);</span><br><span class="line">WORD* pNameOrdinals = (WORD*)((BYTE*)pBuf + pFFunctions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历查找目标函数</span></span><br><span class="line">DWORD funcRVA = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDir-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">DWORD functionNameRVA = pNames[i];</span><br><span class="line">DWORD functionNameFileOffset = <span class="built_in">RVAtoFileOffset</span>(functionNameRVA, pNtHeaders, pSec);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* pName = (<span class="type">char</span>*)((BYTE*)pBuf + functionNameFileOffset);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, funcName) == <span class="number">0</span>) &#123;</span><br><span class="line">funcRVA = pFunctions[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (funcRVA == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Function %s not found.&quot;</span>, funcName);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD fileOffset = <span class="built_in">RVAtoFileOffset</span>(funcRVA, pNtHeaders, pSec);;</span><br><span class="line">DWORD* pfileOffset = (DWORD*)((BYTE*)pBuf + fileOffset);</span><br><span class="line"><span class="keyword">if</span> (fileOffset == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Failed to convert RVA to file offset.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LPVOID remoteFuncAddr = (LPBYTE)pDll + fileOffset;</span><br><span class="line"><span class="keyword">return</span> remoteFuncAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">MainInject</span><span class="params">(DWORD dwTargetPid, <span class="type">char</span>* Dllname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//与普通dll注入一样，首先要做的是获取句柄</span></span><br><span class="line">HANDLE hProc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">hProc = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwTargetPid);</span><br><span class="line"><span class="keyword">if</span> (!hProc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess Failed.&quot;</span>);</span><br><span class="line">DWORD dwError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess failed. Error code: %d\n&quot;</span>, dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有了句柄就可以创建空间然后写入了，这里的写入我参考的是PE加载器中</span></span><br><span class="line"><span class="comment">//ReadFileA与创建空间的方法，其中相当于是在目标进程空间中创造一个&quot;类磁盘&quot;空间</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFileA</span>(Dllname,</span><br><span class="line">GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line"><span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateFileA failed.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD FileSize = <span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line">LPDWORD SizeToRead = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//本地暂存</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[FileSize];</span><br><span class="line"><span class="built_in">ZeroMemory</span>(pBuf, FileSize);</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">ReadFile</span>(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 文件读取失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对接下来开辟的空间进行计算大小</span></span><br><span class="line">PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDos-&gt;e_lfanew);</span><br><span class="line">PIMAGE_SECTION_HEADER pSection = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">DWORD ImageSize = pNt-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟目标进程中的&quot;类磁盘&quot;空间，大小为前文的FileSize</span></span><br><span class="line"><span class="comment">//这里注意申请的地址权限要是可执行的（PAGE_EXECUTE_READWRITE）</span></span><br><span class="line"><span class="comment">//这里创建的时候一下子创两个</span></span><br><span class="line"><span class="comment">//刚开始没发现，才发现，pAlloc应该+的是FileSize哎呀麻烦了我想想</span></span><br><span class="line">ULONG_PTR TotalSize = ImageSize + ImageSize;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] FileSize : %p&quot;</span>, FileSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] ImageSize: %p&quot;</span>, ImageSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] TotalSize: %p&quot;</span>, TotalSize);</span><br><span class="line"><span class="comment">//这里遇到一个问题是，传入的TotaSize大小不够后面节区表的第一个表，好奇怪所以需要修正TotalSize大小</span></span><br><span class="line">LPVOID pDll = <span class="built_in">VirtualAllocEx</span>(hProc, <span class="literal">NULL</span>, TotalSize + <span class="number">1</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 内存分配失败, 错误代码: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清零目标进程内存</span></span><br><span class="line">SIZE_T sizeToZero = TotalSize; <span class="comment">// 需要清零的字节数</span></span><br><span class="line">BYTE* zeroBuffer = (BYTE*)<span class="built_in">calloc</span>(sizeToZero, <span class="number">1</span>); <span class="comment">// 创建一个全零的缓冲区</span></span><br><span class="line"><span class="keyword">if</span> (zeroBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to allocate zero buffer.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入全零到目标内存</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, zeroBuffer, sizeToZero, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">DWORD errorCode = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WriteProcessMemory failed with error code: %lu\n&quot;</span>, errorCode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(zeroBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将dll文件写入进去</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, pBuf, FileSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来的活是找dll文件中相当于loadlibrary函数的自写函数Reflectload</span></span><br><span class="line"><span class="comment">//注意前文开辟的&quot;类磁盘&quot;空间中的pDll</span></span><br><span class="line"><span class="comment">// 假设 ReflectLoader 是目标函数名</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* reflectFuncName = <span class="string">&quot;ReflectLoader&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ReflectLoader 在目标进程内存中的地址</span></span><br><span class="line">LPVOID pReflectLoader = <span class="built_in">GetRemoteReflectLoad</span>(pDll, reflectFuncName, pBuf);</span><br><span class="line"><span class="keyword">if</span> (!pReflectLoader) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] Failed to find ReflectLoader.\n&quot;</span>);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPVOID pAlloc = (LPVOID)((ULONG_PTR)pDll + ImageSize);</span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((ULONG_PTR)pAlloc + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">PIMAGE_SECTION_HEADER pSect = (PIMAGE_SECTION_HEADER)((ULONG_PTR)pDll + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNt-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pAlloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll磁盘起始地址:%p&quot;</span>, pDll);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll磁盘终止地址:%p&quot;</span>, (ULONG_PTR)pDll + FileSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll内存起始地址:%p&quot;</span>, pAlloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll整体结束地址:%p&quot;</span>, (ULONG_PTR)pAlloc + ImageSize);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 磁盘中Nt表头地址:%p&quot;</span>, (ULONG_PTR)pDll + pDos-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 内存中Nt表头地址:%p&quot;</span>, (ULONG_PTR)pAlloc + pDos-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 磁盘中Sec表头地址:%p&quot;</span>, pSect);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 内存中Sec表头地址:%p&quot;</span>, pSec);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 重定位表基址:%p&quot;</span>, pBaseReloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 重定位表RVA:%p&quot;</span>, (ULONG_PTR)pNt-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress);</span><br><span class="line">DWORD Relco = <span class="built_in">RVAtoFileOffset</span>((DWORD)pNt-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress, pNt, pSection);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 重定位表文件偏移:%p&quot;</span>, (ULONG_PTR)pDll + Relco);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DWORD SecNum = pNt-&gt;FileHeader.NumberOfSections;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; SecNum; i++) &#123;</span></span><br><span class="line"><span class="comment">//if (pSection-&gt;SizeOfRawData == 0 || pSection-&gt;PointerToRawData == 0) &#123;</span></span><br><span class="line"><span class="comment">//pSection++;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//char* chSrcMem = (char*)((ULONG_PTR)pDll + (DWORD)(pSection-&gt;PointerToRawData));</span></span><br><span class="line"><span class="comment">//char* chDestMem = (char*)((ULONG_PTR)pAlloc + (DWORD)(pSection-&gt;PointerToRawData));</span></span><br><span class="line"><span class="comment">//printf(&quot;\n[+] 磁盘中第%d个节区表对应文件地址:%p&quot;,i, chSrcMem);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n[+] 内存中第%d个节区表对应文件地址:%p&quot;,i, chDestMem);</span></span><br><span class="line"><span class="comment">//pSection++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 函数 address:%p&quot;</span>, pReflectLoader);</span><br><span class="line"><span class="comment">// 调用 ReflectLoader 函数</span></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(</span><br><span class="line">hProc,                       <span class="comment">// 目标进程句柄</span></span><br><span class="line"><span class="literal">NULL</span>,                        <span class="comment">// 默认安全属性</span></span><br><span class="line"><span class="number">0</span>,                           <span class="comment">// 默认堆栈大小</span></span><br><span class="line">(LPTHREAD_START_ROUTINE)pReflectLoader, <span class="comment">// ReflectLoader 地址</span></span><br><span class="line">pDll,                        <span class="comment">// 参数：DLL 的基址</span></span><br><span class="line"><span class="number">0</span>,                           <span class="comment">// 默认创建标志</span></span><br><span class="line"><span class="literal">NULL</span>                         <span class="comment">// 不需要线程 ID</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateRemoteThread failed: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] ReflectLoader executed successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待线程执行完成</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取目标进程Id"><a href="#获取目标进程Id" class="headerlink" title="获取目标进程Id"></a>获取目标进程Id</h3><p>首先查找目标进程的Id，函数的实现不多说了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span> <span class="comment">//查找指定进程的PID(Process ID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hProcessSnap = <span class="literal">NULL</span>;</span><br><span class="line">DWORD ProcessId = <span class="number">0</span>;</span><br><span class="line">PROCESSENTRY32 pe32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">//打开进程快照</span></span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == (HANDLE)<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateToolhelp32Snapshot() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pe<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32)) <span class="comment">//开始枚举进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">wcscmp</span>(Processname, pe<span class="number">32.</span>szExeFile)) <span class="comment">//判断是否和提供的进程名相等，是，返回进程的ID</span></span><br><span class="line">&#123;</span><br><span class="line">ProcessId = pe<span class="number">32.</span>th32ProcessID;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32)); <span class="comment">//继续枚举进程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Process32First() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ProcessId) <span class="built_in">printf</span>(<span class="string">&quot;\nno find&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;[+] target id is %d&quot;</span>, ProcessId);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap); <span class="comment">//关闭系统进程快照的句柄</span></span><br><span class="line"><span class="keyword">return</span> ProcessId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是注入的程序，思路是先开辟空间，写入DLL文件，然后找到shellcode，最后用CreatERemoteThread函数进入目标进程中</p><h3 id="获取目标进程句柄"><a href="#获取目标进程句柄" class="headerlink" title="获取目标进程句柄"></a>获取目标进程句柄</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与普通dll注入一样，首先要做的是获取句柄</span></span><br><span class="line">HANDLE hProc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">hProc = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwTargetPid);</span><br><span class="line"><span class="keyword">if</span> (!hProc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess Failed.&quot;</span>);</span><br><span class="line">DWORD dwError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess failed. Error code: %d\n&quot;</span>, dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是写入DLL，这里我选择，先在本地读取磁盘文件，然后通过WriteProcessMemory实现远程写入</p><h3 id="读取本地磁盘文件在本地进程中"><a href="#读取本地磁盘文件在本地进程中" class="headerlink" title="读取本地磁盘文件在本地进程中"></a>读取本地磁盘文件在本地进程中</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有了句柄就可以创建空间然后写入了，这里的写入我参考的是PE加载器中</span></span><br><span class="line"><span class="comment">//ReadFileA与创建空间的方法，其中相当于是在目标进程空间中创造一个&quot;类磁盘&quot;空间</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFileA</span>(Dllname,</span><br><span class="line">GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line"><span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateFileA failed.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD FileSize = <span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line">LPDWORD SizeToRead = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//本地暂存</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[FileSize];</span><br><span class="line"><span class="built_in">ZeroMemory</span>(pBuf, FileSize);</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">ReadFile</span>(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 文件读取失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是对本地文件的读取，并且这里的pBuf指向的是本地文件读取以后的基地址</p><h3 id="注入磁盘dll文件"><a href="#注入磁盘dll文件" class="headerlink" title="注入磁盘dll文件"></a>注入磁盘dll文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对接下来开辟的空间进行计算大小</span></span><br><span class="line">PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDos-&gt;e_lfanew);</span><br><span class="line">PIMAGE_SECTION_HEADER pSection = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">DWORD ImageSize = pNt-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟目标进程中的&quot;类磁盘&quot;空间，大小为前文的FileSize</span></span><br><span class="line"><span class="comment">//这里注意申请的地址权限要是可执行的（PAGE_EXECUTE_READWRITE）</span></span><br><span class="line"><span class="comment">//这里创建的时候一下子创两个</span></span><br><span class="line"><span class="comment">//刚开始没发现，才发现，pAlloc应该+的是FileSize哎呀麻烦了我想想</span></span><br><span class="line">ULONG_PTR TotalSize = ImageSize + ImageSize;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] FileSize : %p&quot;</span>, FileSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] ImageSize: %p&quot;</span>, ImageSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] TotalSize: %p&quot;</span>, TotalSize);</span><br><span class="line"><span class="comment">//这里遇到一个问题是，传入的TotaSize大小不够后面节区表的第一个表，好奇怪所以需要修正TotalSize大小</span></span><br><span class="line">LPVOID  = <span class="built_in">VirtualAllocEx</span>(hProc, <span class="literal">NULL</span>, TotalSize<span class="number">+1</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 内存分配失败, 错误代码: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清零目标进程内存</span></span><br><span class="line">SIZE_T sizeToZero = TotalSize; <span class="comment">// 需要清零的字节数</span></span><br><span class="line">BYTE* zeroBuffer = (BYTE*)<span class="built_in">calloc</span>(sizeToZero, <span class="number">1</span>); <span class="comment">// 创建一个全零的缓冲区</span></span><br><span class="line"><span class="keyword">if</span> (zeroBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to allocate zero buffer.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入全零到目标内存</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, zeroBuffer, sizeToZero, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">DWORD errorCode = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WriteProcessMemory failed with error code: %lu\n&quot;</span>, errorCode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(zeroBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将dll文件写入进去</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, pBuf, FileSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做到的便是写入dll但是注意，写入的也是磁盘文件，因为后续要实现对dll文件的展开，映射成内存文件</p><p>那就需要两个空间，一个空间是注入原封不动的磁盘文件，另一个是展开需要的空间，但是CreateRemoteThread只可以传入一个参数，那么就不考虑两个空间两个指针了，（其实也可以传入存放给内存空间开辟的地址指针，然后再shellcode里面向回遍历，直到检测到“5D 4A”PE文件头，就获取了磁盘文件的空间指针），一个指针的话，开辟空间的时候就开辟两个ImageSize的空间，然后pDll+ImageSize就是第二个指针了</p><h3 id="获取shellcode在文件中的文件偏移地址"><a href="#获取shellcode在文件中的文件偏移地址" class="headerlink" title="获取shellcode在文件中的文件偏移地址"></a>获取shellcode在文件中的文件偏移地址</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接下来的活是找dll文件中相当于loadlibrary函数的自写函数Reflectload</span></span><br><span class="line"><span class="comment">//注意前文开辟的&quot;类磁盘&quot;空间中的pDll</span></span><br><span class="line"><span class="comment">// 假设 ReflectLoader 是目标函数名</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* reflectFuncName = <span class="string">&quot;ReflectLoader&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ReflectLoader 在目标进程内存中的地址</span></span><br><span class="line">LPVOID pReflectLoader = <span class="built_in">GetRemoteReflectLoad</span>(pDll, reflectFuncName, pBuf);</span><br><span class="line"><span class="keyword">if</span> (!pReflectLoader) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] Failed to find ReflectLoader.\n&quot;</span>);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里获取的是文件偏移地址，因为此时的dll还没有展开（当然你也可以选择，所有的东西现在本地展开一次，然后写入展开后的程序，这样子就可以正常使用函数RVA，后续只需要修复重定位和导入函数了），所以找的不是RVA，而是文件偏移</p><h3 id="GetRemoteReflectLoad"><a href="#GetRemoteReflectLoad" class="headerlink" title="GetRemoteReflectLoad"></a>GetRemoteReflectLoad</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数通过分析PE文件头来尝试获取句柄</span></span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里因为dll在别的进程里，所以想要看到可以利用前面的pBuf</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定位一些相关文件头</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">    PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNtHeaders + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取导出表地址及大小，注意这里是RVA</span></span><br><span class="line">    DWORD exportDirRVA = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">    DWORD exportDirSize = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].Size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定位导出表</span></span><br><span class="line">    <span class="comment">//这里遇到一个小问题，得到的偏移地址是RVA，但是咱们的文件现在只是磁盘文件,所以需要转换</span></span><br><span class="line">    DWORD exportDirFileOffset = <span class="built_in">RVAtoFileOffset</span>((DWORD)exportDirRVA, pNtHeaders, pSec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换之后RVA就变成了文件偏移，然后再定位</span></span><br><span class="line">    PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)pBuf + exportDirFileOffset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析导出表，这里同理都是RVA</span></span><br><span class="line">    DWORD pRNames = pExportDir-&gt;AddressOfNames;</span><br><span class="line">    DWORD pFNames = <span class="built_in">RVAtoFileOffset</span>(pRNames, pNtHeaders, pSec);</span><br><span class="line">    DWORD* pNames = (DWORD*)((BYTE*)pBuf + pFNames);</span><br><span class="line"></span><br><span class="line">    DWORD pRFunctions = pExportDir-&gt;AddressOfFunctions;</span><br><span class="line">    DWORD pFFunctions = <span class="built_in">RVAtoFileOffset</span>(pRFunctions, pNtHeaders, pSec);</span><br><span class="line">    DWORD* pFunctions = (DWORD*)((BYTE*)pBuf + pFFunctions);</span><br><span class="line"></span><br><span class="line">    WORD pRNameOrdinals = pExportDir-&gt;AddressOfNameOrdinals;</span><br><span class="line">    WORD pFNameOrdinals = <span class="built_in">RVAtoFileOffset</span>(pRNameOrdinals, pNtHeaders, pSec);</span><br><span class="line">    WORD* pNameOrdinals = (WORD*)((BYTE*)pBuf + pFFunctions);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历查找目标函数</span></span><br><span class="line">    DWORD funcRVA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDir-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">        DWORD functionNameRVA = pNames[i];</span><br><span class="line">        DWORD functionNameFileOffset = <span class="built_in">RVAtoFileOffset</span>(functionNameRVA, pNtHeaders, pSec);</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* pName = (<span class="type">char</span>*)((BYTE*)pBuf + functionNameFileOffset);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, funcName) == <span class="number">0</span>) &#123;</span><br><span class="line">            funcRVA = pFunctions[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (funcRVA == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n[-] Function %s not found.&quot;</span>, funcName);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DWORD fileOffset = <span class="built_in">RVAtoFileOffset</span>(funcRVA, pNtHeaders, pSec);;</span><br><span class="line">    DWORD* pfileOffset = (DWORD*)((BYTE*)pBuf + fileOffset);</span><br><span class="line">    <span class="keyword">if</span> (fileOffset == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n[-] Failed to convert RVA to file offset.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LPVOID remoteFuncAddr = (LPBYTE)pDll + fileOffset;</span><br><span class="line">    <span class="keyword">return</span> remoteFuncAddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的实现，是通过查找dll文件中的导出函数，遍历所有导出函数找到目标函数的RVA，然后需要对RVA转换为文件偏移地址，不过要注意，在文件没有展开之前导出表，以及导出表里的信息都是RVA，需要转换为文件偏移地址，那么写一个RVA-文件偏移就非常方便了</p><h3 id="RVAtoFileOffset"><a href="#RVAtoFileOffset" class="headerlink" title="RVAtoFileOffset"></a>RVAtoFileOffset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于转换RVA-&gt;文件偏移地址</span></span><br><span class="line"><span class="comment">//传参说明：第一个是要转换的相对虚拟地址，第二个是Nt头的位置，第三个是节区表头的位置</span></span><br><span class="line"><span class="function">DWORD <span class="title">RVAtoFileOffset</span><span class="params">(DWORD rva, PIMAGE_NT_HEADERS pNtHeaders, PIMAGE_SECTION_HEADER pSec)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遍历节区表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pNtHeaders-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line"><span class="comment">// 检查RVA是否在当前节区的范围内</span></span><br><span class="line"><span class="keyword">if</span> (rva &gt;= pSec[i].VirtualAddress &amp;&amp; rva &lt; pSec[i].VirtualAddress + pSec[i].SizeOfRawData) &#123;</span><br><span class="line"><span class="comment">// 转换RVA到文件偏移地址</span></span><br><span class="line"><span class="keyword">return</span> pSec[i].PointerToRawData + (rva - pSec[i].VirtualAddress);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果未找到对应的节区，返回无效值</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的实现是，先查找处于哪个节区，然后通过节区表的首地址经过RVA-虚拟首地址+节区初始地址的真实地址</p><h3 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span>;</span><br><span class="line"><span class="comment">// DLL入口点函数</span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹窗代码</span></span><br><span class="line">    <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;哇塞！！你成功啦！！！&quot;</span>, <span class="string">L&quot;注入程序检测中...&quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> processName[MAX_PATH] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 存储进程路径的缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前进程的可执行文件路径</span></span><br><span class="line">    DWORD length = <span class="built_in">GetModuleFileNameA</span>(<span class="literal">NULL</span>, processName, MAX_PATH);</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, processName, <span class="string">&quot;当前进程路径: &quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">99999999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义的宽字符转普通字符的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)(*src + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>));  <span class="comment">// 转换大写字符为小写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;a&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留小写字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;0&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留数字字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *dest = <span class="string">&#x27;?&#x27;</span>;  <span class="comment">// 对于其他字符，可以选择替代字符，例如 &#x27;？&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        dest++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 确保目标字符串以 null 结尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*str1 != *str2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回差值</span></span><br><span class="line">        &#125;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 两个字符串完全匹配时返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较两个 DLL 名称（大小写不敏感）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dllName[i] != <span class="string">L&#x27;\0&#x27;</span> || targetDllName[i] != <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 将两个字符都转换为小写进行比较</span></span><br><span class="line">        <span class="type">wchar_t</span> ch1 = (dllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; dllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? dllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : dllName[i];</span><br><span class="line">        <span class="type">wchar_t</span> ch2 = (targetDllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; targetDllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? targetDllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : targetDllName[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果字符不同，则返回比较结果</span></span><br><span class="line">        <span class="keyword">if</span> (ch1 != ch2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果字符串都没有结束且匹配到最后，返回 0 表示完全相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 如果两个字符串完全相同，返回 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取 DLL 名称的函数</span></span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* fileName = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">wchar_t</span>* temp = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并找到最后一个 &#x27;\\&#x27;，获取文件名部分</span></span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*temp == <span class="string">L&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            fileName = temp + <span class="number">1</span>;  <span class="comment">// 更新文件名的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到 &#x27;\\&#x27;，则认为整个字符串就是文件名</span></span><br><span class="line">    <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">        fileName = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pDll;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">    DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">    PBYTE pAlloc = (PBYTE)((ULONG_PTR)pDll + ImageSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>) <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">if</span> (pDOSheader-&gt;e_magic != IMAGE_DOS_SIGNATURE || pNTheader-&gt;Signature != IMAGE_NT_SIGNATURE) <span class="keyword">return</span> FALSE;  <span class="comment">// 无效的头，直接退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动实现 CopyMemory 的功能</span></span><br><span class="line">    BYTE* dst = (BYTE*)pAlloc;               <span class="comment">// 目标内存地址</span></span><br><span class="line">    BYTE* src = (BYTE*)pDll;                 <span class="comment">// 源内存地址</span></span><br><span class="line">    <span class="type">size_t</span> size = pNTheader-&gt;OptionalHeader.SizeOfHeaders; <span class="comment">// 需要复制的字节数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        dst[i] = src[i];                     <span class="comment">// 逐字节复制</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制节区表</span></span><br><span class="line">    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">    DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">            pSec++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((ULONG_PTR)pDll + (DWORD)(pSec-&gt;PointerToRawData));</span><br><span class="line">        <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((ULONG_PTR)pAlloc + (DWORD)(pSec-&gt;VirtualAddress));</span><br><span class="line">        DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;</span><br><span class="line">        DWORD dwVirtualSize = pSec-&gt;Misc.VirtualSize;</span><br><span class="line">        <span class="keyword">for</span> (DWORD j = <span class="number">0</span>; j &lt; dwSizeOfRawData; j++) &#123;</span><br><span class="line">            chDestMem[j] = chSrcMem[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dwVirtualSize &gt; dwSizeOfRawData) &#123;</span><br><span class="line">            <span class="type">char</span>* start = chDestMem + dwSizeOfRawData;</span><br><span class="line">            <span class="type">char</span>* end = chDestMem + dwVirtualSize;</span><br><span class="line">            <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">                *start++ = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pSec++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//杜哥部分登场</span></span><br><span class="line">    <span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">    PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pAlloc);</span><br><span class="line">    <span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line">    <span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].Size;<span class="comment">//重定位表的大小也在NT结构中 </span></span><br><span class="line">    <span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">            <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">                WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">                <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    differ = *((ULONG_PTR*)(offset + pBaseReloc-&gt;VirtualAddress + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                    ULONG_PTR p = (ULONG_PTR)pAlloc + differ;</span><br><span class="line">                    <span class="type">char</span>* tagetaddr = (<span class="type">char</span>*)(ULONG_PTR)pAlloc + offset + pBaseReloc-&gt;VirtualAddress;</span><br><span class="line">                    <span class="type">char</span>* fromeaddr = (<span class="type">char</span>*)p;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">4</span>;c++) &#123;</span><br><span class="line">                        tagetaddr[c] = fromeaddr[c];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入表的处理</span></span><br><span class="line">    <span class="comment">//因为导入表还没有修复，所以里面的API大部分都是无法使用的，可避免的我都去避免了</span></span><br><span class="line">    <span class="comment">// 但是是在无法避免的如，LoadLibrary函数无法找到，就需要通过</span></span><br><span class="line">    <span class="comment">// TEB和PEB的帮助找到了</span></span><br><span class="line">    <span class="comment">//GetProcAddress的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* GETPROCADDR)</span><span class="params">(HMODULE, LPCSTR)</span></span>;</span><br><span class="line">    <span class="comment">//LoadLibrary的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* LOADLIBRARYA)</span><span class="params">(LPCSTR)</span></span>;</span><br><span class="line"></span><br><span class="line">    GETPROCADDR pGetProcAddress = <span class="literal">NULL</span>;</span><br><span class="line">    LOADLIBRARYA pLoadLibraryA = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到TEB的地址，通过TEB找到PEB</span></span><br><span class="line">    PTEB pTEB = (PTEB)__readgsqword(<span class="number">0x30</span>);</span><br><span class="line">    PPEB pPEB = pTEB-&gt;ProcessEnvironmentBlock;</span><br><span class="line">    <span class="comment">// 获取PEB.Ldr</span></span><br><span class="line">    PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，找到 kernel32.dll</span></span><br><span class="line">    PLIST_ENTRY pListHead = &amp;pLdr-&gt;InMemoryOrderModuleList;</span><br><span class="line">    PLIST_ENTRY pCurrentEntry = pListHead-&gt;Flink;</span><br><span class="line">    <span class="keyword">while</span> (pCurrentEntry &amp;&amp; pCurrentEntry != pListHead)</span><br><span class="line">    &#123;</span><br><span class="line">        PLDR_DATA_TABLE_ENTRY pEntry = <span class="built_in">CONTAINING_RECORD</span>(pCurrentEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br><span class="line">        <span class="keyword">if</span> (pEntry &amp;&amp; pEntry-&gt;FullDllName.Buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">wchar_t</span>* dllName = pEntry-&gt;FullDllName.Buffer;</span><br><span class="line">            <span class="comment">// 提取 DLL 名称</span></span><br><span class="line">            <span class="type">wchar_t</span>* fileName = <span class="built_in">ExtractDllName</span>(dllName);</span><br><span class="line">            <span class="comment">// 目标 DLL 名称kernel32.dll</span></span><br><span class="line">            <span class="type">wchar_t</span> a[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            a[<span class="number">0</span>] = <span class="string">L&#x27;k&#x27;</span>;</span><br><span class="line">            a[<span class="number">1</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">2</span>] = <span class="string">L&#x27;r&#x27;</span>;</span><br><span class="line">            a[<span class="number">3</span>] = <span class="string">L&#x27;n&#x27;</span>;</span><br><span class="line">            a[<span class="number">4</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">5</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">6</span>] = <span class="string">L&#x27;3&#x27;</span>;</span><br><span class="line">            a[<span class="number">7</span>] = <span class="string">L&#x27;2&#x27;</span>;</span><br><span class="line">            a[<span class="number">8</span>] = <span class="string">L&#x27;.&#x27;</span>;</span><br><span class="line">            a[<span class="number">9</span>] = <span class="string">L&#x27;d&#x27;</span>;</span><br><span class="line">            a[<span class="number">10</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">11</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">12</span>] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CompareDllName</span>(fileName, a)) &#123;</span><br><span class="line">                <span class="comment">//分析PE文件找到导出表</span></span><br><span class="line">                HMODULE hKernel32 = (HMODULE)pEntry-&gt;DllBase;</span><br><span class="line">                PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hKernel32 + ((PIMAGE_DOS_HEADER)hKernel32)-&gt;e_lfanew);</span><br><span class="line">                <span class="comment">// 获取导出表的地址</span></span><br><span class="line">                PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hKernel32 + pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">                <span class="comment">// 获取导出表的各个信息</span></span><br><span class="line">                DWORD* pFunctionNames = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">                DWORD* pFunctionAddresses = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">                WORD* pFunctionOrdinals = (WORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历导出表，查找 LoadLibraryA</span></span><br><span class="line">                <span class="type">char</span> targetName1[<span class="number">50</span>] = <span class="string">&quot;LoadLibraryA&quot;</span>;</span><br><span class="line">                targetName1[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">4</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">5</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">6</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">7</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">9</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">10</span>] = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">11</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="comment">// 遍历导出表，查找 GetProcAddress</span></span><br><span class="line">                <span class="type">char</span> targetName2[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                targetName2[<span class="number">0</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">2</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">3</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">4</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">5</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">6</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">7</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">8</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">9</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">10</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">11</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">12</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">13</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">14</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> isP = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">                    <span class="type">char</span>* functionName = (<span class="type">char</span>*)((BYTE*)hKernel32 + pFunctionNames[i]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName1)) &#123;</span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pLoadLibraryA = (LOADLIBRARYA)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName2)) &#123;</span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pGetProcAddress = (GETPROCADDR)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isP == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到后退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pCurrentEntry = pCurrentEntry-&gt;Flink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pLoadLibraryA &amp;&amp; !pGetProcAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> foece[] = <span class="string">&quot;无法获取 LoadLibraryA 地址，请检查目标进程模块&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> sucsess[] = <span class="string">&quot;sucsess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//这个是IID的指针</span></span><br><span class="line">    <span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> DLLname[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 定义一个存储 DLL 名称的缓冲区</span></span><br><span class="line">            <span class="type">char</span>* pDLLName = (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc); <span class="comment">// 获取 DLL 名称的地址</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动将名称拷贝到 DLLname 缓冲区</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pDLLName[i] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">// 遇到字符串结束符时停止</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                DLLname[i] = pDLLName[i]; <span class="comment">// 拷贝字符</span></span><br><span class="line">            &#125;</span><br><span class="line">            DLLname[<span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保缓冲区以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"></span><br><span class="line">            HMODULE hProcess = <span class="built_in">pLoadLibraryA</span>(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">            <span class="keyword">if</span> (!hProcess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            PIMAGE_THUNK_DATA64 pINT = (PIMAGE_THUNK_DATA64)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">            PIMAGE_THUNK_DATA64 pIAT = (PIMAGE_THUNK_DATA64)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">            <span class="keyword">while</span> ((ULONG_PTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u<span class="number">1.</span>AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u<span class="number">1.</span>AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, (LPCSTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">            pImport++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNT = (PIMAGE_NT_HEADERS)(pAlloc + pDOSheader-&gt;e_lfanew);</span><br><span class="line">    FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNT-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">    <span class="built_in">EOP</span>();</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就用CreateRemoteThread创造新线程，然后就可以插入shellcode了</p><h2 id="ReflectLoader"><a href="#ReflectLoader" class="headerlink" title="ReflectLoader"></a>ReflectLoader</h2><p>我将一个文件的展开过程分为两部分，一部分是映射文件头和节区段，另一部分是修复重定位表和导入表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span>;</span><br><span class="line"><span class="comment">// DLL入口点函数</span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹窗代码</span></span><br><span class="line">    <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;哇塞！！你成功啦！！！&quot;</span>, <span class="string">L&quot;注入程序检测中...&quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> processName[MAX_PATH] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 存储进程路径的缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前进程的可执行文件路径</span></span><br><span class="line">    DWORD length = <span class="built_in">GetModuleFileNameA</span>(<span class="literal">NULL</span>, processName, MAX_PATH);</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, processName, <span class="string">&quot;当前进程路径: &quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">99999999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义的宽字符转普通字符的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)(*src + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>));  <span class="comment">// 转换大写字符为小写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;a&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留小写字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;0&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留数字字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *dest = <span class="string">&#x27;?&#x27;</span>;  <span class="comment">// 对于其他字符，可以选择替代字符，例如 &#x27;？&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        dest++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 确保目标字符串以 null 结尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*str1 != *str2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回差值</span></span><br><span class="line">        &#125;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 两个字符串完全匹配时返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较两个 DLL 名称（大小写不敏感）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dllName[i] != <span class="string">L&#x27;\0&#x27;</span> || targetDllName[i] != <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 将两个字符都转换为小写进行比较</span></span><br><span class="line">        <span class="type">wchar_t</span> ch1 = (dllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; dllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? dllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : dllName[i];</span><br><span class="line">        <span class="type">wchar_t</span> ch2 = (targetDllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; targetDllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? targetDllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : targetDllName[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果字符不同，则返回比较结果</span></span><br><span class="line">        <span class="keyword">if</span> (ch1 != ch2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果字符串都没有结束且匹配到最后，返回 0 表示完全相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 如果两个字符串完全相同，返回 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取 DLL 名称的函数</span></span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* fileName = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">wchar_t</span>* temp = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并找到最后一个 &#x27;\\&#x27;，获取文件名部分</span></span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*temp == <span class="string">L&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            fileName = temp + <span class="number">1</span>;  <span class="comment">// 更新文件名的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到 &#x27;\\&#x27;，则认为整个字符串就是文件名</span></span><br><span class="line">    <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">        fileName = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pDll;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">    DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">    PBYTE pAlloc = (PBYTE)((ULONG_PTR)pDll + ImageSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>) <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">if</span> (pDOSheader-&gt;e_magic != IMAGE_DOS_SIGNATURE || pNTheader-&gt;Signature != IMAGE_NT_SIGNATURE) <span class="keyword">return</span> FALSE;  <span class="comment">// 无效的头，直接退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动实现 CopyMemory 的功能</span></span><br><span class="line">    BYTE* dst = (BYTE*)pAlloc;               <span class="comment">// 目标内存地址</span></span><br><span class="line">    BYTE* src = (BYTE*)pDll;                 <span class="comment">// 源内存地址</span></span><br><span class="line">    <span class="type">size_t</span> size = pNTheader-&gt;OptionalHeader.SizeOfHeaders; <span class="comment">// 需要复制的字节数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        dst[i] = src[i];                     <span class="comment">// 逐字节复制</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制节区表</span></span><br><span class="line">    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">    DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">            pSec++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((ULONG_PTR)pDll + (DWORD)(pSec-&gt;PointerToRawData));</span><br><span class="line">        <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((ULONG_PTR)pAlloc + (DWORD)(pSec-&gt;VirtualAddress));</span><br><span class="line">        DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;</span><br><span class="line">        DWORD dwVirtualSize = pSec-&gt;Misc.VirtualSize;</span><br><span class="line">        <span class="keyword">for</span> (DWORD j = <span class="number">0</span>; j &lt; dwSizeOfRawData; j++) &#123;</span><br><span class="line">            chDestMem[j] = chSrcMem[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dwVirtualSize &gt; dwSizeOfRawData) &#123;</span><br><span class="line">            <span class="type">char</span>* start = chDestMem + dwSizeOfRawData;</span><br><span class="line">            <span class="type">char</span>* end = chDestMem + dwVirtualSize;</span><br><span class="line">            <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">                *start++ = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pSec++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//杜哥部分登场</span></span><br><span class="line">    <span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">    PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pAlloc);</span><br><span class="line">    <span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line">    <span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].Size;<span class="comment">//重定位表的大小也在NT结构中 </span></span><br><span class="line">    <span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">            <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">                WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">                <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    differ = *((ULONG_PTR*)(offset + pBaseReloc-&gt;VirtualAddress + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                    ULONG_PTR p = (ULONG_PTR)pAlloc + differ;</span><br><span class="line">                    <span class="type">char</span>* tagetaddr = (<span class="type">char</span>*)(ULONG_PTR)pAlloc + offset + pBaseReloc-&gt;VirtualAddress;</span><br><span class="line">                    <span class="type">char</span>* fromeaddr = (<span class="type">char</span>*)p;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">4</span>;c++) &#123;</span><br><span class="line">                        tagetaddr[c] = fromeaddr[c];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入表的处理</span></span><br><span class="line">    <span class="comment">//因为导入表还没有修复，所以里面的API大部分都是无法使用的，可避免的我都去避免了</span></span><br><span class="line">    <span class="comment">// 但是是在无法避免的如，LoadLibrary函数无法找到，就需要通过</span></span><br><span class="line">    <span class="comment">// TEB和PEB的帮助找到了</span></span><br><span class="line">    <span class="comment">//GetProcAddress的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* GETPROCADDR)</span><span class="params">(HMODULE, LPCSTR)</span></span>;</span><br><span class="line">    <span class="comment">//LoadLibrary的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* LOADLIBRARYA)</span><span class="params">(LPCSTR)</span></span>;</span><br><span class="line"></span><br><span class="line">    GETPROCADDR pGetProcAddress = <span class="literal">NULL</span>;</span><br><span class="line">    LOADLIBRARYA pLoadLibraryA = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到TEB的地址，通过TEB找到PEB</span></span><br><span class="line">    PTEB pTEB = (PTEB)__readgsqword(<span class="number">0x30</span>);</span><br><span class="line">    PPEB pPEB = pTEB-&gt;ProcessEnvironmentBlock;</span><br><span class="line">    <span class="comment">// 获取PEB.Ldr</span></span><br><span class="line">    PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，找到 kernel32.dll</span></span><br><span class="line">    PLIST_ENTRY pListHead = &amp;pLdr-&gt;InMemoryOrderModuleList;</span><br><span class="line">    PLIST_ENTRY pCurrentEntry = pListHead-&gt;Flink;</span><br><span class="line">    <span class="keyword">while</span> (pCurrentEntry &amp;&amp; pCurrentEntry != pListHead)</span><br><span class="line">    &#123;</span><br><span class="line">        PLDR_DATA_TABLE_ENTRY pEntry = <span class="built_in">CONTAINING_RECORD</span>(pCurrentEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br><span class="line">        <span class="keyword">if</span> (pEntry &amp;&amp; pEntry-&gt;FullDllName.Buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">wchar_t</span>* dllName = pEntry-&gt;FullDllName.Buffer;</span><br><span class="line">            <span class="comment">// 提取 DLL 名称</span></span><br><span class="line">            <span class="type">wchar_t</span>* fileName = <span class="built_in">ExtractDllName</span>(dllName);</span><br><span class="line">            <span class="comment">// 目标 DLL 名称kernel32.dll</span></span><br><span class="line">            <span class="type">wchar_t</span> a[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            a[<span class="number">0</span>] = <span class="string">L&#x27;k&#x27;</span>;</span><br><span class="line">            a[<span class="number">1</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">2</span>] = <span class="string">L&#x27;r&#x27;</span>;</span><br><span class="line">            a[<span class="number">3</span>] = <span class="string">L&#x27;n&#x27;</span>;</span><br><span class="line">            a[<span class="number">4</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">5</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">6</span>] = <span class="string">L&#x27;3&#x27;</span>;</span><br><span class="line">            a[<span class="number">7</span>] = <span class="string">L&#x27;2&#x27;</span>;</span><br><span class="line">            a[<span class="number">8</span>] = <span class="string">L&#x27;.&#x27;</span>;</span><br><span class="line">            a[<span class="number">9</span>] = <span class="string">L&#x27;d&#x27;</span>;</span><br><span class="line">            a[<span class="number">10</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">11</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">12</span>] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CompareDllName</span>(fileName, a)) &#123;</span><br><span class="line">                <span class="comment">//分析PE文件找到导出表</span></span><br><span class="line">                HMODULE hKernel32 = (HMODULE)pEntry-&gt;DllBase;</span><br><span class="line">                PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hKernel32 + ((PIMAGE_DOS_HEADER)hKernel32)-&gt;e_lfanew);</span><br><span class="line">                <span class="comment">// 获取导出表的地址</span></span><br><span class="line">                PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hKernel32 + pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">                <span class="comment">// 获取导出表的各个信息</span></span><br><span class="line">                DWORD* pFunctionNames = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">                DWORD* pFunctionAddresses = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">                WORD* pFunctionOrdinals = (WORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历导出表，查找 LoadLibraryA</span></span><br><span class="line">                <span class="type">char</span> targetName1[<span class="number">50</span>] = <span class="string">&quot;LoadLibraryA&quot;</span>;</span><br><span class="line">                targetName1[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">4</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">5</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">6</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">7</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">9</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">10</span>] = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">11</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="comment">// 遍历导出表，查找 GetProcAddress</span></span><br><span class="line">                <span class="type">char</span> targetName2[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                targetName2[<span class="number">0</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">2</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">3</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">4</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">5</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">6</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">7</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">8</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">9</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">10</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">11</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">12</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">13</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">14</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> isP = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">                    <span class="type">char</span>* functionName = (<span class="type">char</span>*)((BYTE*)hKernel32 + pFunctionNames[i]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName1)) &#123;</span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pLoadLibraryA = (LOADLIBRARYA)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName2)) &#123;</span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pGetProcAddress = (GETPROCADDR)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isP == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到后退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pCurrentEntry = pCurrentEntry-&gt;Flink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pLoadLibraryA &amp;&amp; !pGetProcAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> foece[] = <span class="string">&quot;无法获取 LoadLibraryA 地址，请检查目标进程模块&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> sucsess[] = <span class="string">&quot;sucsess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//这个是IID的指针</span></span><br><span class="line">    <span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> DLLname[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 定义一个存储 DLL 名称的缓冲区</span></span><br><span class="line">            <span class="type">char</span>* pDLLName = (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc); <span class="comment">// 获取 DLL 名称的地址</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动将名称拷贝到 DLLname 缓冲区</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pDLLName[i] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">// 遇到字符串结束符时停止</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                DLLname[i] = pDLLName[i]; <span class="comment">// 拷贝字符</span></span><br><span class="line">            &#125;</span><br><span class="line">            DLLname[<span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保缓冲区以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"></span><br><span class="line">            HMODULE hProcess = <span class="built_in">pLoadLibraryA</span>(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">            <span class="keyword">if</span> (!hProcess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            PIMAGE_THUNK_DATA64 pINT = (PIMAGE_THUNK_DATA64)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">            PIMAGE_THUNK_DATA64 pIAT = (PIMAGE_THUNK_DATA64)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">            <span class="keyword">while</span> ((ULONG_PTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u<span class="number">1.</span>AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u<span class="number">1.</span>AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, (LPCSTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">            pImport++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNT = (PIMAGE_NT_HEADERS)(pAlloc + pDOSheader-&gt;e_lfanew);</span><br><span class="line">    FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNT-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">    <span class="built_in">EOP</span>();</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="映射对应部分"><a href="#映射对应部分" class="headerlink" title="映射对应部分"></a>映射对应部分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pDll;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">PBYTE pAlloc = (PBYTE)((ULONG_PTR)pDll + ImageSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>) <span class="keyword">return</span> FALSE;</span><br><span class="line"><span class="keyword">if</span> (pDOSheader-&gt;e_magic != IMAGE_DOS_SIGNATURE || pNTheader-&gt;Signature != IMAGE_NT_SIGNATURE) <span class="keyword">return</span> FALSE;  <span class="comment">// 无效的头，直接退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动实现 CopyMemory 的功能</span></span><br><span class="line">BYTE* dst = (BYTE*)pAlloc;               <span class="comment">// 目标内存地址</span></span><br><span class="line">BYTE* src = (BYTE*)pDll;                 <span class="comment">// 源内存地址</span></span><br><span class="line"><span class="type">size_t</span> size = pNTheader-&gt;OptionalHeader.SizeOfHeaders; <span class="comment">// 需要复制的字节数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">    dst[i] = src[i];                     <span class="comment">// 逐字节复制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制节区表</span></span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">        pSec++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((ULONG_PTR)pDll + (DWORD)(pSec-&gt;PointerToRawData));</span><br><span class="line">    <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((ULONG_PTR)pAlloc + (DWORD)(pSec-&gt;VirtualAddress));</span><br><span class="line">    DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;</span><br><span class="line">    DWORD dwVirtualSize = pSec-&gt;Misc.VirtualSize;</span><br><span class="line">    <span class="keyword">for</span> (DWORD j = <span class="number">0</span>; j &lt; dwSizeOfRawData; j++) &#123;</span><br><span class="line">        chDestMem[j] = chSrcMem[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dwVirtualSize &gt; dwSizeOfRawData) &#123;</span><br><span class="line">        <span class="type">char</span>* start = chDestMem + dwSizeOfRawData;</span><br><span class="line">        <span class="type">char</span>* end = chDestMem + dwVirtualSize;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            *start++ = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pSec++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分相对简单，而且这个部分在里面和外面都可以实现，赋值文件头，然后根据节区头里面的文件偏移和虚拟地址偏移来映射就好</p><p>注意这里结束以后，节区表就修复完成了，所以可以使用自己封装的函数了</p><h3 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pAlloc);</span><br><span class="line"><span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line"><span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].Size;<span class="comment">//重定位表的大小也在NT结构中 </span></span><br><span class="line"><span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">        <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">            WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">            <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                differ = *((ULONG_PTR*)(offset + pBaseReloc-&gt;VirtualAddress + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                ULONG_PTR p = (ULONG_PTR)pAlloc + differ;</span><br><span class="line">                <span class="type">char</span>* tagetaddr = (<span class="type">char</span>*)(ULONG_PTR)pAlloc + offset + pBaseReloc-&gt;VirtualAddress;</span><br><span class="line">                <span class="type">char</span>* fromeaddr = (<span class="type">char</span>*)p;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">4</span>;c++) &#123;</span><br><span class="line">                    tagetaddr[c] = fromeaddr[c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">        pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据数据目录表定位重定位表，再根据重定位表结构来进行修复</p><h3 id="导入表修复"><a href="#导入表修复" class="headerlink" title="导入表修复"></a>导入表修复</h3><p>导入表的修复是比较困难的，再导入表修复前是不可以使用API的，但是在修复导入表这个过程中，不可避免的要用到LoadLibraryA与GetProcAddress，所以就需要一个新东西先找到这两个函数</p><h4 id="TEB和PEB"><a href="#TEB和PEB" class="headerlink" title="TEB和PEB"></a>TEB和PEB</h4><p>这里我没有过多的去了解，仅仅知道TEB是线程环境块，其中存储着PEB的指针，PEB是一个进程环境块，其中有一个叫PEB.Ldr的结构体，里面存储着已经加载的DLL文件指针</p><p>也就是说可以通过查找PEB.Ldr来找到kernel32.dll模块的句柄，然后找到其中的API，PEB.Ldr的结构如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB_LDR_DATA</span> &#123;</span><br><span class="line">    ULONG Length;                           <span class="comment">// 结构体的大小</span></span><br><span class="line">    BOOLEAN Initialized;                    <span class="comment">// 是否初始化</span></span><br><span class="line">    PVOID SsHandle;                         <span class="comment">// 保留字段，通常为 NULL</span></span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;       <span class="comment">// 模块按加载顺序排列的双向链表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;     <span class="comment">// 模块按内存顺序排列的双向链表</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList; <span class="comment">// 模块按初始化顺序排列的双向链表</span></span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><h3 id="定位PEB-Ldr"><a href="#定位PEB-Ldr" class="headerlink" title="定位PEB.Ldr"></a>定位PEB.Ldr</h3><p>理论可行，实践开始</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入表的处理</span></span><br><span class="line"><span class="comment">//因为导入表还没有修复，所以里面的API大部分都是无法使用的，可避免的我都去避免了</span></span><br><span class="line"><span class="comment">// 但是是在无法避免的如，LoadLibrary函数无法找到，就需要通过</span></span><br><span class="line"><span class="comment">// TEB和PEB的帮助找到了</span></span><br><span class="line"><span class="comment">//GetProcAddress的地址</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* GETPROCADDR)</span><span class="params">(HMODULE, LPCSTR)</span></span>;</span><br><span class="line"><span class="comment">//LoadLibrary的地址</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* LOADLIBRARYA)</span><span class="params">(LPCSTR)</span></span>;</span><br><span class="line"></span><br><span class="line">GETPROCADDR pGetProcAddress = <span class="literal">NULL</span>;</span><br><span class="line">LOADLIBRARYA pLoadLibraryA = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到TEB的地址，通过TEB找到PEB</span></span><br><span class="line">PTEB pTEB = (PTEB)__readgsqword(<span class="number">0x30</span>);</span><br><span class="line">PPEB pPEB = pTEB-&gt;ProcessEnvironmentBlock;</span><br><span class="line"><span class="comment">// 获取PEB.Ldr</span></span><br><span class="line">PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历模块列表，找到 kernel32.dll</span></span><br><span class="line">PLIST_ENTRY pListHead = &amp;pLdr-&gt;InMemoryOrderModuleList;</span><br><span class="line">PLIST_ENTRY pCurrentEntry = pListHead-&gt;Flink;</span><br><span class="line"><span class="keyword">while</span> (pCurrentEntry &amp;&amp; pCurrentEntry != pListHead)</span><br><span class="line">&#123;</span><br><span class="line">    PLDR_DATA_TABLE_ENTRY pEntry = <span class="built_in">CONTAINING_RECORD</span>(pCurrentEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br></pre></td></tr></table></figure><p>直到这一步是在定位到载入的模块的句柄，后续需要的是遍历载入的模块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pEntry &amp;&amp; pEntry-&gt;FullDllName.Buffer)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* dllName = pEntry-&gt;FullDllName.Buffer;</span><br><span class="line">    <span class="comment">// 提取 DLL 名称</span></span><br><span class="line">    <span class="type">wchar_t</span>* fileName = <span class="built_in">ExtractDllName</span>(dllName);</span><br><span class="line">    <span class="comment">// 目标 DLL 名称kernel32.dll</span></span><br><span class="line">    <span class="type">wchar_t</span> a[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">L&#x27;k&#x27;</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="string">L&#x27;r&#x27;</span>;</span><br><span class="line">    a[<span class="number">3</span>] = <span class="string">L&#x27;n&#x27;</span>;</span><br><span class="line">    a[<span class="number">4</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">    a[<span class="number">5</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">    a[<span class="number">6</span>] = <span class="string">L&#x27;3&#x27;</span>;</span><br><span class="line">    a[<span class="number">7</span>] = <span class="string">L&#x27;2&#x27;</span>;</span><br><span class="line">    a[<span class="number">8</span>] = <span class="string">L&#x27;.&#x27;</span>;</span><br><span class="line">    a[<span class="number">9</span>] = <span class="string">L&#x27;d&#x27;</span>;</span><br><span class="line">    a[<span class="number">10</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">    a[<span class="number">11</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">    a[<span class="number">12</span>] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CompareDllName</span>(fileName, a)) &#123;</span><br></pre></td></tr></table></figure><pre><code>这里我定义的时候，直接用kernel32.dll定义是不可以的，这个指针会指向00，所以我用了一个一个赋值</code></pre><h3 id="ExtractDllName"><a href="#ExtractDllName" class="headerlink" title="ExtractDllName"></a>ExtractDllName</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取 DLL 名称的函数</span></span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* fileName = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">wchar_t</span>* temp = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并找到最后一个 &#x27;\\&#x27;，获取文件名部分</span></span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*temp == <span class="string">L&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            fileName = temp + <span class="number">1</span>;  <span class="comment">// 更新文件名的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到 &#x27;\\&#x27;，则认为整个字符串就是文件名</span></span><br><span class="line">    <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">        fileName = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">000001ED62E25 43 00 3A 00 5C 00 57 00 69 00 6E 00 64 00 6F 00 C.:.\.W.i.n.d.o. </span></span><br><span class="line"><span class="comment">000001ED62E25 77 00 73 00 5C 00 53 00 59 00 53 00 54 00 45 00 w.s.\.S.Y.S.T.E. </span></span><br><span class="line"><span class="comment">000001ED62E25 4D 00 33 00 32 00 5C 00 6E 00 74 00 64 00 6C 00 M.3.2.\.n.t.d.l. </span></span><br><span class="line"><span class="comment">000001ED62E25 6C 00 2E 00 64 00 6C 00 6C 00 00 00 AB AB AB AB l...d.l.l...«««« </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>这个函数的作用是获得dll文件名，因为这里加载的时候是绝对路径，所以需要去点前面的路径，只留下最后一个部分--模块名，例如下面注释的内容，就是其中加载过的一个例子，这个函数就是把前面的windows、system32去掉，而且一个\在字符中表示是`L&#39;\\&#39;`，所以在这个函数之后获得的就是dll名称</code></pre><h3 id="CompareDllName"><a href="#CompareDllName" class="headerlink" title="CompareDllName"></a>CompareDllName</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较两个 DLL 名称（大小写不敏感）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dllName[i] != <span class="string">L&#x27;\0&#x27;</span> || targetDllName[i] != <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 将两个字符都转换为小写进行比较</span></span><br><span class="line">        <span class="type">wchar_t</span> ch1 = (dllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; dllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? dllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : dllName[i];</span><br><span class="line">        <span class="type">wchar_t</span> ch2 = (targetDllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; targetDllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? targetDllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : targetDllName[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果字符不同，则返回比较结果</span></span><br><span class="line">        <span class="keyword">if</span> (ch1 != ch2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果字符串都没有结束且匹配到最后，返回 0 表示完全相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 如果两个字符串完全相同，返回 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>比较函数，先把他们都换成小写字母，这样就不用考虑大小写了</code></pre><h3 id="定位函数"><a href="#定位函数" class="headerlink" title="定位函数"></a>定位函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">CompareDllName</span>(fileName, a)) &#123;</span><br><span class="line">                <span class="comment">//分析PE文件找到导出表</span></span><br><span class="line">                HMODULE hKernel32 = (HMODULE)pEntry-&gt;DllBase;</span><br><span class="line">                PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hKernel32 + ((PIMAGE_DOS_HEADER)hKernel32)-&gt;e_lfanew);</span><br><span class="line">                <span class="comment">// 获取导出表的地址</span></span><br><span class="line">                PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hKernel32 + pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">                <span class="comment">// 获取导出表的各个信息</span></span><br><span class="line">                DWORD* pFunctionNames = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">                DWORD* pFunctionAddresses = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">                WORD* pFunctionOrdinals = (WORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历导出表，查找 LoadLibraryA</span></span><br><span class="line">                <span class="type">char</span> targetName1[<span class="number">50</span>] = <span class="string">&quot;LoadLibraryA&quot;</span>;</span><br><span class="line">                targetName1[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">4</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">5</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">6</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">7</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">9</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">10</span>] = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">11</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="comment">// 遍历导出表，查找 GetProcAddress</span></span><br><span class="line">                <span class="type">char</span> targetName2[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                targetName2[<span class="number">0</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">2</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">3</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">4</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">5</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">6</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">7</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">8</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">9</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">10</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">11</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">12</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">13</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">14</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> isP=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">                    <span class="type">char</span>* functionName = (<span class="type">char</span>*)((BYTE*)hKernel32 + pFunctionNames[i]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName1) )&#123;  </span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pLoadLibraryA = (LOADLIBRARYA)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName2)) &#123;  </span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pGetProcAddress = (GETPROCADDR)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isP == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到后退出</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>从模块基地址中提取模块句柄，然后分析PE文件导出表获取函数名，对比获得函数在当前进程中的地址</p><h3 id="真正的修复导入表"><a href="#真正的修复导入表" class="headerlink" title="真正的修复导入表"></a>真正的修复导入表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line"><span class="comment">//这个是IID的指针</span></span><br><span class="line"><span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> DLLname[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 定义一个存储 DLL 名称的缓冲区</span></span><br><span class="line">        <span class="type">char</span>* pDLLName = (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc); <span class="comment">// 获取 DLL 名称的地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动将名称拷贝到 DLLname 缓冲区</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pDLLName[i] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">// 遇到字符串结束符时停止</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            DLLname[i] = pDLLName[i]; <span class="comment">// 拷贝字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        DLLname[<span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保缓冲区以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"></span><br><span class="line">        HMODULE hProcess = <span class="built_in">pLoadLibraryA</span>(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">        <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        PIMAGE_THUNK_DATA64 pINT = (PIMAGE_THUNK_DATA64)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">        PIMAGE_THUNK_DATA64 pIAT = (PIMAGE_THUNK_DATA64)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">        <span class="keyword">while</span> ((ULONG_PTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u<span class="number">1.</span>AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">            <span class="keyword">if</span> (pINT-&gt;u<span class="number">1.</span>AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">            &#123;</span><br><span class="line">                pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, (LPCSTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">            &#125;</span><br><span class="line">            pINT++;</span><br><span class="line">            pIAT++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过LoadLibrarA和GetProcAddress函数修复导入表</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">PIMAGE_NT_HEADERS pNT = (PIMAGE_NT_HEADERS)(pAlloc + pDOSheader-&gt;e_lfanew);</span><br><span class="line">FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNT-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line"><span class="built_in">EOP</span>();</span><br></pre></td></tr></table></figure><p>结束</p><h1 id="源码2"><a href="#源码2" class="headerlink" title="源码2"></a>源码2</h1><p>没啥区别，先扩展到节区表，再用函数，再创建线程，这样做的好处就是不需要再算文件偏移，并且开辟空间的时候更小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">RVAtoFileOffset</span><span class="params">(DWORD rva, PIMAGE_NT_HEADERS pNtHeaders, PIMAGE_SECTION_HEADER pSec)</span></span>;</span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span></span>;</span><br><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span></span>;</span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">MainInject</span><span class="params">(DWORD dwTargetPid, <span class="type">char</span>* Dllname)</span></span>;</span><br><span class="line"><span class="function">PBYTE <span class="title">fexPE</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* pDll)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先定义需要注入的dll与目标进程的名字</span></span><br><span class="line"><span class="comment">//wchar_t szProcName[MAX_PATH] = L&quot;cs2.exe&quot;;</span></span><br><span class="line"><span class="type">wchar_t</span> szProcName[MAX_PATH] = <span class="string">L&quot;pta.exe&quot;</span>;</span><br><span class="line"><span class="type">char</span> Dllname[MAX_PATH] = <span class="string">&quot;D:\\study\\VStudio\\craft\\x64\\Debug\\Dll1.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找获得目标进程的id</span></span><br><span class="line">DWORD dwPid = <span class="built_in">ProcesstoPid</span>(szProcName);</span><br><span class="line"><span class="comment">//写入dll文件,这里思考一下，传入的参数都是什么呢？</span></span><br><span class="line"><span class="comment">//因为在这个函数里，我们要做的是将dll文件写入，并且用其中的函数</span></span><br><span class="line"><span class="comment">//dll中的API将会作为参数出现，所以传入的是进程id和dll函数目录</span></span><br><span class="line">DWORD result = <span class="built_in">MainInject</span>(dwPid, Dllname);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span> <span class="comment">//查找指定进程的PID(Process ID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hProcessSnap = <span class="literal">NULL</span>;</span><br><span class="line">DWORD ProcessId = <span class="number">0</span>;</span><br><span class="line">PROCESSENTRY32 pe32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">//打开进程快照</span></span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == (HANDLE)<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateToolhelp32Snapshot() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pe<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32)) <span class="comment">//开始枚举进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">wcscmp</span>(Processname, pe<span class="number">32.</span>szExeFile)) <span class="comment">//判断是否和提供的进程名相等，是，返回进程的ID</span></span><br><span class="line">&#123;</span><br><span class="line">ProcessId = pe<span class="number">32.</span>th32ProcessID;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32)); <span class="comment">//继续枚举进程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Process32First() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ProcessId) <span class="built_in">printf</span>(<span class="string">&quot;no find&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;[+] target id is %d&quot;</span>, ProcessId);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap); <span class="comment">//关闭系统进程快照的句柄</span></span><br><span class="line"><span class="keyword">return</span> ProcessId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数通过分析PE文件头来尝试获取句柄</span></span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span> </span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDosHeader-&gt;e_lfanew);</span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNtHeaders + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"></span><br><span class="line">DWORD exportDirRVA = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">DWORD exportDirSize = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].Size;</span><br><span class="line"></span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)pBuf + exportDirRVA);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析导出表，这里同理都是RVA</span></span><br><span class="line">DWORD* pRNames = (DWORD*)(pBuf + pExportDir-&gt;AddressOfNames);</span><br><span class="line">DWORD* pRFunctions = (DWORD*)(pBuf + pExportDir-&gt;AddressOfFunctions);</span><br><span class="line">WORD* pRNameOrdinals = (WORD*)(pBuf + pExportDir-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历查找目标函数</span></span><br><span class="line">DWORD funcRVA = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDir-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">DWORD functionNameRVA = pRNames[i];</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* pName = (<span class="type">char</span>*)((BYTE*)pBuf + functionNameRVA);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, funcName) == <span class="number">0</span>) &#123;</span><br><span class="line">funcRVA = pRFunctions[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (funcRVA == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Function %s not found.&quot;</span>, funcName);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPVOID remoteFuncAddr = (LPBYTE)pDll + funcRVA;</span><br><span class="line"><span class="keyword">return</span> remoteFuncAddr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PBYTE <span class="title">fexPE</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* pDll)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pDll;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line">PIMAGE_SECTION_HEADER pSection = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line">PBYTE PALLOC = (PBYTE)<span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PALLOC == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (pDOSheader-&gt;e_magic != IMAGE_DOS_SIGNATURE || pNTheader-&gt;Signature != IMAGE_NT_SIGNATURE) <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">// 无效的头，直接退出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ZeroMemory</span>(PALLOC, ImageSize);</span><br><span class="line"><span class="built_in">CopyMemory</span>(PALLOC, pDll, pNTheader-&gt;OptionalHeader.SizeOfHeaders);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制节区表</span></span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">pSec++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pDll + pSec-&gt;PointerToRawData);<span class="comment">//chSrcMem =节区的文件偏移地址</span></span><br><span class="line"><span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)PALLOC + pSec-&gt;VirtualAddress);<span class="comment">//chDestMem=节区的RVA地址</span></span><br><span class="line">DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;<span class="comment">//文件大小</span></span><br><span class="line"><span class="built_in">RtlCopyMemory</span>(chDestMem, chSrcMem, dwSizeOfRawData);                        <span class="comment">//复制过程</span></span><br><span class="line">pSec++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PALLOC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">MainInject</span><span class="params">(DWORD dwTargetPid, <span class="type">char</span>* Dllname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//与普通dll注入一样，首先要做的是获取句柄</span></span><br><span class="line">HANDLE hProc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">hProc = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwTargetPid);</span><br><span class="line"><span class="keyword">if</span> (!hProc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess Failed.&quot;</span>);</span><br><span class="line">DWORD dwError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess failed. Error code: %d\n&quot;</span>, dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有了句柄就可以创建空间然后写入了，这里的写入我参考的是PE加载器中</span></span><br><span class="line"><span class="comment">//ReadFileA与创建空间的方法，其中相当于是在目标进程空间中创造一个&quot;类磁盘&quot;空间</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFileA</span>(Dllname,</span><br><span class="line">GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line"><span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateFileA failed.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD FileSize = <span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line">LPDWORD SizeToRead = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//本地暂存</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[FileSize];</span><br><span class="line"><span class="built_in">ZeroMemory</span>(pBuf, FileSize);</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">ReadFile</span>(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 文件读取失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">PBYTE PAlloc = <span class="built_in">fexPE</span>(pBuf);<span class="comment">//完成节区赋值</span></span><br><span class="line">PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)PAlloc;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(PAlloc + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line">DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line">PIMAGE_SECTION_HEADER pSection = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"></span><br><span class="line">LPVOID pDll = <span class="built_in">VirtualAllocEx</span>(hProc, <span class="literal">NULL</span>, ImageSize + <span class="number">1</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 内存分配失败, 错误代码: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清零目标进程内存</span></span><br><span class="line">SIZE_T sizeToZero = ImageSize; <span class="comment">// 需要清零的字节数</span></span><br><span class="line">BYTE* zeroBuffer = (BYTE*)<span class="built_in">calloc</span>(sizeToZero, <span class="number">1</span>); <span class="comment">// 创建一个全零的缓冲区</span></span><br><span class="line"><span class="keyword">if</span> (zeroBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to allocate zero buffer.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入全零到目标内存</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, zeroBuffer, sizeToZero, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">DWORD errorCode = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WriteProcessMemory failed with error code: %lu\n&quot;</span>, errorCode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(zeroBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将dll文件写入进去</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, PAlloc, ImageSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来的活是找dll文件中相当于loadlibrary函数的自写函数Reflectload</span></span><br><span class="line"><span class="comment">//注意前文开辟的&quot;类磁盘&quot;空间中的pDll</span></span><br><span class="line"><span class="comment">// 假设 ReflectLoader 是目标函数名</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* reflectFuncName = <span class="string">&quot;ReflectLoader&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ReflectLoader 在目标进程内存中的地址</span></span><br><span class="line">LPVOID pReflectLoader = <span class="built_in">GetRemoteReflectLoad</span>(pDll, reflectFuncName, PAlloc);</span><br><span class="line"><span class="keyword">if</span> (!pReflectLoader) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] Failed to find ReflectLoader.\n&quot;</span>);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 函数 address:%p&quot;</span>, pReflectLoader);</span><br><span class="line"><span class="comment">// 调用 ReflectLoader 函数</span></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(</span><br><span class="line">hProc,                       <span class="comment">// 目标进程句柄</span></span><br><span class="line"><span class="literal">NULL</span>,                        <span class="comment">// 默认安全属性</span></span><br><span class="line"><span class="number">0</span>,                           <span class="comment">// 默认堆栈大小</span></span><br><span class="line">(LPTHREAD_START_ROUTINE)pReflectLoader, <span class="comment">// ReflectLoader 地址</span></span><br><span class="line">pDll,                        <span class="comment">// 参数：DLL 的基址</span></span><br><span class="line"><span class="number">0</span>,                           <span class="comment">// 默认创建标志</span></span><br><span class="line"><span class="literal">NULL</span>                         <span class="comment">// 不需要线程 ID</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateRemoteThread failed: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] ReflectLoader executed successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待线程执行完成</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span>;</span><br><span class="line"><span class="comment">// DLL入口点函数</span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹窗代码</span></span><br><span class="line">    <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;哇塞！！你成功啦！！！&quot;</span>, <span class="string">L&quot;注入程序检测中...&quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> processName[MAX_PATH] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 存储进程路径的缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前进程的可执行文件路径</span></span><br><span class="line">    DWORD length = <span class="built_in">GetModuleFileNameA</span>(<span class="literal">NULL</span>, processName, MAX_PATH);</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, processName, <span class="string">&quot;当前进程路径: &quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">99999999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义的宽字符转普通字符的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)(*src + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>));  <span class="comment">// 转换大写字符为小写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;a&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留小写字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;0&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留数字字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *dest = <span class="string">&#x27;?&#x27;</span>;  <span class="comment">// 对于其他字符，可以选择替代字符，例如 &#x27;？&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        dest++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 确保目标字符串以 null 结尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*str1 != *str2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回差值</span></span><br><span class="line">        &#125;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 两个字符串完全匹配时返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较两个 DLL 名称（大小写不敏感）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dllName[i] != <span class="string">L&#x27;\0&#x27;</span> || targetDllName[i] != <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 将两个字符都转换为小写进行比较</span></span><br><span class="line">        <span class="type">wchar_t</span> ch1 = (dllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; dllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? dllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : dllName[i];</span><br><span class="line">        <span class="type">wchar_t</span> ch2 = (targetDllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; targetDllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? targetDllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : targetDllName[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果字符不同，则返回比较结果</span></span><br><span class="line">        <span class="keyword">if</span> (ch1 != ch2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果字符串都没有结束且匹配到最后，返回 0 表示完全相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 如果两个字符串完全相同，返回 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取 DLL 名称的函数</span></span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* fileName = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">wchar_t</span>* temp = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并找到最后一个 &#x27;\\&#x27;，获取文件名部分</span></span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*temp == <span class="string">L&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            fileName = temp + <span class="number">1</span>;  <span class="comment">// 更新文件名的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到 &#x27;\\&#x27;，则认为整个字符串就是文件名</span></span><br><span class="line">    <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">        fileName = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pDll;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line">    PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pDll);</span><br><span class="line">    <span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line">    <span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].Size;<span class="comment">//重定位表的大小也在NT结构中 </span></span><br><span class="line">    <span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">            <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">                WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">                <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    differ = *((ULONG_PTR*)(offset + pBaseReloc-&gt;VirtualAddress + pDll)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                    ULONG_PTR p = (ULONG_PTR)pDll + differ;</span><br><span class="line">                    <span class="type">char</span>* tagetaddr = (<span class="type">char</span>*)(ULONG_PTR)pDll + offset + pBaseReloc-&gt;VirtualAddress;</span><br><span class="line">                    <span class="type">char</span>* fromeaddr = (<span class="type">char</span>*)p;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">4</span>;c++) &#123;</span><br><span class="line">                        tagetaddr[c] = fromeaddr[c];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入表的处理</span></span><br><span class="line">    <span class="comment">//因为导入表还没有修复，所以里面的API大部分都是无法使用的，可避免的我都去避免了</span></span><br><span class="line">    <span class="comment">// 但是是在无法避免的如，LoadLibrary函数无法找到，就需要通过</span></span><br><span class="line">    <span class="comment">// TEB和PEB的帮助找到了</span></span><br><span class="line">    <span class="comment">//GetProcAddress的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* GETPROCADDR)</span><span class="params">(HMODULE, LPCSTR)</span></span>;</span><br><span class="line">    <span class="comment">//LoadLibrary的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* LOADLIBRARYA)</span><span class="params">(LPCSTR)</span></span>;</span><br><span class="line"></span><br><span class="line">    GETPROCADDR pGetProcAddress = <span class="literal">NULL</span>;</span><br><span class="line">    LOADLIBRARYA pLoadLibraryA = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到TEB的地址，通过TEB找到PEB</span></span><br><span class="line">    PTEB pTEB = (PTEB)__readgsqword(<span class="number">0x30</span>);</span><br><span class="line">    PPEB pPEB = pTEB-&gt;ProcessEnvironmentBlock;</span><br><span class="line">    <span class="comment">// 获取PEB.Ldr</span></span><br><span class="line">    PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，找到 kernel32.dll</span></span><br><span class="line">    PLIST_ENTRY pListHead = &amp;pLdr-&gt;InMemoryOrderModuleList;</span><br><span class="line">    PLIST_ENTRY pCurrentEntry = pListHead-&gt;Flink;</span><br><span class="line">    <span class="keyword">while</span> (pCurrentEntry &amp;&amp; pCurrentEntry != pListHead)</span><br><span class="line">    &#123;</span><br><span class="line">        PLDR_DATA_TABLE_ENTRY pEntry = <span class="built_in">CONTAINING_RECORD</span>(pCurrentEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br><span class="line">        <span class="keyword">if</span> (pEntry &amp;&amp; pEntry-&gt;FullDllName.Buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">wchar_t</span>* dllName = pEntry-&gt;FullDllName.Buffer;</span><br><span class="line">            <span class="comment">// 提取 DLL 名称</span></span><br><span class="line">            <span class="type">wchar_t</span>* fileName = <span class="built_in">ExtractDllName</span>(dllName);</span><br><span class="line">            <span class="comment">// 目标 DLL 名称kernel32.dll</span></span><br><span class="line">            <span class="type">wchar_t</span> a[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            a[<span class="number">0</span>] = <span class="string">L&#x27;k&#x27;</span>;</span><br><span class="line">            a[<span class="number">1</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">2</span>] = <span class="string">L&#x27;r&#x27;</span>;</span><br><span class="line">            a[<span class="number">3</span>] = <span class="string">L&#x27;n&#x27;</span>;</span><br><span class="line">            a[<span class="number">4</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">5</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">6</span>] = <span class="string">L&#x27;3&#x27;</span>;</span><br><span class="line">            a[<span class="number">7</span>] = <span class="string">L&#x27;2&#x27;</span>;</span><br><span class="line">            a[<span class="number">8</span>] = <span class="string">L&#x27;.&#x27;</span>;</span><br><span class="line">            a[<span class="number">9</span>] = <span class="string">L&#x27;d&#x27;</span>;</span><br><span class="line">            a[<span class="number">10</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">11</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">12</span>] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CompareDllName</span>(fileName, a)) &#123;</span><br><span class="line">                <span class="comment">//分析PE文件找到导出表</span></span><br><span class="line">                HMODULE hKernel32 = (HMODULE)pEntry-&gt;DllBase;</span><br><span class="line">                PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hKernel32 + ((PIMAGE_DOS_HEADER)hKernel32)-&gt;e_lfanew);</span><br><span class="line">                <span class="comment">// 获取导出表的地址</span></span><br><span class="line">                PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hKernel32 + pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">                <span class="comment">// 获取导出表的各个信息</span></span><br><span class="line">                DWORD* pFunctionNames = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">                DWORD* pFunctionAddresses = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">                WORD* pFunctionOrdinals = (WORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历导出表，查找 LoadLibraryA</span></span><br><span class="line">                <span class="type">char</span> targetName1[<span class="number">50</span>] = <span class="string">&quot;LoadLibraryA&quot;</span>;</span><br><span class="line">                targetName1[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">4</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">5</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">6</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">7</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">9</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">10</span>] = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">11</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="comment">// 遍历导出表，查找 GetProcAddress</span></span><br><span class="line">                <span class="type">char</span> targetName2[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                targetName2[<span class="number">0</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">2</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">3</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">4</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">5</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">6</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">7</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">8</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">9</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">10</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">11</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">12</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">13</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">14</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> isP=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">                    <span class="type">char</span>* functionName = (<span class="type">char</span>*)((BYTE*)hKernel32 + pFunctionNames[i]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName1) )&#123;  </span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        pLoadLibraryA = (LOADLIBRARYA)((BYTE*)hKernel32 + pFunctionAddresses[pFunctionOrdinals[i]]);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName2)) &#123;  </span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        pGetProcAddress = (GETPROCADDR)((BYTE*)hKernel32 + pFunctionAddresses[pFunctionOrdinals[i]]);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isP == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到后退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pCurrentEntry = pCurrentEntry-&gt;Flink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pLoadLibraryA &amp;&amp; !pGetProcAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> foece[] = <span class="string">&quot;无法获取 LoadLibraryA 地址，请检查目标进程模块&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> sucsess[] = <span class="string">&quot;sucsess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pDll);</span><br><span class="line">    <span class="comment">//这个是IID的指针</span></span><br><span class="line">    <span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> DLLname[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 定义一个存储 DLL 名称的缓冲区</span></span><br><span class="line">            <span class="type">char</span>* pDLLName = (<span class="type">char</span>*)(pImport-&gt;Name + pDll); <span class="comment">// 获取 DLL 名称的地址</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动将名称拷贝到 DLLname 缓冲区</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pDLLName[i] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">// 遇到字符串结束符时停止</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                DLLname[i] = pDLLName[i]; <span class="comment">// 拷贝字符</span></span><br><span class="line">            &#125;</span><br><span class="line">            DLLname[<span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保缓冲区以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"></span><br><span class="line">            HMODULE hProcess = <span class="built_in">pLoadLibraryA</span>(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">            <span class="keyword">if</span> (!hProcess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            PIMAGE_THUNK_DATA64 pINT = (PIMAGE_THUNK_DATA64)(pImport-&gt;OriginalFirstThunk + pDll);</span><br><span class="line">            PIMAGE_THUNK_DATA64 pIAT = (PIMAGE_THUNK_DATA64)(pImport-&gt;FirstThunk + pDll);</span><br><span class="line">            <span class="keyword">while</span> ((ULONG_PTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u<span class="number">1.</span>AddressOfData + pDll);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u<span class="number">1.</span>AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, (LPCSTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">            pImport++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNT = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew);</span><br><span class="line">    FARPROC EOP = (FARPROC)((LPBYTE)pDll + pNT-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">    <span class="built_in">EOP</span>();</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;h2 id=&quot;普通注入&quot;&gt;&lt;a href=&quot;#普通注入&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="re" scheme="http://l1pmoluy.github.io/categories/re/"/>
    
    
    <category term="study" scheme="http://l1pmoluy.github.io/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>PEloader</title>
    <link href="http://l1pmoluy.github.io/2024/12/05/PEloader/"/>
    <id>http://l1pmoluy.github.io/2024/12/05/PEloader/</id>
    <published>2024-12-05T13:23:37.000Z</published>
    <updated>2025-03-20T11:49:17.258Z</updated>
    
    <content type="html"><![CDATA[<p>结合了前文PE文件格式的知识就可以做出一个简易的PE加载器（就是模拟了启动.exe这个过程）</p><p>源码引用师傅的</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>首先要打开磁盘文件，可以开辟一处空间，然后模拟磁盘映射到内存的过程，其实大部分就是复制过去就可以，DOS头和NT头都没什么区别，节区表就是得去要根据具体的对齐值来复制对应的地址，最后更改一下重定位表和IAT表就好</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>经过我九成的努力，和师傅九十成的作品，拼接而成嘿嘿</p><p>这里不填充字，就会被大量数字填充可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hFile = CreateFileA(<span class="string">&quot;D:\\study\\ctf\\2024SWPUCTF\\hua.exe&quot;</span>,</span><br><span class="line">        GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">        FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line">        <span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">        OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">        FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line">        <span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">    );</span><br><span class="line">    DWORD FileSize = GetFileSize(hFile, <span class="literal">NULL</span>);<span class="comment">//.exe磁盘文件大小</span></span><br><span class="line">    LPDWORD SizeToRead = <span class="number">0</span>;                     <span class="comment">//存储实际读取的字节数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟&quot;类磁盘&quot;空间</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* pBuf = new <span class="type">unsigned</span> <span class="type">char</span>[FileSize];        <span class="comment">//申请一块和文件大小相同的新内存</span></span><br><span class="line">    ZeroMemory(pBuf, FileSize);        <span class="comment">//将这块内存用0填充</span></span><br><span class="line">    <span class="comment">//读取磁盘文件</span></span><br><span class="line">    <span class="type">int</span> i = ReadFile(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pBuf;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">    PIMAGE_NT_HEADERS32 pNTheader = (PIMAGE_NT_HEADERS32)(pBuf + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">    DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">    PBYTE pAlloc = (PBYTE)VirtualAlloc(<span class="literal">NULL</span>, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Dump Error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ZeroMemory(pAlloc, ImageSize);                              <span class="comment">//把申请到的空间先用0填充</span></span><br><span class="line">    CopyMemory(pAlloc, pBuf, pNTheader-&gt;OptionalHeader.SizeOfHeaders);<span class="comment">//DOS和NT部分复制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//节区表的开始</span></span><br><span class="line">    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="keyword">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">    <span class="comment">//节区表指针，节区表紧随NT部分后，所以通过NT结构指针+NT结构大小的方式来获得节区表起始位置</span></span><br><span class="line">    DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;    <span class="comment">//NT部分规定了节区表的数目</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果当前节区表的数据为空，复制下一个节区表的数据</span></span><br><span class="line">        <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">            pSec++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pBuf + pSec-&gt;PointerToRawData);<span class="comment">//chSrcMem =节区的文件偏移地址</span></span><br><span class="line">        <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pAlloc + pSec-&gt;VirtualAddress);<span class="comment">//chDestMem=节区的RVA地址</span></span><br><span class="line">        DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;<span class="comment">//文件大小</span></span><br><span class="line">        RtlCopyMemory(chDestMem, chSrcMem, dwSizeOfRawData);                        <span class="comment">//复制过程</span></span><br><span class="line">        pSec++;                                                                     <span class="comment">//结构指针++就是下一个结构</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//杜哥部分登场</span></span><br><span class="line">    <span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">    PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line">    <span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size;<span class="comment">//重定位表的大小也在NT结构中</span></span><br><span class="line">    <span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">            <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">                WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">                <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    differ = *((DWORD*)(offset + (pBaseReloc-&gt;VirtualAddress) + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                    <span class="type">int</span> p = (DWORD)pAlloc + differ;</span><br><span class="line">                    memmove(pAlloc + offset + pBaseReloc-&gt;VirtualAddress, &amp;p, <span class="number">4</span>);<span class="comment">//把理论加载地址改为实际加载地址</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入表的处理</span></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//这个是IID的指针</span></span><br><span class="line">    <span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> DLLname[<span class="number">50</span>];</span><br><span class="line">            <span class="built_in">strncpy</span>(DLLname, (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc), <span class="number">49</span>);  <span class="comment">//获得DLL的名称</span></span><br><span class="line">            HMODULE hProcess = LoadLibraryA(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">            <span class="keyword">if</span> (!hProcess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> err[<span class="number">100</span>];</span><br><span class="line">                <span class="built_in">sprintf</span>(err, <span class="string">&quot;未找到%s&quot;</span>, DLLname);</span><br><span class="line">                MessageBoxA(<span class="literal">NULL</span>, err, <span class="string">&quot;Error&quot;</span>, MB_OKCANCEL);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            PIMAGE_THUNK_DATA32 pINT = (PIMAGE_THUNK_DATA32)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">            PIMAGE_THUNK_DATA32 pIAT = (PIMAGE_THUNK_DATA32)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">            <span class="keyword">while</span> ((DWORD)(pINT-&gt;u1.AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u1.AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u1.AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, (LPCSTR)(pINT-&gt;u1.AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">            pImport++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">    FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNTheader-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">    EOP();</span><br><span class="line">    <span class="built_in">free</span>(pBuf);</span><br><span class="line">    <span class="built_in">free</span>(pAlloc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="获得文件句柄以及大小"><a href="#获得文件句柄以及大小" class="headerlink" title="获得文件句柄以及大小"></a>获得文件句柄以及大小</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hFile = CreateFileA(<span class="string">&quot;D:\\study\\ctf\\2024SWPUCTF\\hua.exe&quot;</span>,</span><br><span class="line">    GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">    FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line">    <span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">    OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">    FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line">    <span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">);</span><br><span class="line">DWORD FileSize = GetFileSize(hFile, <span class="literal">NULL</span>);<span class="comment">//.exe磁盘文件大小</span></span><br><span class="line">LPDWORD SizeToRead = <span class="number">0</span>;                     <span class="comment">//存储实际读取的字节数</span></span><br></pre></td></tr></table></figure><h2 id="复现磁盘文件"><a href="#复现磁盘文件" class="headerlink" title="复现磁盘文件"></a>复现磁盘文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开辟&quot;类磁盘&quot;空间</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = new <span class="type">unsigned</span> <span class="type">char</span>[FileSize];        <span class="comment">//申请一块和文件大小相同的新内存</span></span><br><span class="line">ZeroMemory(pBuf, FileSize);        <span class="comment">//将这块内存用0填充</span></span><br><span class="line"><span class="comment">//读取磁盘文件</span></span><br><span class="line"><span class="type">int</span> i = ReadFile(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位磁盘中的DOS头和NT头"><a href="#定位磁盘中的DOS头和NT头" class="headerlink" title="定位磁盘中的DOS头和NT头"></a>定位磁盘中的DOS头和NT头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pBuf;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">PIMAGE_NT_HEADERS32 pNTheader = (PIMAGE_NT_HEADERS32)(pBuf + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br></pre></td></tr></table></figure><h2 id="复现内存空间"><a href="#复现内存空间" class="headerlink" title="复现内存空间"></a>复现内存空间</h2><p>在<strong>IMAGE_OPTIONAL_HEADER</strong>里的<strong>SizeOfImage</strong>中存储有PE文件在内存中映射大小，可以根据这个申请空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">DWORDImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">PBYTE pAlloc = (PBYTE)VirtualAlloc(<span class="literal">NULL</span>, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Dump Error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ZeroMemory(pAlloc, ImageSize);                              <span class="comment">//把申请到的空间先用0填充</span></span><br><span class="line">CopyMemory(pAlloc, pBuf, pNTheader-&gt;OptionalHeader.SizeOfHeaders);<span class="comment">//DOS和NT部分复制</span></span><br></pre></td></tr></table></figure><h2 id="节区表复制"><a href="#节区表复制" class="headerlink" title="节区表复制"></a>节区表复制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节区表的开始</span></span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="keyword">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"><span class="comment">//节区表指针，节区表紧随NT部分后，所以通过NT结构指针+NT结构大小的方式来获得节区表起始位置</span></span><br><span class="line">DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;    <span class="comment">//NT部分规定了节区表的数目</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果当前节区表的数据为空，复制下一个节区表的数据</span></span><br><span class="line">    <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">        pSec++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pBuf + pSec-&gt;PointerToRawData);<span class="comment">//chSrcMem =节区的文件偏移地址</span></span><br><span class="line">    <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pAlloc + pSec-&gt;VirtualAddress);<span class="comment">//chDestMem=节区的RVA地址</span></span><br><span class="line">    DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;<span class="comment">//文件大小</span></span><br><span class="line">    RtlCopyMemory(chDestMem, chSrcMem, dwSizeOfRawData);                        <span class="comment">//复制过程</span></span><br><span class="line">    pSec++;                                                                     <span class="comment">//结构指针++就是下一个结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是pSec的定义类型是<strong>PIMAGE_SECTION_HEADER</strong>，这是结构的指针，所以后面的pSec++，直接是跳过到下一个结构了后面的CopyMemory参数部分说一下</p><p>:::success<br>VirtualAddress;          &#x2F;&#x2F; 节区的 RVA 地址</p><p>PointerToRawData;        &#x2F;&#x2F; 在文件中的偏移量</p><p>SizeOfRawData;           &#x2F;&#x2F; 在文件中对齐后的尺寸</p><p>:::</p><p>这两个是之前节区表的知识，所以这里传参的意图就很明显了，用文件偏移量索引pBuf，扩展到相对虚拟地址所在位置</p><h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//杜哥部分登场</span></span><br><span class="line"><span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress + pAlloc);</span><br><span class="line"><span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line"><span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size;<span class="comment">//重定位表的大小也在NT结构中</span></span><br><span class="line"><span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">        <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">            WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">            <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                differ = *((DWORD*)(offset + (pBaseReloc-&gt;VirtualAddress) + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                <span class="type">int</span> p = (DWORD)pAlloc + differ;</span><br><span class="line">                memmove(pAlloc + offset + pBaseReloc-&gt;VirtualAddress, &amp;p, <span class="number">4</span>);<span class="comment">//把理论加载地址改为实际加载地址</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">        pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要在回忆一下该结构的声明，不过好像书上的和现实有点不一样，下表是我稍微修改过的了</p><p>:::success<br><font style="color:rgb(51, 51, 51);">IMAGE_BASE_RELOCATION STRUCT</font></p><p><font style="color:rgb(51, 51, 51);">DWORD VirtualAddress; </font><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;这一组重定位数据的开始RVA，各重定向的地址必须加上这个RVA才是重定向的完整RVA</font><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">DWORD SizeOfBlock; </font><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;当前重定位结构的大小</font><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);"> IMAGE_BASE_RELOCATION ENDS</font></p><p><font style="color:rgb(51, 51, 51);">WORD TypeOffset[</font><font style="color:rgb(0, 128, 128);">1</font><font style="color:rgb(51, 51, 51);">]; </font><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;数组，分高4位和低12位，高4位代表重定位类型，低12位代表重定位地址</font></p><p><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;该地址与VirtualAddress相加，就得到需要修改数据的地址的指针</font></p><p>:::</p><h2 id="修复IAT表"><a href="#修复IAT表" class="headerlink" title="修复IAT表"></a>修复IAT表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入表的处理</span></span><br><span class="line">PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line"><span class="comment">//这个是IID的指针</span></span><br><span class="line"><span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> DLLname[<span class="number">50</span>];</span><br><span class="line">        <span class="built_in">strncpy</span>(DLLname, (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc), <span class="number">49</span>);  <span class="comment">//获得DLL的名称</span></span><br><span class="line">        HMODULE hProcess = LoadLibraryA(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">        <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> err[<span class="number">100</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(err, <span class="string">&quot;未找到%s&quot;</span>, DLLname);</span><br><span class="line">            MessageBoxA(<span class="literal">NULL</span>, err, <span class="string">&quot;Error&quot;</span>, MB_OKCANCEL);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PIMAGE_THUNK_DATA32 pINT = (PIMAGE_THUNK_DATA32)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">        PIMAGE_THUNK_DATA32 pIAT = (PIMAGE_THUNK_DATA32)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">        <span class="keyword">while</span> ((DWORD)(pINT-&gt;u1.AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u1.AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">            <span class="keyword">if</span> (pINT-&gt;u1.AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">            &#123;</span><br><span class="line">                pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, (LPCSTR)(pINT-&gt;u1.AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">            &#125;</span><br><span class="line">            pINT++;</span><br><span class="line">            pIAT++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IID结构的一些定义</p><p>:::success<br> Name;                               &#x2F;&#x2F;导入DLL文件名的地址RVA</p><p>:::</p><p>这里注意的就是<code>IMAGE_ORDINAL_FLAG32</code>，<code>IMAGE_ORDINAL_FLAG32</code> 是一个位掩码，通常值为 <code>0x80000000</code>。它用于标识是否存在序号信息，所以通过&amp;符号两个都是1才是1的特性来判断，<code>pINT-&gt;u1.AddressOfData</code>是什么</p><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNTheader-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">EOP();</span><br></pre></td></tr></table></figure><h2 id="清空缓存"><a href="#清空缓存" class="headerlink" title="清空缓存"></a>清空缓存</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(pBuf);</span><br><span class="line"><span class="built_in">free</span>(pAlloc);</span><br></pre></td></tr></table></figure><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="CreateFileA定义"><a href="#CreateFileA定义" class="headerlink" title="CreateFileA定义"></a>CreateFileA定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateFileA</span><span class="params">(</span></span><br><span class="line"><span class="params">    LPCSTR                lpFileName,           <span class="comment">// 文件路径名</span></span></span><br><span class="line"><span class="params">    DWORD                 dwDesiredAccess,      <span class="comment">// 访问模式</span></span></span><br><span class="line"><span class="params">    DWORD                 dwShareMode,          <span class="comment">// 共享模式</span></span></span><br><span class="line"><span class="params">    LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class="comment">// 安全描述符</span></span></span><br><span class="line"><span class="params">    DWORD                 dwCreationDisposition,<span class="comment">// 文件创建方式</span></span></span><br><span class="line"><span class="params">    DWORD                 dwFlagsAndAttributes, <span class="comment">// 文件属性</span></span></span><br><span class="line"><span class="params">    HANDLE                hTemplateFile         <span class="comment">// 模板文件句柄</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><p>:::success</p><h4 id="lpFileName-LPCSTR"><a href="#lpFileName-LPCSTR" class="headerlink" title="lpFileName (LPCSTR):"></a>lpFileName (LPCSTR):</h4><ul><li>指向文件的路径名，类型是 ANSI 字符串（<code>char*</code>）。可以是绝对路径或相对路径。</li></ul><h4 id="dwDesiredAccess-DWORD"><a href="#dwDesiredAccess-DWORD" class="headerlink" title="dwDesiredAccess (DWORD):"></a>dwDesiredAccess (DWORD):</h4><ul><li>指定请求的访问权限，如下：<ul><li><code>GENERIC_READ</code>：读取权限。</li><li><code>GENERIC_WRITE</code>：写入权限。</li><li><code>GENERIC_EXECUTE</code>：执行权限。</li><li><code>GENERIC_ALL</code>：所有权限。</li><li>可以按位组合多个访问权限。</li></ul></li></ul><h4 id="dwShareMode-DWORD"><a href="#dwShareMode-DWORD" class="headerlink" title="dwShareMode (DWORD):"></a>dwShareMode (DWORD):</h4><ul><li>指定文件共享模式。可以是以下组合：<ul><li><code>FILE_SHARE_READ</code>：允许其他进程读取文件。</li><li><code>FILE_SHARE_WRITE</code>：允许其他进程写入文件。</li><li><code>FILE_SHARE_DELETE</code>：允许其他进程删除文件。</li><li>如果不允许共享，可以使用 <code>0</code>。</li></ul></li></ul><h4 id="lpSecurityAttributes-LPSECURITY-ATTRIBUTES"><a href="#lpSecurityAttributes-LPSECURITY-ATTRIBUTES" class="headerlink" title="lpSecurityAttributes (LPSECURITY_ATTRIBUTES):"></a>lpSecurityAttributes (LPSECURITY_ATTRIBUTES):</h4><ul><li>指向 <code>SECURITY_ATTRIBUTES</code> 结构的指针，决定文件的安全性设置。如果不需要特定的安全性，可以传 <code>NULL</code>。</li></ul><h4 id="dwCreationDisposition-DWORD"><a href="#dwCreationDisposition-DWORD" class="headerlink" title="dwCreationDisposition (DWORD):"></a>dwCreationDisposition (DWORD):</h4><ul><li>文件创建方式。常见的选项有：<ul><li><code>CREATE_NEW</code>：如果文件已存在，则创建失败。</li><li><code>CREATE_ALWAYS</code>：无论文件是否存在，都创建一个新的文件，文件会被覆盖。</li><li><code>OPEN_EXISTING</code>：如果文件存在，则打开文件。如果文件不存在，操作会失败。</li><li><code>OPEN_ALWAYS</code>：如果文件存在，则打开文件。如果文件不存在，则创建文件。</li><li><code>TRUNCATE_EXISTING</code>：如果文件存在且可写，则将文件大小截断为 0。</li></ul></li></ul><h4 id="dwFlagsAndAttributes-DWORD"><a href="#dwFlagsAndAttributes-DWORD" class="headerlink" title="dwFlagsAndAttributes (DWORD):"></a>dwFlagsAndAttributes (DWORD):</h4><ul><li>文件的属性，常见的属性有：<ul><li><code>FILE_ATTRIBUTE_NORMAL</code>：普通文件，没有特殊属性。</li><li><code>FILE_ATTRIBUTE_READONLY</code>：只读文件。</li><li><code>FILE_ATTRIBUTE_HIDDEN</code>：隐藏文件。</li><li><code>FILE_FLAG_RANDOM_ACCESS</code>：随机访问文件。</li><li><code>FILE_FLAG_WRITE_THROUGH</code>：数据直接写入磁盘，不使用缓存。</li></ul></li></ul><h4 id="hTemplateFile-HANDLE"><a href="#hTemplateFile-HANDLE" class="headerlink" title="hTemplateFile (HANDLE):"></a>hTemplateFile (HANDLE):</h4><ul><li>用于指定一个模板文件的句柄，通常为 <code>NULL</code>。这个参数一般用于创建文件时参考其他文件的属性。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果操作成功，返回一个 <strong>文件句柄</strong>，可以用于后续的文件操作（如读取、写入等）。</li><li>如果操作失败，返回 <code>**INVALID_HANDLE_VALUE**</code>，可以通过 <code>GetLastError</code> 函数获取详细的错误信息。</li></ul><p>:::</p><h3 id="强制插入两小点（"><a href="#强制插入两小点（" class="headerlink" title="强制插入两小点（"></a>强制插入两小点（</h3><h4 id="文件句柄的创建"><a href="#文件句柄的创建" class="headerlink" title="文件句柄的创建"></a>文件句柄的创建</h4><p> 当你调用 <code>CreateFileA</code> 成功时，操作系统会为文件分配一个句柄。这个句柄是与文件在磁盘中的位置无关的，它只是一个标识符，用于后续的文件操作。文件本身并没有被完全加载到内存中，除非你使用读取函数（如 <code>ReadFile</code>）来访问它。  </p><h4 id="文件句柄的本质"><a href="#文件句柄的本质" class="headerlink" title="文件句柄的本质"></a>文件句柄的本质</h4><p>文件句柄本身确实是一个<strong>虚拟的标识符</strong>，它并不是一个内存地址，而是操作系统内核分配给文件的一个索引。你可以把文件句柄看作是操作系统用来<strong>引用文件的标识符</strong>，你无法直接看到这个句柄指向的内容，它是由操作系统管理的。</p><h2 id="GetFileSize定义"><a href="#GetFileSize定义" class="headerlink" title="GetFileSize定义"></a>GetFileSize定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DWORD <span class="title function_">GetFileSize</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE  hFile,        <span class="comment">// 文件的句柄</span></span></span><br><span class="line"><span class="params">  LPDWORD lpFileSizeHigh <span class="comment">// 如果文件大小大于 4GB, 存储高32位</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解析-1"><a href="#参数解析-1" class="headerlink" title="参数解析"></a>参数解析</h3><p>:::success</p><h4 id="hFile-HANDLE-："><a href="#hFile-HANDLE-：" class="headerlink" title="hFile (HANDLE)："></a>hFile (HANDLE)：</h4><ul><li>文件句柄，必须是通过 <code>CreateFile</code> 或其他文件打开函数获得的有效句柄。</li><li>如果 <code>hFile</code> 是无效的（例如 <code>INVALID_HANDLE_VALUE</code>），调用将失败。</li></ul><h4 id="lpFileSizeHigh-LPDWORD-："><a href="#lpFileSizeHigh-LPDWORD-：" class="headerlink" title="lpFileSizeHigh (LPDWORD)："></a>lpFileSizeHigh (LPDWORD)：</h4><ul><li>这是一个指向 <code>DWORD</code> 类型变量的指针，用来存储文件的高 32 位大小。Windows 文件系统中，文件大小是一个 64 位的数值，低 32 位由 <code>GetFileSize</code> 返回，高 32 位通过这个参数返回。</li><li>如果文件的大小不超过 4GB，<code>lpFileSizeHigh</code> 可以传入 <code>NULL</code>，此时函数只返回 32 位的文件大小。</li></ul><p>:::</p><h2 id="ReadFile定义"><a href="#ReadFile定义" class="headerlink" title="ReadFile定义"></a>ReadFile定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">ReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE       hFile,          <span class="comment">// 文件句柄</span></span></span><br><span class="line"><span class="params">  LPVOID       lpBuffer,       <span class="comment">// 数据缓冲区</span></span></span><br><span class="line"><span class="params">  DWORD        nNumberOfBytesToRead,  <span class="comment">// 要读取的字节数</span></span></span><br><span class="line"><span class="params">  LPDWORD      lpNumberOfBytesRead,  <span class="comment">// 实际读取的字节数</span></span></span><br><span class="line"><span class="params">  LPOVERLAPPED lpOverlapped    <span class="comment">// 异步操作时的重叠结构体</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解析-2"><a href="#参数解析-2" class="headerlink" title="参数解析"></a>参数解析</h3><p>:::success</p><ul><li><code>**hFile**</code>：</li><li><strong>类型</strong>：<code>HANDLE</code></li><li>这是一个文件句柄，用于指定要读取的文件或设备。文件句柄可以通过 <code>CreateFile</code> 或 <code>OpenFile</code> 等函数获取。</li><li><code>**lpBuffer**</code>：</li><li><strong>类型</strong>：<code>LPVOID</code>（指向缓冲区的指针）</li><li>这是一个指针，指向存储读取数据的缓冲区。函数将读取的数据存放在这个缓冲区中。</li><li><code>**nNumberOfBytesToRead**</code>：</li><li><strong>类型</strong>：<code>DWORD</code></li><li>这是一个无符号整数，指定从文件中要读取的字节数。通常这个值是一个常量，表示需要读取的字节数。如果文件内容不足此大小，<code>ReadFile</code> 会尽可能读取剩余内容。</li><li><code>**lpNumberOfBytesRead**</code>：</li><li><strong>类型</strong>：<code>LPDWORD</code></li><li>这是一个指向 <code>DWORD</code> 变量的指针。调用成功后，这个变量会包含实际读取的字节数。如果读取的字节数小于 <code>nNumberOfBytesToRead</code>，则表示文件已到达末尾。</li><li><code>**lpOverlapped**</code>：</li><li><strong>类型</strong>：<code>LPOVERLAPPED</code></li><li>这是一个指向 <code>OVERLAPPED</code> 结构的指针，用于支持异步操作。如果为 <code>NULL</code>，则表示同步操作。如果进行异步操作时，必须提供一个有效的 <code>OVERLAPPED</code> 结构，它包含操作完成的回调信息和操作状态。</li></ul><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><ul><li><strong>成功</strong>：如果函数成功执行，返回值为非零值（即 <code>TRUE</code>）。</li><li><strong>失败</strong>：如果函数失败，返回值为零（即 <code>FALSE</code>）。可以通过调用 <code>GetLastError</code> 来获取具体的错误代码。</li></ul><p>:::</p><h2 id="ZeroMemory"><a href="#ZeroMemory" class="headerlink" title="ZeroMemory"></a>ZeroMemory</h2><p>将传入第一个参数（指针）指向的部分中前第二个参数（字节大小）大小的部分清零</p><h2 id="CopyMemory"><a href="#CopyMemory" class="headerlink" title="CopyMemory"></a>CopyMemory</h2><p>将第二个参数（指针）的前第三个参数（字节大小）<strong>大小</strong>的部分<strong>copy</strong>到第一个参数（指针）指向的部分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;结合了前文PE文件格式的知识就可以做出一个简易的PE加载器（就是模拟了启动.exe这个过程）&lt;/p&gt;
&lt;p&gt;源码引用师傅的&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;首</summary>
      
    
    
    
    <category term="re" scheme="http://l1pmoluy.github.io/categories/re/"/>
    
    
    <category term="study" scheme="http://l1pmoluy.github.io/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>观PE文件格式有感——更直观的理解计算机</title>
    <link href="http://l1pmoluy.github.io/2024/12/01/%E8%A7%82PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%9C%89%E6%84%9F%E2%80%94%E2%80%94%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    <id>http://l1pmoluy.github.io/2024/12/01/%E8%A7%82PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%9C%89%E6%84%9F%E2%80%94%E2%80%94%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/</id>
    <published>2024-12-01T13:33:59.000Z</published>
    <updated>2025-03-20T11:49:18.079Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章均为新手小白学习过程中，突然有的个人感悟，如果有错误欢迎大师傅们指出</p><h1 id="计算机构造？"><a href="#计算机构造？" class="headerlink" title="计算机构造？"></a>计算机构造？</h1><p>在买电脑的时候我们经常能看到，什么i5，i7处理器，什么16+512，32+1T，这都是什么呢？</p><p>在我浅显的理解里，电脑可以大致分为：CPU，运行内存，内存和显示屏</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>首先说的是内存，很多人都知道，C、D盘是内存，那么为什么C、D盘叫磁盘，而且内存和运行内存又有什么区别呢？</p><p>看到PE文件，我突然想到了这个<strong>C,D盘</strong>为什么叫<strong>磁盘</strong>。其实外面买的那种u盘，<strong>和你电脑里看到的C,D磁盘没什么区别</strong>。简单来说就是说磁盘和电脑之间并不是紧密相连的，而只是相当于有一个<strong>u盘在你的电脑里</strong>，只不过它会自始至终的插在USB口中，而电脑真正运行的东西是<strong>CPU与运行内存</strong>，当你打开一个文件的时候，其实相当与是从U盘（磁盘），映射（拷贝）一份给<strong>运行内存</strong>，再将每一步要用到的东西传给<strong>CPU</strong>处理</p><p>那么既然知道了文件并<strong>不是在磁盘中打开运行</strong>的，是在<strong>运行内存</strong>中打开的，那么<strong>“打开”</strong>是什么呢？</p><p>打开便是映射，一个文件，他有一部分并不是可用的，我们知道，机器它是死的，编写程序的人知道，先走这个部分，再走那个部分，但机器怎么知道呢</p><p>于是便出现了PE文件格式，在文件中会有一部分信息来告诉机器，他应该怎么做，所以一个文件里并不是所有的内容都是需要用到的，所以在映射的时候，<strong>只会映射相对有用的部分（代码块、数据块等）</strong></p><h1 id="运行内存"><a href="#运行内存" class="headerlink" title="运行内存"></a>运行内存</h1><p>说到这里大家就明白了，运行内存的大小决定了什么呢，就是决定了你一次性可以打开多少个文件，运行内存足够大，内存中可以映射到运行内存的文件就足够多（打开的文件就足够多）</p><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><p>那么处理器（CPU）的作用，便是将运行内存中的文件按批次处理，相当于计算机的大脑，这里要注意，就像内存与运行内存一样，CPU与运行内存是分开的，是需要运行内存先通过线路传输数据到CPU中，再从CPU传输数据到运行内存中去的，至于一次可以传输多少处理多少，这就和多线程，或者CPU几代有关了，所以CPU的代数与线程数，可以相对反应的是这个电脑，它的“大脑“转的有多快，以及一次可以处理多少事情</p><h1 id="显示屏"><a href="#显示屏" class="headerlink" title="显示屏"></a>显示屏</h1><p>这个就没啥了，我就不过多说了，就是高刷和清晰度啥的区别了，唯一注意的就是显卡，也就是显示屏中的CPU，独立显卡，就是给你的显示屏也装个大脑，处理图像的时候更灵活，更不卡顿</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇文章均为新手小白学习过程中，突然有的个人感悟，如果有错误欢迎大师傅们指出&lt;/p&gt;
&lt;h1 id=&quot;计算机构造？&quot;&gt;&lt;a href=&quot;#计算机构造？&quot; class=&quot;headerlink&quot; title=&quot;计算机构造？&quot;&gt;&lt;/a&gt;计算机构造？&lt;/h1&gt;&lt;p&gt;在买电脑的时候我</summary>
      
    
    
    
    <category term="re" scheme="http://l1pmoluy.github.io/categories/re/"/>
    
    
    <category term="computer" scheme="http://l1pmoluy.github.io/tags/computer/"/>
    
  </entry>
  
</feed>
