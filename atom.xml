<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>l1pmoluy&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/50c928affb5661d50f3b72b81aa32150</icon>
  <subtitle>Dawing</subtitle>
  <link href="https://l1pmoluy.github.io/atom.xml" rel="self"/>
  
  <link href="https://l1pmoluy.github.io/"/>
  <updated>2025-03-26T08:10:10.101Z</updated>
  <id>https://l1pmoluy.github.io/</id>
  
  <author>
    <name>l1pmoluy</name>
    <email>1392181761@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;语雀&#39;</title>
    <link href="https://l1pmoluy.github.io/2025/03/26/%E8%AF%AD%E9%9B%80/"/>
    <id>https://l1pmoluy.github.io/2025/03/26/%E8%AF%AD%E9%9B%80/</id>
    <published>2025-03-26T08:08:05.000Z</published>
    <updated>2025-03-26T08:10:10.101Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/hututu-mknzl">l1pmoluy · 语雀</a>，我的语雀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/hututu-mknzl&quot;&gt;l1pmoluy · 语雀&lt;/a&gt;，我的语雀&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>&#39;main&#39;</title>
    <link href="https://l1pmoluy.github.io/2025/03/26/main/"/>
    <id>https://l1pmoluy.github.io/2025/03/26/main/</id>
    <published>2025-03-26T07:55:14.000Z</published>
    <updated>2025-03-26T07:58:50.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是在第一学期快结束补充的，我不断地思索，哪个文章可以作为逆向启程呢，是ida的熟悉流程？是遇到最简单题目的题解？是c语言的小知识？亦或是其他，但我总认为，这些不足以为我的逆向开一个好头，思来想去最后决定以main函数来作为逆向的启蒙</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>开始，也意味着程序的开始，一个用c语言写好了main的程序并不是直接从main开始的，而是start，start紧接着去调用很多函数，他最终的目的也是位main铺路</p><p>以一个最简单的程序为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hallo re&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>将这个程序生成的文件拖入ida</code></pre><h2 id="hello-re"><a href="#hello-re" class="headerlink" title="hello re"></a>hello re</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attributes: thunk</span></span><br><span class="line">__int64 <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> start_0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>反编译出的第一条是他，start，什么都没有，不过别急，点进去，连着点进去两个函数出现了第一个岔路</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140011E30</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    road1();</span><br><span class="line">    <span class="keyword">return</span> road2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这两个函数原本不叫这个，是我将其随意命名的，他在你的ida中可能会叫sub_地址，是ida给这个函数起的名字，选择road2点进去</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140011E50</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __int64 v1; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">char</span> v2; <span class="comment">// [rsp+20h] [rbp-48h]</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v3; <span class="comment">// [rsp+21h] [rbp-47h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Code; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">    <span class="type">void</span> (__fastcall **v5)(_QWORD, __int64, _QWORD); <span class="comment">// [rsp+30h] [rbp-38h]</span></span><br><span class="line">    _tls_callback_type *v6; <span class="comment">// [rsp+38h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_140011393(<span class="number">1</span>i64) )</span><br><span class="line">        sub_140011311(<span class="number">7</span>i64);</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = sub_140011325();</span><br><span class="line">    <span class="keyword">if</span> ( dword_14001D1F8 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        sub_140011311(<span class="number">7</span>i64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( dword_14001D1F8 )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dword_14001D1F8 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( j__initterm_e((_PIFV *)&amp;First, (_PIFV *)&amp;Last) )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">255</span>i64;</span><br><span class="line">        j__initterm((_PVFV *)&amp;qword_14001A000, (_PVFV *)&amp;qword_14001A220);</span><br><span class="line">        dword_14001D1F8 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_1400112FD(v3);</span><br><span class="line">    v5 = (<span class="type">void</span> (__fastcall **)(_QWORD, __int64, _QWORD))sub_140011299();</span><br><span class="line">    <span class="keyword">if</span> ( *v5 &amp;&amp; (<span class="type">unsigned</span> __int8)sub_14001114F(v5) )</span><br><span class="line">        (*v5)(<span class="number">0</span>i64, <span class="number">2</span>i64, <span class="number">0</span>i64);</span><br><span class="line">    v6 = (_tls_callback_type *)sub_1400112CB();</span><br><span class="line">    <span class="keyword">if</span> ( *v6 &amp;&amp; (<span class="type">unsigned</span> __int8)sub_14001114F(v6) )</span><br><span class="line">        j__register_thread_local_exe_atexit_callback(*v6);</span><br><span class="line">    Code = sub_1400120A0();</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_140011276() )</span><br><span class="line">        j_exit(Code);</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        j__cexit();</span><br><span class="line">    LOBYTE(v1) = <span class="number">1</span>;</span><br><span class="line">    sub_140011140(v1, <span class="number">0</span>i64);</span><br><span class="line">    <span class="keyword">return</span> Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到最后return Code了吗，记得一个main函数的基本框架有return 0吗，当时说0是返回值，返回程序是否正确运行，那么如果想要返回值0，返回到start那里，这一步返回的Code里面的值就应该是return的0，我们要去看Code在这个程序里那里被定义了——sub_1400120A0，在37行，所以说这个函数往里延伸的就是main函数，点进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1400120A0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+20h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> **initial_narrow_environment; <span class="comment">// [rsp+28h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> **v3; <span class="comment">// [rsp+30h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  initial_narrow_environment = j__get_initial_narrow_environment();</span><br><span class="line">  v3 = *j___p___argv();</span><br><span class="line">  v1 = *j___p___argc();</span><br><span class="line">  <span class="keyword">return</span> sub_14001126C(v1, v3, initial_narrow_environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是刚刚的原理，return返回的要是main里面返回的0，所以点开return后跟着的函数，一路到底</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_14001136B(&amp;unk_140022008);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hallo re&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>获得了主函数，如果到这里不是很明白的话，从最后一段代码的return 0，回到最初的start，观察一下，0是不是一直作为返回值被返回</code></pre><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>逆向就是这样，总会有很多东西混淆你，谨记自己的初心，静下来，慢慢观察，最终你也可以从空白的的<strong>start</strong>抵达目标<strong>main</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章是在第一学期快结束补充的，我不断地思索，哪个文章可以作为逆向启程呢，是ida的熟悉流程？是遇到最简单题目的题解？是c语言的小知识？亦</summary>
      
    
    
    
    
  </entry>
  
</feed>
