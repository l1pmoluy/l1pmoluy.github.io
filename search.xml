<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PEloader</title>
      <link href="/2024/12/05/PEloader/"/>
      <url>/2024/12/05/PEloader/</url>
      
        <content type="html"><![CDATA[<p>结合了前文PE文件格式的知识就可以做出一个简易的PE加载器（就是模拟了启动.exe这个过程）</p><p>源码引用师傅的</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>首先要打开磁盘文件，可以开辟一处空间，然后模拟磁盘映射到内存的过程，其实大部分就是复制过去就可以，DOS头和NT头都没什么区别，节区表就是得去要根据具体的对齐值来复制对应的地址，最后更改一下重定位表和IAT表就好</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>经过我九成的努力，和师傅九十成的作品，拼接而成嘿嘿</p><p>这里不填充字，就会被大量数字填充可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶可恶</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hFile = CreateFileA(<span class="string">&quot;D:\\study\\ctf\\2024SWPUCTF\\hua.exe&quot;</span>,</span><br><span class="line">        GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">        FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line">        <span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">        OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">        FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line">        <span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">    );</span><br><span class="line">    DWORD FileSize = GetFileSize(hFile, <span class="literal">NULL</span>);<span class="comment">//.exe磁盘文件大小</span></span><br><span class="line">    LPDWORD SizeToRead = <span class="number">0</span>;                     <span class="comment">//存储实际读取的字节数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟&quot;类磁盘&quot;空间</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* pBuf = new <span class="type">unsigned</span> <span class="type">char</span>[FileSize];        <span class="comment">//申请一块和文件大小相同的新内存</span></span><br><span class="line">    ZeroMemory(pBuf, FileSize);        <span class="comment">//将这块内存用0填充</span></span><br><span class="line">    <span class="comment">//读取磁盘文件</span></span><br><span class="line">    <span class="type">int</span> i = ReadFile(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">    PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pBuf;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">    PIMAGE_NT_HEADERS32 pNTheader = (PIMAGE_NT_HEADERS32)(pBuf + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">    DWORD ImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">    PBYTE pAlloc = (PBYTE)VirtualAlloc(<span class="literal">NULL</span>, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Dump Error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ZeroMemory(pAlloc, ImageSize);                              <span class="comment">//把申请到的空间先用0填充</span></span><br><span class="line">    CopyMemory(pAlloc, pBuf, pNTheader-&gt;OptionalHeader.SizeOfHeaders);<span class="comment">//DOS和NT部分复制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//节区表的开始</span></span><br><span class="line">    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="keyword">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line">    <span class="comment">//节区表指针，节区表紧随NT部分后，所以通过NT结构指针+NT结构大小的方式来获得节区表起始位置</span></span><br><span class="line">    DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;    <span class="comment">//NT部分规定了节区表的数目</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果当前节区表的数据为空，复制下一个节区表的数据</span></span><br><span class="line">        <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">            pSec++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pBuf + pSec-&gt;PointerToRawData);<span class="comment">//chSrcMem =节区的文件偏移地址</span></span><br><span class="line">        <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pAlloc + pSec-&gt;VirtualAddress);<span class="comment">//chDestMem=节区的RVA地址</span></span><br><span class="line">        DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;<span class="comment">//文件大小</span></span><br><span class="line">        RtlCopyMemory(chDestMem, chSrcMem, dwSizeOfRawData);                        <span class="comment">//复制过程</span></span><br><span class="line">        pSec++;                                                                     <span class="comment">//结构指针++就是下一个结构</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//杜哥部分登场</span></span><br><span class="line">    <span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">    PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line">    <span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size;<span class="comment">//重定位表的大小也在NT结构中</span></span><br><span class="line">    <span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">            <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">                WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">                <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    differ = *((DWORD*)(offset + (pBaseReloc-&gt;VirtualAddress) + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                    <span class="type">int</span> p = (DWORD)pAlloc + differ;</span><br><span class="line">                    memmove(pAlloc + offset + pBaseReloc-&gt;VirtualAddress, &amp;p, <span class="number">4</span>);<span class="comment">//把理论加载地址改为实际加载地址</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入表的处理</span></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line">    <span class="comment">//这个是IID的指针</span></span><br><span class="line">    <span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> DLLname[<span class="number">50</span>];</span><br><span class="line">            <span class="built_in">strncpy</span>(DLLname, (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc), <span class="number">49</span>);  <span class="comment">//获得DLL的名称</span></span><br><span class="line">            HMODULE hProcess = LoadLibraryA(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">            <span class="keyword">if</span> (!hProcess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> err[<span class="number">100</span>];</span><br><span class="line">                <span class="built_in">sprintf</span>(err, <span class="string">&quot;未找到%s&quot;</span>, DLLname);</span><br><span class="line">                MessageBoxA(<span class="literal">NULL</span>, err, <span class="string">&quot;Error&quot;</span>, MB_OKCANCEL);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            PIMAGE_THUNK_DATA32 pINT = (PIMAGE_THUNK_DATA32)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">            PIMAGE_THUNK_DATA32 pIAT = (PIMAGE_THUNK_DATA32)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">            <span class="keyword">while</span> ((DWORD)(pINT-&gt;u1.AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u1.AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u1.AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, (LPCSTR)(pINT-&gt;u1.AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">            pImport++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">    FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNTheader-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">    EOP();</span><br><span class="line">    <span class="built_in">free</span>(pBuf);</span><br><span class="line">    <span class="built_in">free</span>(pAlloc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="获得文件句柄以及大小"><a href="#获得文件句柄以及大小" class="headerlink" title="获得文件句柄以及大小"></a>获得文件句柄以及大小</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hFile = CreateFileA(<span class="string">&quot;D:\\study\\ctf\\2024SWPUCTF\\hua.exe&quot;</span>,</span><br><span class="line">    GENERIC_READ,     <span class="comment">//读取权限</span></span><br><span class="line">    FILE_SHARE_READ | FILE_SHARE_WRITE,     <span class="comment">//允许其他进程读取文件|允许其他进程写入文件</span></span><br><span class="line">    <span class="literal">NULL</span>,    <span class="comment">//不需要特定的安全性</span></span><br><span class="line">    OPEN_EXISTING,     <span class="comment">//不需要特定的安全性</span></span><br><span class="line">    FILE_ATTRIBUTE_NORMAL,    <span class="comment">//如果文件存在，则打开文件。如果文件不存在，操作会失败</span></span><br><span class="line">    <span class="literal">NULL</span>    <span class="comment">//普通文件，没有特殊属性。</span></span><br><span class="line">);</span><br><span class="line">DWORD FileSize = GetFileSize(hFile, <span class="literal">NULL</span>);<span class="comment">//.exe磁盘文件大小</span></span><br><span class="line">LPDWORD SizeToRead = <span class="number">0</span>;                     <span class="comment">//存储实际读取的字节数</span></span><br></pre></td></tr></table></figure><h2 id="复现磁盘文件"><a href="#复现磁盘文件" class="headerlink" title="复现磁盘文件"></a>复现磁盘文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开辟&quot;类磁盘&quot;空间</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = new <span class="type">unsigned</span> <span class="type">char</span>[FileSize];        <span class="comment">//申请一块和文件大小相同的新内存</span></span><br><span class="line">ZeroMemory(pBuf, FileSize);        <span class="comment">//将这块内存用0填充</span></span><br><span class="line"><span class="comment">//读取磁盘文件</span></span><br><span class="line"><span class="type">int</span> i = ReadFile(hFile, pBuf, FileSize, SizeToRead, <span class="literal">NULL</span>);  <span class="comment">//读取文件放在开辟的空间里，pBuf为空间句柄 </span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位磁盘中的DOS头和NT头"><a href="#定位磁盘中的DOS头和NT头" class="headerlink" title="定位磁盘中的DOS头和NT头"></a>定位磁盘中的DOS头和NT头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取磁盘文件的DOS头和NT头</span></span><br><span class="line">PIMAGE_DOS_HEADER pDOSheader = (PIMAGE_DOS_HEADER)pBuf;                             <span class="comment">//赋值DOS头</span></span><br><span class="line">PIMAGE_NT_HEADERS32 pNTheader = (PIMAGE_NT_HEADERS32)(pBuf + pDOSheader-&gt;e_lfanew); <span class="comment">//赋值NT头</span></span><br></pre></td></tr></table></figure><h2 id="复现内存空间"><a href="#复现内存空间" class="headerlink" title="复现内存空间"></a>复现内存空间</h2><p>在<strong>IMAGE_OPTIONAL_HEADER</strong>里的<strong>SizeOfImage</strong>中存储有PE文件在内存中映射大小，可以根据这个申请空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给内存分配空间，并对pAlloc进行初始化</span></span><br><span class="line">DWORDImageSize = pNTheader-&gt;OptionalHeader.SizeOfImage;  <span class="comment">//内存空间大小</span></span><br><span class="line">PBYTE pAlloc = (PBYTE)VirtualAlloc(<span class="literal">NULL</span>, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pAlloc == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Dump Error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ZeroMemory(pAlloc, ImageSize);                              <span class="comment">//把申请到的空间先用0填充</span></span><br><span class="line">CopyMemory(pAlloc, pBuf, pNTheader-&gt;OptionalHeader.SizeOfHeaders);<span class="comment">//DOS和NT部分复制</span></span><br></pre></td></tr></table></figure><h2 id="节区表复制"><a href="#节区表复制" class="headerlink" title="节区表复制"></a>节区表复制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节区表的开始</span></span><br><span class="line">PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNTheader + <span class="keyword">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"><span class="comment">//节区表指针，节区表紧随NT部分后，所以通过NT结构指针+NT结构大小的方式来获得节区表起始位置</span></span><br><span class="line">DWORD SecNum = pNTheader-&gt;FileHeader.NumberOfSections;    <span class="comment">//NT部分规定了节区表的数目</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SecNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果当前节区表的数据为空，复制下一个节区表的数据</span></span><br><span class="line">    <span class="keyword">if</span> (pSec-&gt;SizeOfRawData == <span class="number">0</span> || pSec-&gt;PointerToRawData == <span class="number">0</span>) &#123;</span><br><span class="line">        pSec++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* chSrcMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pBuf + pSec-&gt;PointerToRawData);<span class="comment">//chSrcMem =节区的文件偏移地址</span></span><br><span class="line">    <span class="type">char</span>* chDestMem = (<span class="type">char</span>*)((<span class="type">uintptr_t</span>)pAlloc + pSec-&gt;VirtualAddress);<span class="comment">//chDestMem=节区的RVA地址</span></span><br><span class="line">    DWORD dwSizeOfRawData = pSec-&gt;SizeOfRawData;<span class="comment">//文件大小</span></span><br><span class="line">    RtlCopyMemory(chDestMem, chSrcMem, dwSizeOfRawData);                        <span class="comment">//复制过程</span></span><br><span class="line">    pSec++;                                                                     <span class="comment">//结构指针++就是下一个结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是pSec的定义类型是<strong>PIMAGE_SECTION_HEADER</strong>，这是结构的指针，所以后面的pSec++，直接是跳过到下一个结构了后面的CopyMemory参数部分说一下</p><p>:::success<br>VirtualAddress;          &#x2F;&#x2F; 节区的 RVA 地址</p><p>PointerToRawData;        &#x2F;&#x2F; 在文件中的偏移量</p><p>SizeOfRawData;           &#x2F;&#x2F; 在文件中对齐后的尺寸</p><p>:::</p><p>这两个是之前节区表的知识，所以这里传参的意图就很明显了，用文件偏移量索引pBuf，扩展到相对虚拟地址所在位置</p><h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//杜哥部分登场</span></span><br><span class="line"><span class="comment">//开始检测并加载重定位表</span></span><br><span class="line">PIMAGE_BASE_RELOCATION pBaseReloc = (PIMAGE_BASE_RELOCATION)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress + pAlloc);</span><br><span class="line"><span class="comment">//重定位表指针通过NT结构的数据目录表查找到位置</span></span><br><span class="line"><span class="type">int</span> SizeOfBaseReloc = pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size;<span class="comment">//重定位表的大小也在NT结构中</span></span><br><span class="line"><span class="keyword">if</span> (pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        PWORD TypeOffset = (WORD*)((PBYTE)pBaseReloc + <span class="number">8</span>);          <span class="comment">//跳过前两个元素（不过在有的结构声明中TypeOffset不属于该结构</span></span><br><span class="line">        <span class="type">int</span> num = (pBaseReloc-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;                <span class="comment">//SizeOfBlock规定的是该单元的大小以及TypeOffset是一字的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            WORD type = TypeOffset[i] &gt;&gt; <span class="number">12</span>;                        <span class="comment">//TypeOffset[i] &gt;&gt; 12相当于在查找TypeOffset的前四字节（类型）</span></span><br><span class="line">            WORD offset = TypeOffset[i] &amp; <span class="number">0x0FFF</span>;                   <span class="comment">//去掉类型（前四字节）</span></span><br><span class="line">            <span class="type">int</span> differ = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                differ = *((DWORD*)(offset + (pBaseReloc-&gt;VirtualAddress) + pAlloc)) - pNTheader-&gt;OptionalHeader.ImageBase;</span><br><span class="line">                <span class="type">int</span> p = (DWORD)pAlloc + differ;</span><br><span class="line">                memmove(pAlloc + offset + pBaseReloc-&gt;VirtualAddress, &amp;p, <span class="number">4</span>);<span class="comment">//把理论加载地址改为实际加载地址</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SizeOfBaseReloc -= pBaseReloc-&gt;SizeOfBlock;                 <span class="comment">//通过字节大小来间接表示个数</span></span><br><span class="line">        pBaseReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pBaseReloc + pBaseReloc-&gt;SizeOfBlock);<span class="comment">//相当于结构指针++了，不过这么看来TypeOffset好像真不属于这个结构</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (SizeOfBaseReloc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要在回忆一下该结构的声明，不过好像书上的和现实有点不一样，下表是我稍微修改过的了</p><p>:::success<br><font style="color:rgb(51, 51, 51);">IMAGE_BASE_RELOCATION STRUCT</font></p><p><font style="color:rgb(51, 51, 51);">DWORD VirtualAddress; </font><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;这一组重定位数据的开始RVA，各重定向的地址必须加上这个RVA才是重定向的完整RVA</font><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">DWORD SizeOfBlock; </font><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;当前重定位结构的大小</font><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);"> IMAGE_BASE_RELOCATION ENDS</font></p><p><font style="color:rgb(51, 51, 51);">WORD TypeOffset[</font><font style="color:rgb(0, 128, 128);">1</font><font style="color:rgb(51, 51, 51);">]; </font><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;数组，分高4位和低12位，高4位代表重定位类型，低12位代表重定位地址</font></p><p><font style="color:rgb(153, 153, 136);">&#x2F;&#x2F;该地址与VirtualAddress相加，就得到需要修改数据的地址的指针</font></p><p>:::</p><h2 id="修复IAT表"><a href="#修复IAT表" class="headerlink" title="修复IAT表"></a>修复IAT表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入表的处理</span></span><br><span class="line">PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pNTheader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + pAlloc);</span><br><span class="line"><span class="comment">//这个是IID的指针</span></span><br><span class="line"><span class="keyword">if</span> (pImport != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> DLLname[<span class="number">50</span>];</span><br><span class="line">        <span class="built_in">strncpy</span>(DLLname, (<span class="type">char</span>*)(pImport-&gt;Name + pAlloc), <span class="number">49</span>);  <span class="comment">//获得DLL的名称</span></span><br><span class="line">        HMODULE hProcess = LoadLibraryA(DLLname);               <span class="comment">//通过名称找句柄</span></span><br><span class="line">        <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> err[<span class="number">100</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(err, <span class="string">&quot;未找到%s&quot;</span>, DLLname);</span><br><span class="line">            MessageBoxA(<span class="literal">NULL</span>, err, <span class="string">&quot;Error&quot;</span>, MB_OKCANCEL);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PIMAGE_THUNK_DATA32 pINT = (PIMAGE_THUNK_DATA32)(pImport-&gt;OriginalFirstThunk + pAlloc);</span><br><span class="line">        PIMAGE_THUNK_DATA32 pIAT = (PIMAGE_THUNK_DATA32)(pImport-&gt;FirstThunk + pAlloc);</span><br><span class="line">        <span class="keyword">while</span> ((DWORD)(pINT-&gt;u1.AddressOfData) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PIMAGE_IMPORT_BY_NAME pFucname = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u1.AddressOfData + pAlloc);  <span class="comment">//找DLL中函数的名字</span></span><br><span class="line">            <span class="keyword">if</span> (pINT-&gt;u1.AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<span class="comment">//判断如果是序号就是第一种处理方式</span></span><br><span class="line">            &#123;</span><br><span class="line">                pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, (LPCSTR)(pINT-&gt;u1.AddressOfData)));<span class="comment">//通过序号来获取地址</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pIAT-&gt;u1.AddressOfData = (DWORD)(GetProcAddress(hProcess, pFucname-&gt;Name));             <span class="comment">//通过函数名来获取地址</span></span><br><span class="line">            &#125;</span><br><span class="line">            pINT++;</span><br><span class="line">            pIAT++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IID结构的一些定义</p><p>:::success<br> Name;                               &#x2F;&#x2F;导入DLL文件名的地址RVA</p><p>:::</p><p>这里注意的就是<code>IMAGE_ORDINAL_FLAG32</code>，<code>IMAGE_ORDINAL_FLAG32</code> 是一个位掩码，通常值为 <code>0x80000000</code>。它用于标识是否存在序号信息，所以通过&amp;符号两个都是1才是1的特性来判断，<code>pINT-&gt;u1.AddressOfData</code>是什么</p><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后的操作就是修正程序的入口地址</span></span><br><span class="line">FARPROC EOP = (FARPROC)((LPBYTE)pAlloc + pNTheader-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">EOP();</span><br></pre></td></tr></table></figure><h2 id="清空缓存"><a href="#清空缓存" class="headerlink" title="清空缓存"></a>清空缓存</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(pBuf);</span><br><span class="line"><span class="built_in">free</span>(pAlloc);</span><br></pre></td></tr></table></figure><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="CreateFileA定义"><a href="#CreateFileA定义" class="headerlink" title="CreateFileA定义"></a>CreateFileA定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateFileA</span><span class="params">(</span></span><br><span class="line"><span class="params">    LPCSTR                lpFileName,           <span class="comment">// 文件路径名</span></span></span><br><span class="line"><span class="params">    DWORD                 dwDesiredAccess,      <span class="comment">// 访问模式</span></span></span><br><span class="line"><span class="params">    DWORD                 dwShareMode,          <span class="comment">// 共享模式</span></span></span><br><span class="line"><span class="params">    LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class="comment">// 安全描述符</span></span></span><br><span class="line"><span class="params">    DWORD                 dwCreationDisposition,<span class="comment">// 文件创建方式</span></span></span><br><span class="line"><span class="params">    DWORD                 dwFlagsAndAttributes, <span class="comment">// 文件属性</span></span></span><br><span class="line"><span class="params">    HANDLE                hTemplateFile         <span class="comment">// 模板文件句柄</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><p>:::success</p><h4 id="lpFileName-LPCSTR"><a href="#lpFileName-LPCSTR" class="headerlink" title="lpFileName (LPCSTR):"></a>lpFileName (LPCSTR):</h4><ul><li>指向文件的路径名，类型是 ANSI 字符串（<code>char*</code>）。可以是绝对路径或相对路径。</li></ul><h4 id="dwDesiredAccess-DWORD"><a href="#dwDesiredAccess-DWORD" class="headerlink" title="dwDesiredAccess (DWORD):"></a>dwDesiredAccess (DWORD):</h4><ul><li>指定请求的访问权限，如下：<ul><li><code>GENERIC_READ</code>：读取权限。</li><li><code>GENERIC_WRITE</code>：写入权限。</li><li><code>GENERIC_EXECUTE</code>：执行权限。</li><li><code>GENERIC_ALL</code>：所有权限。</li><li>可以按位组合多个访问权限。</li></ul></li></ul><h4 id="dwShareMode-DWORD"><a href="#dwShareMode-DWORD" class="headerlink" title="dwShareMode (DWORD):"></a>dwShareMode (DWORD):</h4><ul><li>指定文件共享模式。可以是以下组合：<ul><li><code>FILE_SHARE_READ</code>：允许其他进程读取文件。</li><li><code>FILE_SHARE_WRITE</code>：允许其他进程写入文件。</li><li><code>FILE_SHARE_DELETE</code>：允许其他进程删除文件。</li><li>如果不允许共享，可以使用 <code>0</code>。</li></ul></li></ul><h4 id="lpSecurityAttributes-LPSECURITY-ATTRIBUTES"><a href="#lpSecurityAttributes-LPSECURITY-ATTRIBUTES" class="headerlink" title="lpSecurityAttributes (LPSECURITY_ATTRIBUTES):"></a>lpSecurityAttributes (LPSECURITY_ATTRIBUTES):</h4><ul><li>指向 <code>SECURITY_ATTRIBUTES</code> 结构的指针，决定文件的安全性设置。如果不需要特定的安全性，可以传 <code>NULL</code>。</li></ul><h4 id="dwCreationDisposition-DWORD"><a href="#dwCreationDisposition-DWORD" class="headerlink" title="dwCreationDisposition (DWORD):"></a>dwCreationDisposition (DWORD):</h4><ul><li>文件创建方式。常见的选项有：<ul><li><code>CREATE_NEW</code>：如果文件已存在，则创建失败。</li><li><code>CREATE_ALWAYS</code>：无论文件是否存在，都创建一个新的文件，文件会被覆盖。</li><li><code>OPEN_EXISTING</code>：如果文件存在，则打开文件。如果文件不存在，操作会失败。</li><li><code>OPEN_ALWAYS</code>：如果文件存在，则打开文件。如果文件不存在，则创建文件。</li><li><code>TRUNCATE_EXISTING</code>：如果文件存在且可写，则将文件大小截断为 0。</li></ul></li></ul><h4 id="dwFlagsAndAttributes-DWORD"><a href="#dwFlagsAndAttributes-DWORD" class="headerlink" title="dwFlagsAndAttributes (DWORD):"></a>dwFlagsAndAttributes (DWORD):</h4><ul><li>文件的属性，常见的属性有：<ul><li><code>FILE_ATTRIBUTE_NORMAL</code>：普通文件，没有特殊属性。</li><li><code>FILE_ATTRIBUTE_READONLY</code>：只读文件。</li><li><code>FILE_ATTRIBUTE_HIDDEN</code>：隐藏文件。</li><li><code>FILE_FLAG_RANDOM_ACCESS</code>：随机访问文件。</li><li><code>FILE_FLAG_WRITE_THROUGH</code>：数据直接写入磁盘，不使用缓存。</li></ul></li></ul><h4 id="hTemplateFile-HANDLE"><a href="#hTemplateFile-HANDLE" class="headerlink" title="hTemplateFile (HANDLE):"></a>hTemplateFile (HANDLE):</h4><ul><li>用于指定一个模板文件的句柄，通常为 <code>NULL</code>。这个参数一般用于创建文件时参考其他文件的属性。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果操作成功，返回一个 <strong>文件句柄</strong>，可以用于后续的文件操作（如读取、写入等）。</li><li>如果操作失败，返回 <code>**INVALID_HANDLE_VALUE**</code>，可以通过 <code>GetLastError</code> 函数获取详细的错误信息。</li></ul><p>:::</p><h3 id="强制插入两小点（"><a href="#强制插入两小点（" class="headerlink" title="强制插入两小点（"></a>强制插入两小点（</h3><h4 id="文件句柄的创建"><a href="#文件句柄的创建" class="headerlink" title="文件句柄的创建"></a>文件句柄的创建</h4><p> 当你调用 <code>CreateFileA</code> 成功时，操作系统会为文件分配一个句柄。这个句柄是与文件在磁盘中的位置无关的，它只是一个标识符，用于后续的文件操作。文件本身并没有被完全加载到内存中，除非你使用读取函数（如 <code>ReadFile</code>）来访问它。  </p><h4 id="文件句柄的本质"><a href="#文件句柄的本质" class="headerlink" title="文件句柄的本质"></a>文件句柄的本质</h4><p>文件句柄本身确实是一个<strong>虚拟的标识符</strong>，它并不是一个内存地址，而是操作系统内核分配给文件的一个索引。你可以把文件句柄看作是操作系统用来<strong>引用文件的标识符</strong>，你无法直接看到这个句柄指向的内容，它是由操作系统管理的。</p><h2 id="GetFileSize定义"><a href="#GetFileSize定义" class="headerlink" title="GetFileSize定义"></a>GetFileSize定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DWORD <span class="title function_">GetFileSize</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE  hFile,        <span class="comment">// 文件的句柄</span></span></span><br><span class="line"><span class="params">  LPDWORD lpFileSizeHigh <span class="comment">// 如果文件大小大于 4GB, 存储高32位</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解析-1"><a href="#参数解析-1" class="headerlink" title="参数解析"></a>参数解析</h3><p>:::success</p><h4 id="hFile-HANDLE-："><a href="#hFile-HANDLE-：" class="headerlink" title="hFile (HANDLE)："></a>hFile (HANDLE)：</h4><ul><li>文件句柄，必须是通过 <code>CreateFile</code> 或其他文件打开函数获得的有效句柄。</li><li>如果 <code>hFile</code> 是无效的（例如 <code>INVALID_HANDLE_VALUE</code>），调用将失败。</li></ul><h4 id="lpFileSizeHigh-LPDWORD-："><a href="#lpFileSizeHigh-LPDWORD-：" class="headerlink" title="lpFileSizeHigh (LPDWORD)："></a>lpFileSizeHigh (LPDWORD)：</h4><ul><li>这是一个指向 <code>DWORD</code> 类型变量的指针，用来存储文件的高 32 位大小。Windows 文件系统中，文件大小是一个 64 位的数值，低 32 位由 <code>GetFileSize</code> 返回，高 32 位通过这个参数返回。</li><li>如果文件的大小不超过 4GB，<code>lpFileSizeHigh</code> 可以传入 <code>NULL</code>，此时函数只返回 32 位的文件大小。</li></ul><p>:::</p><h2 id="ReadFile定义"><a href="#ReadFile定义" class="headerlink" title="ReadFile定义"></a>ReadFile定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">ReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">  HANDLE       hFile,          <span class="comment">// 文件句柄</span></span></span><br><span class="line"><span class="params">  LPVOID       lpBuffer,       <span class="comment">// 数据缓冲区</span></span></span><br><span class="line"><span class="params">  DWORD        nNumberOfBytesToRead,  <span class="comment">// 要读取的字节数</span></span></span><br><span class="line"><span class="params">  LPDWORD      lpNumberOfBytesRead,  <span class="comment">// 实际读取的字节数</span></span></span><br><span class="line"><span class="params">  LPOVERLAPPED lpOverlapped    <span class="comment">// 异步操作时的重叠结构体</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解析-2"><a href="#参数解析-2" class="headerlink" title="参数解析"></a>参数解析</h3><p>:::success</p><ul><li><code>**hFile**</code>：</li><li><strong>类型</strong>：<code>HANDLE</code></li><li>这是一个文件句柄，用于指定要读取的文件或设备。文件句柄可以通过 <code>CreateFile</code> 或 <code>OpenFile</code> 等函数获取。</li><li><code>**lpBuffer**</code>：</li><li><strong>类型</strong>：<code>LPVOID</code>（指向缓冲区的指针）</li><li>这是一个指针，指向存储读取数据的缓冲区。函数将读取的数据存放在这个缓冲区中。</li><li><code>**nNumberOfBytesToRead**</code>：</li><li><strong>类型</strong>：<code>DWORD</code></li><li>这是一个无符号整数，指定从文件中要读取的字节数。通常这个值是一个常量，表示需要读取的字节数。如果文件内容不足此大小，<code>ReadFile</code> 会尽可能读取剩余内容。</li><li><code>**lpNumberOfBytesRead**</code>：</li><li><strong>类型</strong>：<code>LPDWORD</code></li><li>这是一个指向 <code>DWORD</code> 变量的指针。调用成功后，这个变量会包含实际读取的字节数。如果读取的字节数小于 <code>nNumberOfBytesToRead</code>，则表示文件已到达末尾。</li><li><code>**lpOverlapped**</code>：</li><li><strong>类型</strong>：<code>LPOVERLAPPED</code></li><li>这是一个指向 <code>OVERLAPPED</code> 结构的指针，用于支持异步操作。如果为 <code>NULL</code>，则表示同步操作。如果进行异步操作时，必须提供一个有效的 <code>OVERLAPPED</code> 结构，它包含操作完成的回调信息和操作状态。</li></ul><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><ul><li><strong>成功</strong>：如果函数成功执行，返回值为非零值（即 <code>TRUE</code>）。</li><li><strong>失败</strong>：如果函数失败，返回值为零（即 <code>FALSE</code>）。可以通过调用 <code>GetLastError</code> 来获取具体的错误代码。</li></ul><p>:::</p><h2 id="ZeroMemory"><a href="#ZeroMemory" class="headerlink" title="ZeroMemory"></a>ZeroMemory</h2><p>将传入第一个参数（指针）指向的部分中前第二个参数（字节大小）大小的部分清零</p><h2 id="CopyMemory"><a href="#CopyMemory" class="headerlink" title="CopyMemory"></a>CopyMemory</h2><p>将第二个参数（指针）的前第三个参数（字节大小）<strong>大小</strong>的部分<strong>copy</strong>到第一个参数（指针）指向的部分</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>观PE文件格式有感——更直观的理解计算机</title>
      <link href="/2024/12/01/%E8%A7%82PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%9C%89%E6%84%9F%E2%80%94%E2%80%94%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
      <url>/2024/12/01/%E8%A7%82PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%9C%89%E6%84%9F%E2%80%94%E2%80%94%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>本篇文章均为新手小白学习过程中，突然有的个人感悟，如果有错误欢迎大师傅们指出</p><h1 id="计算机构造？"><a href="#计算机构造？" class="headerlink" title="计算机构造？"></a>计算机构造？</h1><p>在买电脑的时候我们经常能看到，什么i5，i7处理器，什么16+512，32+1T，这都是什么呢？</p><p>在我浅显的理解里，电脑可以大致分为：CPU，运行内存，内存和显示屏</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>首先说的是内存，很多人都知道，C、D盘是内存，那么为什么C、D盘叫磁盘，而且内存和运行内存又有什么区别呢？</p><p>看到PE文件，我突然想到了这个<strong>C,D盘</strong>为什么叫<strong>磁盘</strong>。其实外面买的那种u盘，<strong>和你电脑里看到的C,D磁盘没什么区别</strong>。简单来说就是说磁盘和电脑之间并不是紧密相连的，而只是相当于有一个<strong>u盘在你的电脑里</strong>，只不过它会自始至终的插在USB口中，而电脑真正运行的东西是<strong>CPU与运行内存</strong>，当你打开一个文件的时候，其实相当与是从U盘（磁盘），映射（拷贝）一份给<strong>运行内存</strong>，再将每一步要用到的东西传给<strong>CPU</strong>处理</p><p>那么既然知道了文件并<strong>不是在磁盘中打开运行</strong>的，是在<strong>运行内存</strong>中打开的，那么<strong>“打开”</strong>是什么呢？</p><p>打开便是映射，一个文件，他有一部分并不是可用的，我们知道，机器它是死的，编写程序的人知道，先走这个部分，再走那个部分，但机器怎么知道呢</p><p>于是便出现了PE文件格式，在文件中会有一部分信息来告诉机器，他应该怎么做，所以一个文件里并不是所有的内容都是需要用到的，所以在映射的时候，<strong>只会映射相对有用的部分（代码块、数据块等）</strong></p><h1 id="运行内存"><a href="#运行内存" class="headerlink" title="运行内存"></a>运行内存</h1><p>说到这里大家就明白了，运行内存的大小决定了什么呢，就是决定了你一次性可以打开多少个文件，运行内存足够大，内存中可以映射到运行内存的文件就足够多（打开的文件就足够多）</p><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><p>那么处理器（CPU）的作用，便是将运行内存中的文件按批次处理，相当于计算机的大脑，这里要注意，就像内存与运行内存一样，CPU与运行内存是分开的，是需要运行内存先通过线路传输数据到CPU中，再从CPU传输数据到运行内存中去的，至于一次可以传输多少处理多少，这就和多线程，或者CPU几代有关了，所以CPU的代数与线程数，可以相对反应的是这个电脑，它的“大脑“转的有多快，以及一次可以处理多少事情</p><h1 id="显示屏"><a href="#显示屏" class="headerlink" title="显示屏"></a>显示屏</h1><p>这个就没啥了，我就不过多说了，就是高刷和清晰度啥的区别了，唯一注意的就是显卡，也就是显示屏中的CPU，独立显卡，就是给你的显示屏也装个大脑，处理图像的时候更灵活，更不卡顿</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CreatRemoteThread实现注入</title>
      <link href="/2024/11/26/CreatRemoteThread%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/26/CreatRemoteThread%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>写一段shellcode，用CreateReoteThread函数注入 </p><p><a href="https://blog.csdn.net/weixin_44120785/article/details/131690046">Windows C++远程线程（CreateRemoteThread）注入DLL方法、代码示例。-CSDN博客</a></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/intro/dll.jpg" alt="dll注入原理"></h2><h2 id="代码源码"><a href="#代码源码" class="headerlink" title="代码源码"></a>代码源码</h2><h3 id="dll代码"><a href="#dll代码" class="headerlink" title="dll代码"></a>dll代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// DLL入口点函数</span></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="comment">// 弹窗代码</span></span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;Hello from YourDLL!&quot;</span>, <span class="string">L&quot;DLL Injection&quot;</span>, MB_OK | MB_ICONINFORMATION);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>**入口函数 **<code>**DllMain**</code>：这是 DLL 的入口函数，每当有新的进程或线程加载或卸载此 DLL 时，系统会调用 <code>DllMain</code> 函数。该函数的返回值是一个 <code>BOOL</code>，返回 <code>TRUE</code> 表示加载成功，返回 <code>FALSE</code> 表示加载失败。</li><li><strong>参数说明</strong>：</li><li><code>HMODULE hModule</code>：DLL 模块句柄。</li><li><code>DWORD ul_reason_for_call</code>：调用原因，可能的值为：<ul><li><code>DLL_PROCESS_ATTACH</code>：进程加载 DLL 时调用。</li><li><code>DLL_THREAD_ATTACH</code>：线程加载 DLL 时调用。</li><li><code>DLL_THREAD_DETACH</code>：线程卸载 DLL 时调用。</li><li><code>DLL_PROCESS_DETACH</code>：进程卸载 DLL 时调用。</li></ul></li><li><code>LPVOID lpReserved</code>：保留字段，在一般情况下不需要使用。</li><li><strong>功能实现</strong>：</li><li><code>case DLL_PROCESS_ATTACH</code>：当 DLL 被加载时执行的代码。在这里，通过 <code>MessageBox</code> 函数显示一个弹窗，内容为 <code>&quot;Hello from YourDLL!&quot;</code>。</li><li>其他情况（<code>DLL_THREAD_ATTACH</code>、<code>DLL_THREAD_DETACH</code>、<code>DLL_PROCESS_DETACH</code>）下不执行任何操作。</li><li><code>**MessageBox**</code>** 函数**：创建一个带消息的弹窗。传入的参数如下：</li><li><code>NULL</code>：弹窗不依赖任何父窗口。</li><li><code>L&quot;Hello from YourDLL!&quot;</code>：弹窗的消息内容。</li><li><code>L&quot;DLL Injection&quot;</code>：弹窗的标题。</li><li><code>MB_OK | MB_ICONINFORMATION</code>：弹窗显示 “OK” 按钮，并使用信息图标。</li></ul><h3 id="被注入dll的进程代码"><a href="#被注入dll的进程代码" class="headerlink" title="被注入dll的进程代码"></a>被注入dll的进程代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sleep(<span class="number">1000</span> * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***\n&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="执行注入的代码"><a href="#执行注入的代码" class="headerlink" title="执行注入的代码"></a>执行注入的代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取目标进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetTargetProcessID</span><span class="params">(<span class="type">const</span> TCHAR* targetProcessName)</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD processID = <span class="number">0</span>;</span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        PROCESSENTRY32 processEntry;</span><br><span class="line">        processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">        <span class="keyword">if</span> (Process32First(hSnapshot, &amp;processEntry))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tcsicmp(processEntry.szExeFile, targetProcessName) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    processID = processEntry.th32ProcessID;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;processEntry));</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hSnapshot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processID;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 远程线程注入DLL</span></span><br><span class="line">BOOL <span class="title function_">InjectDll</span><span class="params">(DWORD processID, <span class="type">const</span> TCHAR* dllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    LPVOID dllPathAddress = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (dllPathAddress == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    SIZE_T bytesWritten;</span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, dllPathAddress, dllPath, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), &amp;bytesWritten))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    HMODULE kernel32Module = GetModuleHandle(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    LPTHREAD_START_ROUTINE loadLibraryFunction = (LPTHREAD_START_ROUTINE)GetProcAddress(kernel32Module, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line">    HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, loadLibraryFunction, dllPathAddress, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    WaitForSingleObject(hRemoteThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hRemoteThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> TCHAR* targetProcessName = _T(<span class="string">&quot;runTest.exe&quot;</span>); <span class="comment">// 目标进程的名称</span></span><br><span class="line">    <span class="type">const</span> TCHAR* dllPath = _T(<span class="string">&quot;C:\\Users\\admin\\source\\repos\\DLLinject\\x64\\Debug\\DLLinject.dll&quot;</span>); <span class="comment">// 自定义DLL的路径</span></span><br><span class="line"> </span><br><span class="line">    DWORD targetProcessID = GetTargetProcessID(targetProcessName);</span><br><span class="line">    <span class="keyword">if</span> (targetProcessID != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (InjectDll(targetProcessID, dllPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;DLL injected successfully.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failed to inject DLL.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Target process not found.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="单段分析"><a href="#单段分析" class="headerlink" title="单段分析"></a>单段分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> TCHAR* targetProcessName = _T(<span class="string">&quot;Aes!.exe&quot;</span>); <span class="comment">// 目标进程的名称</span></span><br><span class="line">    <span class="type">const</span> TCHAR* dllPath = _T(<span class="string">&quot;D:\\study\\VSstdio\\dllxxx\\dllmain\\x64\\Debug\\dllin.dll&quot;</span>); <span class="comment">// 自定义DLL的路径</span></span><br><span class="line"></span><br><span class="line">    DWORD targetProcessID = GetTargetProcessID(targetProcessName);</span><br></pre></td></tr></table></figure><p>首先这套程序的使用方法是，被注入进程的先运行，再运行执行注入的代码，代码在刚开始会找你要注入的程序，找到以后，就调用dll代码，说明注入成功</p><p>接下来，先细分析执行注入代码的每一段</p><p>首先看到，设置了两个变量名称，一个是目标进程名，另一个是dll代码地址，后面设立了目标进程id为得到目标进程id函数里传入目标进程名，就跟着去分析得到目标进程id函数</p><h4 id="获取进程的ID"><a href="#获取进程的ID" class="headerlink" title="获取进程的ID"></a>获取进程的ID</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DWORD <span class="title function_">GetTargetProcessID</span><span class="params">(<span class="type">const</span> TCHAR* targetProcessName)</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD processID = <span class="number">0</span>;</span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        PROCESSENTRY32 processEntry;</span><br><span class="line">        processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">        <span class="keyword">if</span> (Process32First(hSnapshot, &amp;processEntry))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tcsicmp(processEntry.szExeFile, targetProcessName) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    processID = processEntry.th32ProcessID;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;processEntry));</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hSnapshot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义，其次定义processID后面用，紧接着函数访问获取一个正在进行的程序返回一个权柄给hSnapshot，if语句判断返回是否成功，紧接着if语句内，用结构体定义快速存储进程这两步是绑定的，作用就是快速遍历所有进程</p><p>之后的if语句，<code>Process32First(hSnapshot, &amp;processEntry)</code>这个是初始，把结构体创造的程序空间赋值，赋值的对象是获取的进程，注意此时后面的是指针，给之后是if判定是不是要的程序名，如果是的话，就把此时的id给processid，退出循环，返回id，回到主程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (targetProcessID != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (InjectDll(targetProcessID, dllPath))</span><br></pre></td></tr></table></figure><p>这里先判断是否成功获取id，获取成功了就进函数</p><h4 id="远程线程注入DLL"><a href="#远程线程注入DLL" class="headerlink" title="远程线程注入DLL"></a>远程线程注入DLL</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">InjectDll</span><span class="params">(DWORD processID, <span class="type">const</span> TCHAR* dllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);</span><br></pre></td></tr></table></figure><p> 首先是定义一个句柄hProcess，用函数OpenProcess打开进程，获取其句柄，如果失败返回false</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续if语句就是说如果上文的Open失败的话会返回null，如果null了就返回false结束函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPVOID dllPathAddress = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开辟一处内存空间用于放置需要的dll代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dllPathAddress == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否成功，失败的话用closehandle函数关闭打开的句柄，并返回失败</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> SIZE_T bytesWritten;</span><br><span class="line"><span class="keyword">if</span> (!WriteProcessMemory(hProcess, dllPathAddress, dllPath, _tcslen(dllPath) * <span class="keyword">sizeof</span>(TCHAR), &amp;bytesWritten))</span><br><span class="line">&#123;</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建存储返回实际写入字节的变量，if里调用写入dll代码的函数，如果成功返回ture，再根据“！”反义不进条件，反之进if条件，将开辟的空间释放，然后关闭句柄</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    HMODULE kernel32Module = GetModuleHandle(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    LPTHREAD_START_ROUTINE loadLibraryFunction = (LPTHREAD_START_ROUTINE)GetProcAddress(kernel32Module, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line">    HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, loadLibraryFunction, dllPathAddress, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hRemoteThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hRemoteThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里没什么就是比较固定的模板了，前三个函数分别是</p><p>获取“kernel32.dll”的句柄</p><p>获取线程启动的函数指针，这个函数就是负责后续可以正常让dll注入的代码用的，在kernel32.dll里</p><p>CreateRemoteThread这个函数把线程启动函数用了让要注入的dll函数，注入到线程中，并且把远程线程句柄传回</p><p>如果失败了就释放创建的地方，关闭句柄</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    WaitForSingleObject(hRemoteThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, dllPathAddress, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hRemoteThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待远程创建的程序接到下一项指令，这里是因为我的dll程序写的有等待响应所以说这里才会要等待函数，后面就是响应完就没事了就结束释放这几个句柄了</p><h3 id="用到的新东西"><a href="#用到的新东西" class="headerlink" title="用到的新东西"></a>用到的新东西</h3><h4 id="CreateToolhelp32Snapshot（TH32CS-SNAP-x）函数"><a href="#CreateToolhelp32Snapshot（TH32CS-SNAP-x）函数" class="headerlink" title="CreateToolhelp32Snapshot（TH32CS_SNAP...,x）函数"></a><code>CreateToolhelp32Snapshot（TH32CS_SNAP...,x）</code>函数</h4><p>是 Windows API 中用于获取系统进程、线程、模块和堆栈信息的函数，函数需要的</p><h5 id="传参："><a href="#传参：" class="headerlink" title="传参："></a>传参：</h5><h6 id="第一位"><a href="#第一位" class="headerlink" title="第一位"></a>第一位</h6><pre><code>     表示我们请求创建一个进程快照。该参数指定了快照内容的类型    * `TH32CS_SNAPPROCESS`：表示获取系统中所有正在运行的进程信息。    * `TH32CS_SNAPTHREAD`：获取线程信息。    * `TH32CS_SNAPMODULE`：获取模块（DLL）信息。    * `TH32CS_SNAPHEAPLIST`：获取堆栈信息。</code></pre><h6 id="第二位"><a href="#第二位" class="headerlink" title="第二位"></a>第二位</h6><p>表示指定程序的ID，如果是0就代表全部都要</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回句柄</p><p>如果失败会返回 INVALID_HANDLE_VALUE  </p><h4 id="OpenProcess-access-bool-processID-函数"><a href="#OpenProcess-access-bool-processID-函数" class="headerlink" title="OpenProcess(access,bool,processID)函数"></a><code>OpenProcess(access,bool,processID)</code>函数</h4><p>起作用如名，打开进程，获取句柄</p><h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><h6 id="第一位-1"><a href="#第一位-1" class="headerlink" title="第一位"></a>第一位</h6><p>表示你想要获取的权限</p><pre><code>    * `PROCESS_ALL_ACCESS`：表示全部权限</code></pre><h6 id="第二位-1"><a href="#第二位-1" class="headerlink" title="第二位"></a>第二位</h6><p>表示失败返回bool值</p><h6 id="第三位"><a href="#第三位" class="headerlink" title="第三位"></a>第三位</h6><p>表示要打开的进程id</p><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回句柄</p><p>失败返回FALSE</p><h4 id="CloseHandle函数"><a href="#CloseHandle函数" class="headerlink" title="CloseHandle函数"></a><code>CloseHandle</code>函数</h4><p>这个就没啥说的和上面的<code>OpenProcess</code>刚好相反作用，就是注意传参传入你想关闭的句柄就ok</p><h4 id="VirtualAllocEx（access-lpaddress-dwsize-flallocationtype-flprotect）-函数"><a href="#VirtualAllocEx（access-lpaddress-dwsize-flallocationtype-flprotect）-函数" class="headerlink" title="VirtualAllocEx（access,lpaddress,dwsize,flallocationtype,flprotect） 函数"></a><code>VirtualAllocEx（access,lpaddress,dwsize,flallocationtype,flprotect）</code> 函数</h4><p>是 Windows API 中用于在指定的进程地址空间内分配内存的函数  </p><h5 id="传参-1"><a href="#传参-1" class="headerlink" title="传参"></a>传参</h5><h6 id="第一位-2"><a href="#第一位-2" class="headerlink" title="第一位"></a>第一位</h6><p>目标进程的句柄</p><h6 id="第二位-2"><a href="#第二位-2" class="headerlink" title="第二位"></a>第二位</h6><p>空间分配的地方，如果是null就表示系统自己安排</p><h6 id="第三位-1"><a href="#第三位-1" class="headerlink" title="第三位"></a>第三位</h6><p>需要分配的大小</p><h6 id="第四位"><a href="#第四位" class="headerlink" title="第四位"></a>第四位</h6><p>内存分配的类型，指定如何分配</p><h6 id="第五位"><a href="#第五位" class="headerlink" title="第五位"></a>第五位</h6><p>内存区域的保护属性，指定该区域的访问权限</p><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回区域指针（LPVOID)</p><p>失败返回FALSE</p><h4 id="VirtualFreeEx-hProcess-dllPathAddress-0-MEM-RELEASE-函数"><a href="#VirtualFreeEx-hProcess-dllPathAddress-0-MEM-RELEASE-函数" class="headerlink" title="VirtualFreeEx(hProcess, dllPathAddress, 0, MEM_RELEASE)函数"></a><code>VirtualFreeEx(hProcess, dllPathAddress, 0, MEM_RELEASE)</code>函数</h4><p>这个和上一个起相反作用，就是记一下传参，第一个是句柄，第二个是开辟的空间区域指针，第三个第四个如果是为了关闭的话固定传就好，第四个起主关闭作用</p><h4 id="WriteProcessMemory-access-dllPathAddress-lpBuffer-lpNumberOfBytesWritten-bytesWritten）函数"><a href="#WriteProcessMemory-access-dllPathAddress-lpBuffer-lpNumberOfBytesWritten-bytesWritten）函数" class="headerlink" title=" WriteProcessMemory(access, dllPathAddress, lpBuffer , lpNumberOfBytesWritten  , &amp;bytesWritten）函数"></a><code> WriteProcessMemory(access, dllPathAddress, lpBuffer , lpNumberOfBytesWritten  , &amp;bytesWritten）</code>函数</h4><pre><code> 用于将数据写入指定的进程的内存中  </code></pre><h5 id="传参-2"><a href="#传参-2" class="headerlink" title="传参"></a>传参</h5><h6 id="第一位-3"><a href="#第一位-3" class="headerlink" title="第一位"></a>第一位</h6><p>目标进程的句柄</p><h6 id="第二位-3"><a href="#第二位-3" class="headerlink" title="第二位"></a>第二位</h6><p>你要写在哪</p><h6 id="第三位-2"><a href="#第三位-2" class="headerlink" title="第三位"></a>第三位</h6><p>你要写入的东西，传入类型为区域指针</p><h6 id="第四位-1"><a href="#第四位-1" class="headerlink" title="第四位"></a>第四位</h6><p>要写入的字节数</p><h6 id="第五位-1"><a href="#第五位-1" class="headerlink" title="第五位"></a>第五位</h6><p>返回实际写入的字节数。</p><h5 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回TRUE</p><p>失败返回FALSE</p><h4 id="GetModuleHandle-（model）-函数"><a href="#GetModuleHandle-（model）-函数" class="headerlink" title="GetModuleHandle （model） 函数"></a><code>GetModuleHandle （model）</code> 函数</h4><p>此函数用于获取已加载的模块的句柄</p><h5 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h5><p>句柄</p><h4 id="GetProcAddress-（access-process-name-函数"><a href="#GetProcAddress-（access-process-name-函数" class="headerlink" title="GetProcAddress （access,process_name) 函数"></a><code>GetProcAddress （access,process_name)</code> 函数</h4><p> 作用是获取指定模块（DLL 或 EXE）中某个函数的地址  </p><h5 id="传参-3"><a href="#传参-3" class="headerlink" title="传参"></a>传参</h5><h6 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h6><p>目标模块的权柄</p><h6 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h6><p>目标的名称，如果传入的时函数名称，返回的就是对应函数地址，如果传入的是函数序号，返回与序号对应的函数地址</p><h5 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h5><p>成功时返回函数指针</p><p>失败时返回null</p><h4 id="CreateRemoteThread（access-NULL-0-loadLibraryFunction-dllPathAddress，0，NULL）-函数"><a href="#CreateRemoteThread（access-NULL-0-loadLibraryFunction-dllPathAddress，0，NULL）-函数" class="headerlink" title="CreateRemoteThread（access,NULL,0,loadLibraryFunction,dllPathAddress，0，NULL） 函数"></a><code>CreateRemoteThread（access,NULL,0,loadLibraryFunction,dllPathAddress，0，NULL） </code>函数</h4><h5 id="传参-4"><a href="#传参-4" class="headerlink" title="传参"></a>传参</h5><h6 id="第一个-1"><a href="#第一个-1" class="headerlink" title="第一个"></a>第一个</h6><p>目标进程的权柄</p><h6 id="第二个-1"><a href="#第二个-1" class="headerlink" title="第二个"></a>第二个</h6><p>线程安全属性（默认传null就好）</p><h6 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h6><p>线程栈堆大小（默认传0就好）</p><h6 id="第四个"><a href="#第四个" class="headerlink" title="第四个"></a>第四个</h6><p>你要在这里启动的过度函数</p><h6 id="第五个"><a href="#第五个" class="headerlink" title="第五个"></a>第五个</h6><p>过渡函数的参数，也就是传给第四个参数的，在本段函数中我们知道是要调用线程启动函数，目的是把dll函数注入进线程中，所以这个地方传入的应该是dll函数的地址</p><h6 id="第六个"><a href="#第六个" class="headerlink" title="第六个"></a>第六个</h6><p>线程创建标志（默认传0就好）</p><h6 id="第七个"><a href="#第七个" class="headerlink" title="第七个"></a>第七个</h6><p>返回线程ID，就是说注入之后需不需要接上别的程序，用的话就传id，不用的话就直接null</p><h5 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h5><p>成功了就返回创建的远程线程的句柄（这个函数弄出来的句柄）</p><p>失败的话就NULL</p><h4 id="PROCESSENTRY32-xxx结构体"><a href="#PROCESSENTRY32-xxx结构体" class="headerlink" title="PROCESSENTRY32 xxx结构体"></a><code>PROCESSENTRY32 xxx</code>结构体</h4><p>是用来存储单个进程信息的结构体</p><h4 id="Kernel32-dll模块"><a href="#Kernel32-dll模块" class="headerlink" title="Kernel32.dll模块"></a><code>Kernel32.dll</code>模块</h4><p> 是 Windows 系统的核心动态链接库，提供了许多重要的系统函数，如内存管理、进程控制、文件操作等  </p><p> CreateRemoteThread  </p><h4 id="WaitForSingleObject-hRemoteThread-INFINITE-函数"><a href="#WaitForSingleObject-hRemoteThread-INFINITE-函数" class="headerlink" title=" WaitForSingleObject(hRemoteThread, INFINITE)函数"></a><code> WaitForSingleObject(hRemoteThread, INFINITE)</code>函数</h4><p> 用于等待指定的对象（如线程、事件、互斥体等）进入“信号状态”。它通常用于同步操作，等待某个操作完成或某个条件满足  </p><h5 id="传参-5"><a href="#传参-5" class="headerlink" title="传参"></a>传参</h5><h6 id="第一个-2"><a href="#第一个-2" class="headerlink" title="第一个"></a>第一个</h6><p>等待线程的句柄</p><h6 id="第二个-2"><a href="#第二个-2" class="headerlink" title="第二个"></a>第二个</h6><p>等待时间</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>start of dream</title>
      <link href="/2024/11/25/start%20of%20dream/"/>
      <url>/2024/11/25/start%20of%20dream/</url>
      
        <content type="html"><![CDATA[<p>谨以此文记录逆向启程</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
